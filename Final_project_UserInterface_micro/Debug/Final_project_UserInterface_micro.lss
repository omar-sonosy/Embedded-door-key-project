
Final_project_UserInterface_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00003440  000034d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800116  00800116  0000358a  2**0
                  ALLOC
  3 .stab         00003018  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001009  00000000  00000000  000065a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000785d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a391  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b140  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_3>
      10:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_8>
      24:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 13 	call	0x2668	; 0x2668 <main>
      8a:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER_Init>:

static volatile void(*timer0)(void)= NULL;
static volatile void(*timer1)(void)= NULL;
static volatile void(*timer2)(void)= NULL;

void TIMER_Init(struct TIMER_init *i){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER_Init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	if(i->timer==0){
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	80 81       	ld	r24, Z
     b5a:	88 23       	and	r24, r24
     b5c:	09 f0       	breq	.+2      	; 0xb60 <TIMER_Init+0x1a>
     b5e:	3b c1       	rjmp	.+630    	; 0xdd6 <TIMER_Init+0x290>
		SET_BIT(TCCR0,FOC0);
     b60:	a3 e5       	ldi	r26, 0x53	; 83
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e3 e5       	ldi	r30, 0x53	; 83
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24
		OCR0 = i->comp_value;
     b6e:	ac e5       	ldi	r26, 0x5C	; 92
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e9 81       	ldd	r30, Y+1	; 0x01
     b74:	fa 81       	ldd	r31, Y+2	; 0x02
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	95 81       	ldd	r25, Z+5	; 0x05
     b7a:	8c 93       	st	X, r24
		//timer mode
		if(i->mode==0){
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	81 81       	ldd	r24, Z+1	; 0x01
     b82:	88 23       	and	r24, r24
     b84:	b1 f4       	brne	.+44     	; 0xbb2 <TIMER_Init+0x6c>
			CLEAR_BIT(TCCR0,WGM01);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0);
     ba2:	a9 e5       	ldi	r26, 0x59	; 89
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e9 e5       	ldi	r30, 0x59	; 89
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	8c 93       	st	X, r24
     bb0:	1a c0       	rjmp	.+52     	; 0xbe6 <TIMER_Init+0xa0>

		}
		else if(i->mode==1){
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	fa 81       	ldd	r31, Y+2	; 0x02
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	a9 f4       	brne	.+42     	; 0xbe6 <TIMER_Init+0xa0>
			SET_BIT(TCCR0,WGM01);
     bbc:	a3 e5       	ldi	r26, 0x53	; 83
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	88 60       	ori	r24, 0x08	; 8
     bc8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
     bca:	a3 e5       	ldi	r26, 0x53	; 83
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e3 e5       	ldi	r30, 0x53	; 83
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 7b       	andi	r24, 0xBF	; 191
     bd6:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
     bd8:	a9 e5       	ldi	r26, 0x59	; 89
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e9 e5       	ldi	r30, 0x59	; 89
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
     be6:	e9 81       	ldd	r30, Y+1	; 0x01
     be8:	fa 81       	ldd	r31, Y+2	; 0x02
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	91 05       	cpc	r25, r1
     bf2:	b1 f4       	brne	.+44     	; 0xc20 <TIMER_Init+0xda>
			CLEAR_BIT(TCCR0,CS02);
     bf4:	a3 e5       	ldi	r26, 0x53	; 83
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e3 e5       	ldi	r30, 0x53	; 83
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8b 7f       	andi	r24, 0xFB	; 251
     c00:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     c02:	a3 e5       	ldi	r26, 0x53	; 83
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e3 e5       	ldi	r30, 0x53	; 83
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8d 7f       	andi	r24, 0xFD	; 253
     c0e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     c10:	a3 e5       	ldi	r26, 0x53	; 83
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e3 e5       	ldi	r30, 0x53	; 83
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	81 60       	ori	r24, 0x01	; 1
     c1c:	8c 93       	st	X, r24
     c1e:	75 c0       	rjmp	.+234    	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==8){
     c20:	e9 81       	ldd	r30, Y+1	; 0x01
     c22:	fa 81       	ldd	r31, Y+2	; 0x02
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	88 30       	cpi	r24, 0x08	; 8
     c2a:	91 05       	cpc	r25, r1
     c2c:	b1 f4       	brne	.+44     	; 0xc5a <TIMER_Init+0x114>
			CLEAR_BIT(TCCR0,CS02);
     c2e:	a3 e5       	ldi	r26, 0x53	; 83
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e3 e5       	ldi	r30, 0x53	; 83
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8b 7f       	andi	r24, 0xFB	; 251
     c3a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
     c3c:	a3 e5       	ldi	r26, 0x53	; 83
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e3 e5       	ldi	r30, 0x53	; 83
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS00);
     c4a:	a3 e5       	ldi	r26, 0x53	; 83
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e3 e5       	ldi	r30, 0x53	; 83
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8e 7f       	andi	r24, 0xFE	; 254
     c56:	8c 93       	st	X, r24
     c58:	58 c0       	rjmp	.+176    	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==64){
     c5a:	e9 81       	ldd	r30, Y+1	; 0x01
     c5c:	fa 81       	ldd	r31, Y+2	; 0x02
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	91 05       	cpc	r25, r1
     c66:	b1 f4       	brne	.+44     	; 0xc94 <TIMER_Init+0x14e>
			CLEAR_BIT(TCCR0,CS02);
     c68:	a3 e5       	ldi	r26, 0x53	; 83
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e3 e5       	ldi	r30, 0x53	; 83
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8b 7f       	andi	r24, 0xFB	; 251
     c74:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
     c76:	a3 e5       	ldi	r26, 0x53	; 83
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e3 e5       	ldi	r30, 0x53	; 83
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     c84:	a3 e5       	ldi	r26, 0x53	; 83
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e3 e5       	ldi	r30, 0x53	; 83
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	8c 93       	st	X, r24
     c92:	3b c0       	rjmp	.+118    	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==256){
     c94:	e9 81       	ldd	r30, Y+1	; 0x01
     c96:	fa 81       	ldd	r31, Y+2	; 0x02
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	80 30       	cpi	r24, 0x00	; 0
     ca0:	92 07       	cpc	r25, r18
     ca2:	b1 f4       	brne	.+44     	; 0xcd0 <TIMER_Init+0x18a>
			SET_BIT(TCCR0,CS02);
     ca4:	a3 e5       	ldi	r26, 0x53	; 83
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e3 e5       	ldi	r30, 0x53	; 83
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	84 60       	ori	r24, 0x04	; 4
     cb0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     cb2:	a3 e5       	ldi	r26, 0x53	; 83
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e3 e5       	ldi	r30, 0x53	; 83
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS00);
     cc0:	a3 e5       	ldi	r26, 0x53	; 83
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e3 e5       	ldi	r30, 0x53	; 83
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8e 7f       	andi	r24, 0xFE	; 254
     ccc:	8c 93       	st	X, r24
     cce:	1d c0       	rjmp	.+58     	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==1024){
     cd0:	e9 81       	ldd	r30, Y+1	; 0x01
     cd2:	fa 81       	ldd	r31, Y+2	; 0x02
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	24 e0       	ldi	r18, 0x04	; 4
     cda:	80 30       	cpi	r24, 0x00	; 0
     cdc:	92 07       	cpc	r25, r18
     cde:	a9 f4       	brne	.+42     	; 0xd0a <TIMER_Init+0x1c4>
			SET_BIT(TCCR0,CS02);
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	84 60       	ori	r24, 0x04	; 4
     cec:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     cee:	a3 e5       	ldi	r26, 0x53	; 83
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e3 e5       	ldi	r30, 0x53	; 83
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8d 7f       	andi	r24, 0xFD	; 253
     cfa:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     cfc:	a3 e5       	ldi	r26, 0x53	; 83
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e3 e5       	ldi	r30, 0x53	; 83
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	86 81       	ldd	r24, Z+6	; 0x06
     d10:	88 23       	and	r24, r24
     d12:	79 f4       	brne	.+30     	; 0xd32 <TIMER_Init+0x1ec>
			CLEAR_BIT(TCCR0,COM01);
     d14:	a3 e5       	ldi	r26, 0x53	; 83
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e3 e5       	ldi	r30, 0x53	; 83
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 7d       	andi	r24, 0xDF	; 223
     d20:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
     d22:	a3 e5       	ldi	r26, 0x53	; 83
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e3 e5       	ldi	r30, 0x53	; 83
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 7e       	andi	r24, 0xEF	; 239
     d2e:	8c 93       	st	X, r24
     d30:	2a c3       	rjmp	.+1620   	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
     d32:	e9 81       	ldd	r30, Y+1	; 0x01
     d34:	fa 81       	ldd	r31, Y+2	; 0x02
     d36:	86 81       	ldd	r24, Z+6	; 0x06
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	b1 f4       	brne	.+44     	; 0xd68 <TIMER_Init+0x222>
			SET_BIT(DDRB,PB3);
     d3c:	a7 e3       	ldi	r26, 0x37	; 55
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 60       	ori	r24, 0x08	; 8
     d48:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
     d4a:	a3 e5       	ldi	r26, 0x53	; 83
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e3 e5       	ldi	r30, 0x53	; 83
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7d       	andi	r24, 0xDF	; 223
     d56:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
     d58:	a3 e5       	ldi	r26, 0x53	; 83
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e3 e5       	ldi	r30, 0x53	; 83
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 61       	ori	r24, 0x10	; 16
     d64:	8c 93       	st	X, r24
     d66:	0f c3       	rjmp	.+1566   	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
     d68:	e9 81       	ldd	r30, Y+1	; 0x01
     d6a:	fa 81       	ldd	r31, Y+2	; 0x02
     d6c:	86 81       	ldd	r24, Z+6	; 0x06
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	b1 f4       	brne	.+44     	; 0xd9e <TIMER_Init+0x258>
			SET_BIT(DDRB,PB3);
     d72:	a7 e3       	ldi	r26, 0x37	; 55
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e3       	ldi	r30, 0x37	; 55
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 60       	ori	r24, 0x08	; 8
     d7e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
     d80:	a3 e5       	ldi	r26, 0x53	; 83
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e3 e5       	ldi	r30, 0x53	; 83
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 62       	ori	r24, 0x20	; 32
     d8c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
     d8e:	a3 e5       	ldi	r26, 0x53	; 83
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e3 e5       	ldi	r30, 0x53	; 83
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7e       	andi	r24, 0xEF	; 239
     d9a:	8c 93       	st	X, r24
     d9c:	f4 c2       	rjmp	.+1512   	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	86 81       	ldd	r24, Z+6	; 0x06
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	09 f0       	breq	.+2      	; 0xdaa <TIMER_Init+0x264>
     da8:	ee c2       	rjmp	.+1500   	; 0x1386 <TIMER_Init+0x840>
			SET_BIT(DDRB,PB3);
     daa:	a7 e3       	ldi	r26, 0x37	; 55
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e3       	ldi	r30, 0x37	; 55
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	88 60       	ori	r24, 0x08	; 8
     db6:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
     db8:	a3 e5       	ldi	r26, 0x53	; 83
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e3 e5       	ldi	r30, 0x53	; 83
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 62       	ori	r24, 0x20	; 32
     dc4:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
     dc6:	a3 e5       	ldi	r26, 0x53	; 83
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e3 e5       	ldi	r30, 0x53	; 83
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 61       	ori	r24, 0x10	; 16
     dd2:	8c 93       	st	X, r24
     dd4:	d8 c2       	rjmp	.+1456   	; 0x1386 <TIMER_Init+0x840>
		}


	}
	else if(i->timer==1){
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	80 81       	ld	r24, Z
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	09 f0       	breq	.+2      	; 0xde2 <TIMER_Init+0x29c>
     de0:	59 c1       	rjmp	.+690    	; 0x1094 <TIMER_Init+0x54e>
		SET_BIT(TCCR1A,FOC1A);
     de2:	af e4       	ldi	r26, 0x4F	; 79
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ef e4       	ldi	r30, 0x4F	; 79
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	8c 93       	st	X, r24
		OCR1A= i->comp_value;
     df0:	aa e4       	ldi	r26, 0x4A	; 74
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e9 81       	ldd	r30, Y+1	; 0x01
     df6:	fa 81       	ldd	r31, Y+2	; 0x02
     df8:	84 81       	ldd	r24, Z+4	; 0x04
     dfa:	95 81       	ldd	r25, Z+5	; 0x05
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	9c 93       	st	X, r25
     e00:	8e 93       	st	-X, r24
		//timer mode
		if(i->mode==0){
     e02:	e9 81       	ldd	r30, Y+1	; 0x01
     e04:	fa 81       	ldd	r31, Y+2	; 0x02
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	88 23       	and	r24, r24
     e0a:	21 f5       	brne	.+72     	; 0xe54 <TIMER_Init+0x30e>
			CLEAR_BIT(TCCR1A,WGM11);
     e0c:	af e4       	ldi	r26, 0x4F	; 79
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ef e4       	ldi	r30, 0x4F	; 79
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8d 7f       	andi	r24, 0xFD	; 253
     e18:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
     e1a:	af e4       	ldi	r26, 0x4F	; 79
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ef e4       	ldi	r30, 0x4F	; 79
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
     e28:	ae e4       	ldi	r26, 0x4E	; 78
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ee e4       	ldi	r30, 0x4E	; 78
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7e       	andi	r24, 0xEF	; 239
     e42:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE1);
     e44:	a9 e5       	ldi	r26, 0x59	; 89
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e9 e5       	ldi	r30, 0x59	; 89
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	84 60       	ori	r24, 0x04	; 4
     e50:	8c 93       	st	X, r24
     e52:	28 c0       	rjmp	.+80     	; 0xea4 <TIMER_Init+0x35e>

		}
		else if(i->mode==1){
     e54:	e9 81       	ldd	r30, Y+1	; 0x01
     e56:	fa 81       	ldd	r31, Y+2	; 0x02
     e58:	81 81       	ldd	r24, Z+1	; 0x01
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	19 f5       	brne	.+70     	; 0xea4 <TIMER_Init+0x35e>
			CLEAR_BIT(TCCR1A,WGM11);
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
     e6c:	af e4       	ldi	r26, 0x4F	; 79
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e4       	ldi	r30, 0x4F	; 79
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
     e7a:	ae e4       	ldi	r26, 0x4E	; 78
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ee e4       	ldi	r30, 0x4E	; 78
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
     e88:	ae e4       	ldi	r26, 0x4E	; 78
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ee e4       	ldi	r30, 0x4E	; 78
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7e       	andi	r24, 0xEF	; 239
     e94:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE1A);
     e96:	a9 e5       	ldi	r26, 0x59	; 89
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e9 e5       	ldi	r30, 0x59	; 89
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
     ea4:	e9 81       	ldd	r30, Y+1	; 0x01
     ea6:	fa 81       	ldd	r31, Y+2	; 0x02
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	b1 f4       	brne	.+44     	; 0xede <TIMER_Init+0x398>
			CLEAR_BIT(TCCR1B,CS12);
     eb2:	ae e4       	ldi	r26, 0x4E	; 78
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e4       	ldi	r30, 0x4E	; 78
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8b 7f       	andi	r24, 0xFB	; 251
     ebe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
     ec0:	ae e4       	ldi	r26, 0x4E	; 78
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ee e4       	ldi	r30, 0x4E	; 78
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
     ece:	ae e4       	ldi	r26, 0x4E	; 78
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ee e4       	ldi	r30, 0x4E	; 78
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	8c 93       	st	X, r24
     edc:	75 c0       	rjmp	.+234    	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==8){
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	88 30       	cpi	r24, 0x08	; 8
     ee8:	91 05       	cpc	r25, r1
     eea:	b1 f4       	brne	.+44     	; 0xf18 <TIMER_Init+0x3d2>
			CLEAR_BIT(TCCR1B,CS12);
     eec:	ae e4       	ldi	r26, 0x4E	; 78
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ee e4       	ldi	r30, 0x4E	; 78
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8b 7f       	andi	r24, 0xFB	; 251
     ef8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
     efa:	ae e4       	ldi	r26, 0x4E	; 78
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ee e4       	ldi	r30, 0x4E	; 78
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS10);
     f08:	ae e4       	ldi	r26, 0x4E	; 78
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ee e4       	ldi	r30, 0x4E	; 78
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8c 93       	st	X, r24
     f16:	58 c0       	rjmp	.+176    	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==64){
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	80 34       	cpi	r24, 0x40	; 64
     f22:	91 05       	cpc	r25, r1
     f24:	b1 f4       	brne	.+44     	; 0xf52 <TIMER_Init+0x40c>
			CLEAR_BIT(TCCR1B,CS12);
     f26:	ae e4       	ldi	r26, 0x4E	; 78
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ee e4       	ldi	r30, 0x4E	; 78
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
     f34:	ae e4       	ldi	r26, 0x4E	; 78
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ee e4       	ldi	r30, 0x4E	; 78
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
     f42:	ae e4       	ldi	r26, 0x4E	; 78
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
     f50:	3b c0       	rjmp	.+118    	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==256){
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	80 30       	cpi	r24, 0x00	; 0
     f5e:	92 07       	cpc	r25, r18
     f60:	b1 f4       	brne	.+44     	; 0xf8e <TIMER_Init+0x448>
			SET_BIT(TCCR1B,CS12);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	84 60       	ori	r24, 0x04	; 4
     f6e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
     f70:	ae e4       	ldi	r26, 0x4E	; 78
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee e4       	ldi	r30, 0x4E	; 78
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS10);
     f7e:	ae e4       	ldi	r26, 0x4E	; 78
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ee e4       	ldi	r30, 0x4E	; 78
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8e 7f       	andi	r24, 0xFE	; 254
     f8a:	8c 93       	st	X, r24
     f8c:	1d c0       	rjmp	.+58     	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==1024){
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	24 e0       	ldi	r18, 0x04	; 4
     f98:	80 30       	cpi	r24, 0x00	; 0
     f9a:	92 07       	cpc	r25, r18
     f9c:	a9 f4       	brne	.+42     	; 0xfc8 <TIMER_Init+0x482>
			SET_BIT(TCCR1B,CS12);
     f9e:	ae e4       	ldi	r26, 0x4E	; 78
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ee e4       	ldi	r30, 0x4E	; 78
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	84 60       	ori	r24, 0x04	; 4
     faa:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
     fac:	ae e4       	ldi	r26, 0x4E	; 78
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ee e4       	ldi	r30, 0x4E	; 78
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8d 7f       	andi	r24, 0xFD	; 253
     fb8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
     fba:	ae e4       	ldi	r26, 0x4E	; 78
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	86 81       	ldd	r24, Z+6	; 0x06
     fce:	88 23       	and	r24, r24
     fd0:	79 f4       	brne	.+30     	; 0xff0 <TIMER_Init+0x4aa>
			CLEAR_BIT(TCCR1A,COM1A1);
     fd2:	af e4       	ldi	r26, 0x4F	; 79
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 77       	andi	r24, 0x7F	; 127
     fde:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
     fe0:	af e4       	ldi	r26, 0x4F	; 79
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ef e4       	ldi	r30, 0x4F	; 79
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7b       	andi	r24, 0xBF	; 191
     fec:	8c 93       	st	X, r24
     fee:	cb c1       	rjmp	.+918    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	b1 f4       	brne	.+44     	; 0x1026 <TIMER_Init+0x4e0>
			SET_BIT(DDRD,PD5);
     ffa:	a1 e3       	ldi	r26, 0x31	; 49
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e1 e3       	ldi	r30, 0x31	; 49
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 62       	ori	r24, 0x20	; 32
    1006:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A1);
    1008:	af e4       	ldi	r26, 0x4F	; 79
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ef e4       	ldi	r30, 0x4F	; 79
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 77       	andi	r24, 0x7F	; 127
    1014:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    1016:	af e4       	ldi	r26, 0x4F	; 79
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ef e4       	ldi	r30, 0x4F	; 79
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	8c 93       	st	X, r24
    1024:	b0 c1       	rjmp	.+864    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
    1026:	e9 81       	ldd	r30, Y+1	; 0x01
    1028:	fa 81       	ldd	r31, Y+2	; 0x02
    102a:	86 81       	ldd	r24, Z+6	; 0x06
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	b1 f4       	brne	.+44     	; 0x105c <TIMER_Init+0x516>
			SET_BIT(DDRD,PD5);
    1030:	a1 e3       	ldi	r26, 0x31	; 49
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e1 e3       	ldi	r30, 0x31	; 49
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 62       	ori	r24, 0x20	; 32
    103c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    103e:	af e4       	ldi	r26, 0x4F	; 79
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ef e4       	ldi	r30, 0x4F	; 79
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 68       	ori	r24, 0x80	; 128
    104a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    104c:	af e4       	ldi	r26, 0x4F	; 79
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ef e4       	ldi	r30, 0x4F	; 79
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8f 7b       	andi	r24, 0xBF	; 191
    1058:	8c 93       	st	X, r24
    105a:	95 c1       	rjmp	.+810    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	86 81       	ldd	r24, Z+6	; 0x06
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	09 f0       	breq	.+2      	; 0x1068 <TIMER_Init+0x522>
    1066:	8f c1       	rjmp	.+798    	; 0x1386 <TIMER_Init+0x840>
			SET_BIT(DDRD,PD5);
    1068:	a1 e3       	ldi	r26, 0x31	; 49
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e1 e3       	ldi	r30, 0x31	; 49
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 62       	ori	r24, 0x20	; 32
    1074:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    1076:	af e4       	ldi	r26, 0x4F	; 79
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ef e4       	ldi	r30, 0x4F	; 79
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 68       	ori	r24, 0x80	; 128
    1082:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    1084:	af e4       	ldi	r26, 0x4F	; 79
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ef e4       	ldi	r30, 0x4F	; 79
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
    1092:	79 c1       	rjmp	.+754    	; 0x1386 <TIMER_Init+0x840>
		}


	}
	else if(i->timer==2){
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	80 81       	ld	r24, Z
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	09 f0       	breq	.+2      	; 0x10a0 <TIMER_Init+0x55a>
    109e:	73 c1       	rjmp	.+742    	; 0x1386 <TIMER_Init+0x840>
		SET_BIT(TCCR2,FOC2);
    10a0:	a5 e4       	ldi	r26, 0x45	; 69
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e4       	ldi	r30, 0x45	; 69
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24
		OCR2 = i->comp_value;
    10ae:	a3 e4       	ldi	r26, 0x43	; 67
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	84 81       	ldd	r24, Z+4	; 0x04
    10b8:	95 81       	ldd	r25, Z+5	; 0x05
    10ba:	8c 93       	st	X, r24
		//timer mode
		if(i->mode==0){
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	88 23       	and	r24, r24
    10c4:	b1 f4       	brne	.+44     	; 0x10f2 <TIMER_Init+0x5ac>
			CLEAR_BIT(TCCR2,WGM21);
    10c6:	a5 e4       	ldi	r26, 0x45	; 69
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e4       	ldi	r30, 0x45	; 69
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	87 7f       	andi	r24, 0xF7	; 247
    10d2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    10d4:	a5 e4       	ldi	r26, 0x45	; 69
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e4       	ldi	r30, 0x45	; 69
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8f 7b       	andi	r24, 0xBF	; 191
    10e0:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE2);
    10e2:	a9 e5       	ldi	r26, 0x59	; 89
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e9 e5       	ldi	r30, 0x59	; 89
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 64       	ori	r24, 0x40	; 64
    10ee:	8c 93       	st	X, r24
    10f0:	1a c0       	rjmp	.+52     	; 0x1126 <TIMER_Init+0x5e0>

		}
		else if(i->mode==1){
    10f2:	e9 81       	ldd	r30, Y+1	; 0x01
    10f4:	fa 81       	ldd	r31, Y+2	; 0x02
    10f6:	81 81       	ldd	r24, Z+1	; 0x01
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	a9 f4       	brne	.+42     	; 0x1126 <TIMER_Init+0x5e0>
			SET_BIT(TCCR2,WGM21);
    10fc:	a5 e4       	ldi	r26, 0x45	; 69
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e4       	ldi	r30, 0x45	; 69
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    110a:	a5 e4       	ldi	r26, 0x45	; 69
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e4       	ldi	r30, 0x45	; 69
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8f 7b       	andi	r24, 0xBF	; 191
    1116:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE2);
    1118:	a9 e5       	ldi	r26, 0x59	; 89
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e9 e5       	ldi	r30, 0x59	; 89
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 68       	ori	r24, 0x80	; 128
    1124:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
    1126:	e9 81       	ldd	r30, Y+1	; 0x01
    1128:	fa 81       	ldd	r31, Y+2	; 0x02
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	b1 f4       	brne	.+44     	; 0x1160 <TIMER_Init+0x61a>
			CLEAR_BIT(TCCR2,CS22);
    1134:	a5 e4       	ldi	r26, 0x45	; 69
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e4       	ldi	r30, 0x45	; 69
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8b 7f       	andi	r24, 0xFB	; 251
    1140:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    1142:	a5 e4       	ldi	r26, 0x45	; 69
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e4       	ldi	r30, 0x45	; 69
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    1150:	a5 e4       	ldi	r26, 0x45	; 69
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e4       	ldi	r30, 0x45	; 69
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	81 60       	ori	r24, 0x01	; 1
    115c:	8c 93       	st	X, r24
    115e:	af c0       	rjmp	.+350    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==8){
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	93 81       	ldd	r25, Z+3	; 0x03
    1168:	88 30       	cpi	r24, 0x08	; 8
    116a:	91 05       	cpc	r25, r1
    116c:	b1 f4       	brne	.+44     	; 0x119a <TIMER_Init+0x654>
			CLEAR_BIT(TCCR2,CS22);
    116e:	a5 e4       	ldi	r26, 0x45	; 69
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e4       	ldi	r30, 0x45	; 69
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8b 7f       	andi	r24, 0xFB	; 251
    117a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS21);
    117c:	a3 e5       	ldi	r26, 0x53	; 83
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e3 e5       	ldi	r30, 0x53	; 83
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	82 60       	ori	r24, 0x02	; 2
    1188:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    118a:	a5 e4       	ldi	r26, 0x45	; 69
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e5 e4       	ldi	r30, 0x45	; 69
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8e 7f       	andi	r24, 0xFE	; 254
    1196:	8c 93       	st	X, r24
    1198:	92 c0       	rjmp	.+292    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler == 32){
    119a:	e9 81       	ldd	r30, Y+1	; 0x01
    119c:	fa 81       	ldd	r31, Y+2	; 0x02
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	80 32       	cpi	r24, 0x20	; 32
    11a4:	91 05       	cpc	r25, r1
    11a6:	b1 f4       	brne	.+44     	; 0x11d4 <TIMER_Init+0x68e>
			CLEAR_BIT(TCCR2,CS22);
    11a8:	a5 e4       	ldi	r26, 0x45	; 69
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e4       	ldi	r30, 0x45	; 69
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8b 7f       	andi	r24, 0xFB	; 251
    11b4:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    11b6:	a5 e4       	ldi	r26, 0x45	; 69
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e4       	ldi	r30, 0x45	; 69
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	82 60       	ori	r24, 0x02	; 2
    11c2:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    11c4:	a5 e4       	ldi	r26, 0x45	; 69
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e4       	ldi	r30, 0x45	; 69
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	8c 93       	st	X, r24
    11d2:	75 c0       	rjmp	.+234    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==64){
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	80 34       	cpi	r24, 0x40	; 64
    11de:	91 05       	cpc	r25, r1
    11e0:	b1 f4       	brne	.+44     	; 0x120e <TIMER_Init+0x6c8>
			SET_BIT(TCCR2,CS22);
    11e2:	a5 e4       	ldi	r26, 0x45	; 69
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e4       	ldi	r30, 0x45	; 69
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	84 60       	ori	r24, 0x04	; 4
    11ee:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    11f0:	a5 e4       	ldi	r26, 0x45	; 69
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e4       	ldi	r30, 0x45	; 69
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8d 7f       	andi	r24, 0xFD	; 253
    11fc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    11fe:	a5 e4       	ldi	r26, 0x45	; 69
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e4       	ldi	r30, 0x45	; 69
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8e 7f       	andi	r24, 0xFE	; 254
    120a:	8c 93       	st	X, r24
    120c:	58 c0       	rjmp	.+176    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==128){
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	80 38       	cpi	r24, 0x80	; 128
    1218:	91 05       	cpc	r25, r1
    121a:	b1 f4       	brne	.+44     	; 0x1248 <TIMER_Init+0x702>
			SET_BIT(TCCR2,CS22);
    121c:	a5 e4       	ldi	r26, 0x45	; 69
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e4       	ldi	r30, 0x45	; 69
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	84 60       	ori	r24, 0x04	; 4
    1228:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    122a:	a5 e4       	ldi	r26, 0x45	; 69
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e4       	ldi	r30, 0x45	; 69
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8d 7f       	andi	r24, 0xFD	; 253
    1236:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    1238:	a5 e4       	ldi	r26, 0x45	; 69
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e4       	ldi	r30, 0x45	; 69
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	8c 93       	st	X, r24
    1246:	3b c0       	rjmp	.+118    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==256){
    1248:	e9 81       	ldd	r30, Y+1	; 0x01
    124a:	fa 81       	ldd	r31, Y+2	; 0x02
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	21 e0       	ldi	r18, 0x01	; 1
    1252:	80 30       	cpi	r24, 0x00	; 0
    1254:	92 07       	cpc	r25, r18
    1256:	b1 f4       	brne	.+44     	; 0x1284 <TIMER_Init+0x73e>
			SET_BIT(TCCR2,CS22);
    1258:	a5 e4       	ldi	r26, 0x45	; 69
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e4       	ldi	r30, 0x45	; 69
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	84 60       	ori	r24, 0x04	; 4
    1264:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    1266:	a5 e4       	ldi	r26, 0x45	; 69
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e4       	ldi	r30, 0x45	; 69
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    1274:	a5 e4       	ldi	r26, 0x45	; 69
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e4       	ldi	r30, 0x45	; 69
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8e 7f       	andi	r24, 0xFE	; 254
    1280:	8c 93       	st	X, r24
    1282:	1d c0       	rjmp	.+58     	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==1024){
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	24 e0       	ldi	r18, 0x04	; 4
    128e:	80 30       	cpi	r24, 0x00	; 0
    1290:	92 07       	cpc	r25, r18
    1292:	a9 f4       	brne	.+42     	; 0x12be <TIMER_Init+0x778>
			SET_BIT(TCCR2,CS22);
    1294:	a5 e4       	ldi	r26, 0x45	; 69
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e4       	ldi	r30, 0x45	; 69
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	84 60       	ori	r24, 0x04	; 4
    12a0:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    12a2:	a5 e4       	ldi	r26, 0x45	; 69
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e4       	ldi	r30, 0x45	; 69
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	82 60       	ori	r24, 0x02	; 2
    12ae:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    12b0:	a5 e4       	ldi	r26, 0x45	; 69
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e5 e4       	ldi	r30, 0x45	; 69
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	81 60       	ori	r24, 0x01	; 1
    12bc:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
    12be:	e9 81       	ldd	r30, Y+1	; 0x01
    12c0:	fa 81       	ldd	r31, Y+2	; 0x02
    12c2:	86 81       	ldd	r24, Z+6	; 0x06
    12c4:	88 23       	and	r24, r24
    12c6:	79 f4       	brne	.+30     	; 0x12e6 <TIMER_Init+0x7a0>
			CLEAR_BIT(TCCR2,COM21);
    12c8:	a5 e4       	ldi	r26, 0x45	; 69
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e5 e4       	ldi	r30, 0x45	; 69
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7d       	andi	r24, 0xDF	; 223
    12d4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM20);
    12d6:	a5 e4       	ldi	r26, 0x45	; 69
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e4       	ldi	r30, 0x45	; 69
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 7e       	andi	r24, 0xEF	; 239
    12e2:	8c 93       	st	X, r24
    12e4:	50 c0       	rjmp	.+160    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
    12e6:	e9 81       	ldd	r30, Y+1	; 0x01
    12e8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ea:	86 81       	ldd	r24, Z+6	; 0x06
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	b1 f4       	brne	.+44     	; 0x131c <TIMER_Init+0x7d6>
			SET_BIT(DDRD,PD7);
    12f0:	a1 e3       	ldi	r26, 0x31	; 49
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e1 e3       	ldi	r30, 0x31	; 49
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM21);
    12fe:	a5 e4       	ldi	r26, 0x45	; 69
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e4       	ldi	r30, 0x45	; 69
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8f 7d       	andi	r24, 0xDF	; 223
    130a:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM20);
    130c:	a5 e4       	ldi	r26, 0x45	; 69
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e4       	ldi	r30, 0x45	; 69
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 61       	ori	r24, 0x10	; 16
    1318:	8c 93       	st	X, r24
    131a:	35 c0       	rjmp	.+106    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
    131c:	e9 81       	ldd	r30, Y+1	; 0x01
    131e:	fa 81       	ldd	r31, Y+2	; 0x02
    1320:	86 81       	ldd	r24, Z+6	; 0x06
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	b1 f4       	brne	.+44     	; 0x1352 <TIMER_Init+0x80c>
			SET_BIT(DDRD,PD7);
    1326:	a1 e3       	ldi	r26, 0x31	; 49
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e1 e3       	ldi	r30, 0x31	; 49
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 68       	ori	r24, 0x80	; 128
    1332:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    1334:	a5 e4       	ldi	r26, 0x45	; 69
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e4       	ldi	r30, 0x45	; 69
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	80 62       	ori	r24, 0x20	; 32
    1340:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM20);
    1342:	a5 e4       	ldi	r26, 0x45	; 69
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e4       	ldi	r30, 0x45	; 69
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7e       	andi	r24, 0xEF	; 239
    134e:	8c 93       	st	X, r24
    1350:	1a c0       	rjmp	.+52     	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
    1352:	e9 81       	ldd	r30, Y+1	; 0x01
    1354:	fa 81       	ldd	r31, Y+2	; 0x02
    1356:	86 81       	ldd	r24, Z+6	; 0x06
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	a9 f4       	brne	.+42     	; 0x1386 <TIMER_Init+0x840>
			SET_BIT(DDRD,PD7);
    135c:	a1 e3       	ldi	r26, 0x31	; 49
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e1 e3       	ldi	r30, 0x31	; 49
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 68       	ori	r24, 0x80	; 128
    1368:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    136a:	a5 e4       	ldi	r26, 0x45	; 69
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e4       	ldi	r30, 0x45	; 69
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 62       	ori	r24, 0x20	; 32
    1376:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM20);
    1378:	a5 e4       	ldi	r26, 0x45	; 69
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e4       	ldi	r30, 0x45	; 69
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 61       	ori	r24, 0x10	; 16
    1384:	8c 93       	st	X, r24
	}




}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <TIMER_Start>:
void TIMER_Start(uint8 t , uint16 clk){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <TIMER_Start+0x6>
    1396:	0f 92       	push	r0
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	7b 83       	std	Y+3, r23	; 0x03
    13a0:	6a 83       	std	Y+2, r22	; 0x02




		if(t==0){
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	88 23       	and	r24, r24
    13a6:	09 f0       	breq	.+2      	; 0x13aa <TIMER_Start+0x1a>
    13a8:	8a c0       	rjmp	.+276    	; 0x14be <TIMER_Start+0x12e>

			// clock select
			if(clk==1){
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	b1 f4       	brne	.+44     	; 0x13e0 <TIMER_Start+0x50>
				CLEAR_BIT(TCCR0,CS02);
    13b4:	a3 e5       	ldi	r26, 0x53	; 83
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e3 e5       	ldi	r30, 0x53	; 83
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8b 7f       	andi	r24, 0xFB	; 251
    13c0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
    13c2:	a3 e5       	ldi	r26, 0x53	; 83
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e3 e5       	ldi	r30, 0x53	; 83
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    13d0:	a3 e5       	ldi	r26, 0x53	; 83
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e3 e5       	ldi	r30, 0x53	; 83
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	8c 93       	st	X, r24
    13de:	bf c1       	rjmp	.+894    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==8){
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	88 30       	cpi	r24, 0x08	; 8
    13e6:	91 05       	cpc	r25, r1
    13e8:	b1 f4       	brne	.+44     	; 0x1416 <TIMER_Start+0x86>
				CLEAR_BIT(TCCR0,CS02);
    13ea:	a3 e5       	ldi	r26, 0x53	; 83
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e3 e5       	ldi	r30, 0x53	; 83
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8b 7f       	andi	r24, 0xFB	; 251
    13f6:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    13f8:	a3 e5       	ldi	r26, 0x53	; 83
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e3 e5       	ldi	r30, 0x53	; 83
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	82 60       	ori	r24, 0x02	; 2
    1404:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS00);
    1406:	a3 e5       	ldi	r26, 0x53	; 83
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e3 e5       	ldi	r30, 0x53	; 83
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8e 7f       	andi	r24, 0xFE	; 254
    1412:	8c 93       	st	X, r24
    1414:	a4 c1       	rjmp	.+840    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==64){
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	80 34       	cpi	r24, 0x40	; 64
    141c:	91 05       	cpc	r25, r1
    141e:	b1 f4       	brne	.+44     	; 0x144c <TIMER_Start+0xbc>
				CLEAR_BIT(TCCR0,CS02);
    1420:	a3 e5       	ldi	r26, 0x53	; 83
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e3 e5       	ldi	r30, 0x53	; 83
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8b 7f       	andi	r24, 0xFB	; 251
    142c:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    142e:	a3 e5       	ldi	r26, 0x53	; 83
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e3 e5       	ldi	r30, 0x53	; 83
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	82 60       	ori	r24, 0x02	; 2
    143a:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    143c:	a3 e5       	ldi	r26, 0x53	; 83
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e3 e5       	ldi	r30, 0x53	; 83
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	8c 93       	st	X, r24
    144a:	89 c1       	rjmp	.+786    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==256){
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	21 e0       	ldi	r18, 0x01	; 1
    1452:	80 30       	cpi	r24, 0x00	; 0
    1454:	92 07       	cpc	r25, r18
    1456:	b1 f4       	brne	.+44     	; 0x1484 <TIMER_Start+0xf4>
				SET_BIT(TCCR0,CS02);
    1458:	a3 e5       	ldi	r26, 0x53	; 83
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e3 e5       	ldi	r30, 0x53	; 83
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	84 60       	ori	r24, 0x04	; 4
    1464:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
    1466:	a3 e5       	ldi	r26, 0x53	; 83
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e3 e5       	ldi	r30, 0x53	; 83
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8d 7f       	andi	r24, 0xFD	; 253
    1472:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS00);
    1474:	a3 e5       	ldi	r26, 0x53	; 83
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e3 e5       	ldi	r30, 0x53	; 83
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8e 7f       	andi	r24, 0xFE	; 254
    1480:	8c 93       	st	X, r24
    1482:	6d c1       	rjmp	.+730    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==1024){
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	24 e0       	ldi	r18, 0x04	; 4
    148a:	80 30       	cpi	r24, 0x00	; 0
    148c:	92 07       	cpc	r25, r18
    148e:	09 f0       	breq	.+2      	; 0x1492 <TIMER_Start+0x102>
    1490:	66 c1       	rjmp	.+716    	; 0x175e <TIMER_Start+0x3ce>
				SET_BIT(TCCR0,CS02);
    1492:	a3 e5       	ldi	r26, 0x53	; 83
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e3 e5       	ldi	r30, 0x53	; 83
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	84 60       	ori	r24, 0x04	; 4
    149e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
    14a0:	a3 e5       	ldi	r26, 0x53	; 83
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e3 e5       	ldi	r30, 0x53	; 83
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    14ae:	a3 e5       	ldi	r26, 0x53	; 83
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e3 e5       	ldi	r30, 0x53	; 83
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	8c 93       	st	X, r24
    14bc:	50 c1       	rjmp	.+672    	; 0x175e <TIMER_Start+0x3ce>
			}

		}
		else if(t==1){
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <TIMER_Start+0x136>
    14c4:	8a c0       	rjmp	.+276    	; 0x15da <TIMER_Start+0x24a>

			// clock select
			if(clk==1){
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	91 05       	cpc	r25, r1
    14ce:	b1 f4       	brne	.+44     	; 0x14fc <TIMER_Start+0x16c>
				CLEAR_BIT(TCCR1B,CS12);
    14d0:	ae e4       	ldi	r26, 0x4E	; 78
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8b 7f       	andi	r24, 0xFB	; 251
    14dc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS11);
    14de:	ae e4       	ldi	r26, 0x4E	; 78
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ee e4       	ldi	r30, 0x4E	; 78
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8d 7f       	andi	r24, 0xFD	; 253
    14ea:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	81 60       	ori	r24, 0x01	; 1
    14f8:	8c 93       	st	X, r24
    14fa:	31 c1       	rjmp	.+610    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==8){
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	91 05       	cpc	r25, r1
    1504:	b1 f4       	brne	.+44     	; 0x1532 <TIMER_Start+0x1a2>
				CLEAR_BIT(TCCR1B,CS12);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8b 7f       	andi	r24, 0xFB	; 251
    1512:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS11);
    1514:	ae e4       	ldi	r26, 0x4E	; 78
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ee e4       	ldi	r30, 0x4E	; 78
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS10);
    1522:	ae e4       	ldi	r26, 0x4E	; 78
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ee e4       	ldi	r30, 0x4E	; 78
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8e 7f       	andi	r24, 0xFE	; 254
    152e:	8c 93       	st	X, r24
    1530:	16 c1       	rjmp	.+556    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==64){
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	80 34       	cpi	r24, 0x40	; 64
    1538:	91 05       	cpc	r25, r1
    153a:	b1 f4       	brne	.+44     	; 0x1568 <TIMER_Start+0x1d8>
				CLEAR_BIT(TCCR1B,CS12);
    153c:	ae e4       	ldi	r26, 0x4E	; 78
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e4       	ldi	r30, 0x4E	; 78
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8b 7f       	andi	r24, 0xFB	; 251
    1548:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS11);
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	82 60       	ori	r24, 0x02	; 2
    1556:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    1558:	ae e4       	ldi	r26, 0x4E	; 78
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ee e4       	ldi	r30, 0x4E	; 78
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	8c 93       	st	X, r24
    1566:	fb c0       	rjmp	.+502    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==256){
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	80 30       	cpi	r24, 0x00	; 0
    1570:	92 07       	cpc	r25, r18
    1572:	b1 f4       	brne	.+44     	; 0x15a0 <TIMER_Start+0x210>
				SET_BIT(TCCR1B,CS12);
    1574:	ae e4       	ldi	r26, 0x4E	; 78
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ee e4       	ldi	r30, 0x4E	; 78
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS11);
    1582:	ae e4       	ldi	r26, 0x4E	; 78
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ee e4       	ldi	r30, 0x4E	; 78
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8d 7f       	andi	r24, 0xFD	; 253
    158e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS10);
    1590:	ae e4       	ldi	r26, 0x4E	; 78
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ee e4       	ldi	r30, 0x4E	; 78
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8e 7f       	andi	r24, 0xFE	; 254
    159c:	8c 93       	st	X, r24
    159e:	df c0       	rjmp	.+446    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==1024){
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	24 e0       	ldi	r18, 0x04	; 4
    15a6:	80 30       	cpi	r24, 0x00	; 0
    15a8:	92 07       	cpc	r25, r18
    15aa:	09 f0       	breq	.+2      	; 0x15ae <TIMER_Start+0x21e>
    15ac:	d8 c0       	rjmp	.+432    	; 0x175e <TIMER_Start+0x3ce>
				SET_BIT(TCCR1B,CS12);
    15ae:	ae e4       	ldi	r26, 0x4E	; 78
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ee e4       	ldi	r30, 0x4E	; 78
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS11);
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
    15c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	81 60       	ori	r24, 0x01	; 1
    15d6:	8c 93       	st	X, r24
    15d8:	c2 c0       	rjmp	.+388    	; 0x175e <TIMER_Start+0x3ce>




		}
		else if(t==2){
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	09 f0       	breq	.+2      	; 0x15e2 <TIMER_Start+0x252>
    15e0:	be c0       	rjmp	.+380    	; 0x175e <TIMER_Start+0x3ce>


			// clock select
			if(clk==1){
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	9b 81       	ldd	r25, Y+3	; 0x03
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	91 05       	cpc	r25, r1
    15ea:	b1 f4       	brne	.+44     	; 0x1618 <TIMER_Start+0x288>
				CLEAR_BIT(TCCR2,CS22);
    15ec:	a5 e4       	ldi	r26, 0x45	; 69
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e4       	ldi	r30, 0x45	; 69
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    15fa:	a5 e4       	ldi	r26, 0x45	; 69
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e4       	ldi	r30, 0x45	; 69
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8d 7f       	andi	r24, 0xFD	; 253
    1606:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1608:	a5 e4       	ldi	r26, 0x45	; 69
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e5 e4       	ldi	r30, 0x45	; 69
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	81 60       	ori	r24, 0x01	; 1
    1614:	8c 93       	st	X, r24
    1616:	a3 c0       	rjmp	.+326    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==8){
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	88 30       	cpi	r24, 0x08	; 8
    161e:	91 05       	cpc	r25, r1
    1620:	b1 f4       	brne	.+44     	; 0x164e <TIMER_Start+0x2be>
				CLEAR_BIT(TCCR2,CS22);
    1622:	a5 e4       	ldi	r26, 0x45	; 69
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e4       	ldi	r30, 0x45	; 69
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8b 7f       	andi	r24, 0xFB	; 251
    162e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS21);
    1630:	a3 e5       	ldi	r26, 0x53	; 83
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e3 e5       	ldi	r30, 0x53	; 83
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	82 60       	ori	r24, 0x02	; 2
    163c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    163e:	a5 e4       	ldi	r26, 0x45	; 69
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e4       	ldi	r30, 0x45	; 69
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8e 7f       	andi	r24, 0xFE	; 254
    164a:	8c 93       	st	X, r24
    164c:	88 c0       	rjmp	.+272    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk == 32){
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	80 32       	cpi	r24, 0x20	; 32
    1654:	91 05       	cpc	r25, r1
    1656:	b1 f4       	brne	.+44     	; 0x1684 <TIMER_Start+0x2f4>
				CLEAR_BIT(TCCR2,CS22);
    1658:	a5 e4       	ldi	r26, 0x45	; 69
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e4       	ldi	r30, 0x45	; 69
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8b 7f       	andi	r24, 0xFB	; 251
    1664:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS21);
    1666:	a5 e4       	ldi	r26, 0x45	; 69
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e4       	ldi	r30, 0x45	; 69
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	82 60       	ori	r24, 0x02	; 2
    1672:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1674:	a5 e4       	ldi	r26, 0x45	; 69
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e4       	ldi	r30, 0x45	; 69
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	81 60       	ori	r24, 0x01	; 1
    1680:	8c 93       	st	X, r24
    1682:	6d c0       	rjmp	.+218    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==64){
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	80 34       	cpi	r24, 0x40	; 64
    168a:	91 05       	cpc	r25, r1
    168c:	b1 f4       	brne	.+44     	; 0x16ba <TIMER_Start+0x32a>
				SET_BIT(TCCR2,CS22);
    168e:	a5 e4       	ldi	r26, 0x45	; 69
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e4       	ldi	r30, 0x45	; 69
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	84 60       	ori	r24, 0x04	; 4
    169a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    169c:	a5 e4       	ldi	r26, 0x45	; 69
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e4       	ldi	r30, 0x45	; 69
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8d 7f       	andi	r24, 0xFD	; 253
    16a8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    16aa:	a5 e4       	ldi	r26, 0x45	; 69
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e4       	ldi	r30, 0x45	; 69
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8e 7f       	andi	r24, 0xFE	; 254
    16b6:	8c 93       	st	X, r24
    16b8:	52 c0       	rjmp	.+164    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==128){
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	80 38       	cpi	r24, 0x80	; 128
    16c0:	91 05       	cpc	r25, r1
    16c2:	b1 f4       	brne	.+44     	; 0x16f0 <TIMER_Start+0x360>
				SET_BIT(TCCR2,CS22);
    16c4:	a5 e4       	ldi	r26, 0x45	; 69
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e4       	ldi	r30, 0x45	; 69
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	84 60       	ori	r24, 0x04	; 4
    16d0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    16d2:	a5 e4       	ldi	r26, 0x45	; 69
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e4       	ldi	r30, 0x45	; 69
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8d 7f       	andi	r24, 0xFD	; 253
    16de:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    16e0:	a5 e4       	ldi	r26, 0x45	; 69
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e4       	ldi	r30, 0x45	; 69
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	81 60       	ori	r24, 0x01	; 1
    16ec:	8c 93       	st	X, r24
    16ee:	37 c0       	rjmp	.+110    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==256){
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	9b 81       	ldd	r25, Y+3	; 0x03
    16f4:	21 e0       	ldi	r18, 0x01	; 1
    16f6:	80 30       	cpi	r24, 0x00	; 0
    16f8:	92 07       	cpc	r25, r18
    16fa:	b1 f4       	brne	.+44     	; 0x1728 <TIMER_Start+0x398>
				SET_BIT(TCCR2,CS22);
    16fc:	a5 e4       	ldi	r26, 0x45	; 69
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e4       	ldi	r30, 0x45	; 69
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	84 60       	ori	r24, 0x04	; 4
    1708:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS21);
    170a:	a5 e4       	ldi	r26, 0x45	; 69
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e4       	ldi	r30, 0x45	; 69
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	82 60       	ori	r24, 0x02	; 2
    1716:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    1718:	a5 e4       	ldi	r26, 0x45	; 69
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e5 e4       	ldi	r30, 0x45	; 69
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	8c 93       	st	X, r24
    1726:	1b c0       	rjmp	.+54     	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==1024){
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	24 e0       	ldi	r18, 0x04	; 4
    172e:	80 30       	cpi	r24, 0x00	; 0
    1730:	92 07       	cpc	r25, r18
    1732:	a9 f4       	brne	.+42     	; 0x175e <TIMER_Start+0x3ce>
				SET_BIT(TCCR2,CS22);
    1734:	a5 e4       	ldi	r26, 0x45	; 69
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e4       	ldi	r30, 0x45	; 69
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	84 60       	ori	r24, 0x04	; 4
    1740:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS21);
    1742:	a5 e4       	ldi	r26, 0x45	; 69
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e4       	ldi	r30, 0x45	; 69
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	82 60       	ori	r24, 0x02	; 2
    174e:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1750:	a5 e4       	ldi	r26, 0x45	; 69
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e4       	ldi	r30, 0x45	; 69
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	81 60       	ori	r24, 0x01	; 1
    175c:	8c 93       	st	X, r24

		}



}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <TIMER_Stop>:
void TIMER_Stop(uint8 t){
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
	if(t==0){
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	88 23       	and	r24, r24
    177a:	b1 f4       	brne	.+44     	; 0x17a8 <TIMER_Stop+0x3e>
			// clock select
		CLEAR_BIT(TCCR0,CS02);
    177c:	a3 e5       	ldi	r26, 0x53	; 83
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e3 e5       	ldi	r30, 0x53	; 83
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8b 7f       	andi	r24, 0xFB	; 251
    1788:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS01);
    178a:	a3 e5       	ldi	r26, 0x53	; 83
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e3 e5       	ldi	r30, 0x53	; 83
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8d 7f       	andi	r24, 0xFD	; 253
    1796:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS00);
    1798:	a3 e5       	ldi	r26, 0x53	; 83
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e3 e5       	ldi	r30, 0x53	; 83
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8e 7f       	andi	r24, 0xFE	; 254
    17a4:	8c 93       	st	X, r24
    17a6:	31 c0       	rjmp	.+98     	; 0x180a <TIMER_Stop+0xa0>


	}
	else if(t==1){
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	b1 f4       	brne	.+44     	; 0x17da <TIMER_Stop+0x70>
	// clock select
		CLEAR_BIT(TCCR1B,CS12);
    17ae:	ae e4       	ldi	r26, 0x4E	; 78
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ee e4       	ldi	r30, 0x4E	; 78
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8b 7f       	andi	r24, 0xFB	; 251
    17ba:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    17bc:	ae e4       	ldi	r26, 0x4E	; 78
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ee e4       	ldi	r30, 0x4E	; 78
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8d 7f       	andi	r24, 0xFD	; 253
    17c8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS10);
    17ca:	ae e4       	ldi	r26, 0x4E	; 78
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	ee e4       	ldi	r30, 0x4E	; 78
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	8c 93       	st	X, r24
    17d8:	18 c0       	rjmp	.+48     	; 0x180a <TIMER_Stop+0xa0>
	}
	else if(t==2){
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	a9 f4       	brne	.+42     	; 0x180a <TIMER_Stop+0xa0>
	// clock select
		CLEAR_BIT(TCCR2,CS22);
    17e0:	a5 e4       	ldi	r26, 0x45	; 69
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e4       	ldi	r30, 0x45	; 69
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8b 7f       	andi	r24, 0xFB	; 251
    17ec:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,CS21);
    17ee:	a5 e4       	ldi	r26, 0x45	; 69
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e4       	ldi	r30, 0x45	; 69
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8d 7f       	andi	r24, 0xFD	; 253
    17fa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,CS20);
    17fc:	a5 e4       	ldi	r26, 0x45	; 69
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e4       	ldi	r30, 0x45	; 69
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8e 7f       	andi	r24, 0xFE	; 254
    1808:	8c 93       	st	X, r24
	}

}
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <TIMER_Timer0SetCallBack>:

void TIMER_Timer0SetCallBack(void(*ptr)(void)){
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <TIMER_Timer0SetCallBack+0x6>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
	timer0 = ptr;
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	90 93 17 01 	sts	0x0117, r25
    1828:	80 93 16 01 	sts	0x0116, r24
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <TIMER_Timer1SetCallBack>:
void TIMER_Timer1SetCallBack(void(*ptr)(void)){
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <TIMER_Timer1SetCallBack+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	timer1=ptr;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	90 93 19 01 	sts	0x0119, r25
    184c:	80 93 18 01 	sts	0x0118, r24
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <TIMER_Timer2SetCallBack>:
void TIMER_Timer2SetCallBack(void(*ptr)(void)){
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <TIMER_Timer2SetCallBack+0x6>
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
	timer2=ptr;
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	90 93 1b 01 	sts	0x011B, r25
    1870:	80 93 1a 01 	sts	0x011A, r24
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <__vector_19>:

ISR(TIMER0_COMP_vect){
    187e:	1f 92       	push	r1
    1880:	0f 92       	push	r0
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	0f 92       	push	r0
    1886:	11 24       	eor	r1, r1
    1888:	2f 93       	push	r18
    188a:	3f 93       	push	r19
    188c:	4f 93       	push	r20
    188e:	5f 93       	push	r21
    1890:	6f 93       	push	r22
    1892:	7f 93       	push	r23
    1894:	8f 93       	push	r24
    1896:	9f 93       	push	r25
    1898:	af 93       	push	r26
    189a:	bf 93       	push	r27
    189c:	ef 93       	push	r30
    189e:	ff 93       	push	r31
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	if(timer0!= NULL){
    18a8:	80 91 16 01 	lds	r24, 0x0116
    18ac:	90 91 17 01 	lds	r25, 0x0117
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	29 f0       	breq	.+10     	; 0x18be <__vector_19+0x40>
		(*timer0)();
    18b4:	e0 91 16 01 	lds	r30, 0x0116
    18b8:	f0 91 17 01 	lds	r31, 0x0117
    18bc:	09 95       	icall
	}
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	bf 91       	pop	r27
    18c8:	af 91       	pop	r26
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	7f 91       	pop	r23
    18d0:	6f 91       	pop	r22
    18d2:	5f 91       	pop	r21
    18d4:	4f 91       	pop	r20
    18d6:	3f 91       	pop	r19
    18d8:	2f 91       	pop	r18
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <__vector_6>:
ISR(TIMER1_COMPA_vect){
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	5f 93       	push	r21
    18f6:	6f 93       	push	r22
    18f8:	7f 93       	push	r23
    18fa:	8f 93       	push	r24
    18fc:	9f 93       	push	r25
    18fe:	af 93       	push	r26
    1900:	bf 93       	push	r27
    1902:	ef 93       	push	r30
    1904:	ff 93       	push	r31
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	if(timer1!= NULL){
    190e:	80 91 18 01 	lds	r24, 0x0118
    1912:	90 91 19 01 	lds	r25, 0x0119
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	29 f0       	breq	.+10     	; 0x1924 <__vector_6+0x40>
		(*timer1)();
    191a:	e0 91 18 01 	lds	r30, 0x0118
    191e:	f0 91 19 01 	lds	r31, 0x0119
    1922:	09 95       	icall
	}
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_3>:
ISR(TIMER2_COMP_vect){
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	if(timer2!= NULL){
    1974:	80 91 1a 01 	lds	r24, 0x011A
    1978:	90 91 1b 01 	lds	r25, 0x011B
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	29 f0       	breq	.+10     	; 0x198a <__vector_3+0x40>
		(*timer2)();
    1980:	e0 91 1a 01 	lds	r30, 0x011A
    1984:	f0 91 1b 01 	lds	r31, 0x011B
    1988:	09 95       	icall
	}
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_9>:
ISR(TIMER0_OVF_vect){
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	if(timer0!= NULL){
    19da:	80 91 16 01 	lds	r24, 0x0116
    19de:	90 91 17 01 	lds	r25, 0x0117
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <__vector_9+0x40>
		(*timer0)();
    19e6:	e0 91 16 01 	lds	r30, 0x0116
    19ea:	f0 91 17 01 	lds	r31, 0x0117
    19ee:	09 95       	icall
	}
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <__vector_8>:
ISR(TIMER1_OVF_vect){
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	if(timer1!= NULL){
    1a40:	80 91 18 01 	lds	r24, 0x0118
    1a44:	90 91 19 01 	lds	r25, 0x0119
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	29 f0       	breq	.+10     	; 0x1a56 <__vector_8+0x40>
		(*timer1)();
    1a4c:	e0 91 18 01 	lds	r30, 0x0118
    1a50:	f0 91 19 01 	lds	r31, 0x0119
    1a54:	09 95       	icall
	}
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	bf 91       	pop	r27
    1a60:	af 91       	pop	r26
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	7f 91       	pop	r23
    1a68:	6f 91       	pop	r22
    1a6a:	5f 91       	pop	r21
    1a6c:	4f 91       	pop	r20
    1a6e:	3f 91       	pop	r19
    1a70:	2f 91       	pop	r18
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	0f 90       	pop	r0
    1a78:	1f 90       	pop	r1
    1a7a:	18 95       	reti

00001a7c <__vector_4>:
ISR(TIMER2_OVF_vect){
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	2f 93       	push	r18
    1a88:	3f 93       	push	r19
    1a8a:	4f 93       	push	r20
    1a8c:	5f 93       	push	r21
    1a8e:	6f 93       	push	r22
    1a90:	7f 93       	push	r23
    1a92:	8f 93       	push	r24
    1a94:	9f 93       	push	r25
    1a96:	af 93       	push	r26
    1a98:	bf 93       	push	r27
    1a9a:	ef 93       	push	r30
    1a9c:	ff 93       	push	r31
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	if(timer2!= NULL){
    1aa6:	80 91 1a 01 	lds	r24, 0x011A
    1aaa:	90 91 1b 01 	lds	r25, 0x011B
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	29 f0       	breq	.+10     	; 0x1abc <__vector_4+0x40>
		(*timer2)();
    1ab2:	e0 91 1a 01 	lds	r30, 0x011A
    1ab6:	f0 91 1b 01 	lds	r31, 0x011B
    1aba:	09 95       	icall
	}
}
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	ff 91       	pop	r31
    1ac2:	ef 91       	pop	r30
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <KeyPad_getPressedKey+0x6>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1aec:	1a 82       	std	Y+2, r1	; 0x02
    1aee:	4c c0       	rjmp	.+152    	; 0x1b88 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1af0:	ea e3       	ldi	r30, 0x3A	; 58
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	80 e1       	ldi	r24, 0x10	; 16
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <KeyPad_getPressedKey+0x22>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	2a 95       	dec	r18
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <KeyPad_getPressedKey+0x1e>
    1b08:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1b0a:	eb e3       	ldi	r30, 0x3B	; 59
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	80 e1       	ldi	r24, 0x10	; 16
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <KeyPad_getPressedKey+0x3e>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <KeyPad_getPressedKey+0x3a>
    1b24:	80 95       	com	r24
    1b26:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1b28:	19 82       	std	Y+1, r1	; 0x01
    1b2a:	28 c0       	rjmp	.+80     	; 0x1b7c <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1b2c:	e9 e3       	ldi	r30, 0x39	; 57
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a9 01       	movw	r20, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <KeyPad_getPressedKey+0x62>
    1b40:	55 95       	asr	r21
    1b42:	47 95       	ror	r20
    1b44:	8a 95       	dec	r24
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <KeyPad_getPressedKey+0x5e>
    1b48:	ca 01       	movw	r24, r20
    1b4a:	81 70       	andi	r24, 0x01	; 1
    1b4c:	90 70       	andi	r25, 0x00	; 0
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	91 f4       	brne	.+36     	; 0x1b76 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	98 2f       	mov	r25, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	89 0f       	add	r24, r25
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	8f 5f       	subi	r24, 0xFF	; 255
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	84 30       	cpi	r24, 0x04	; 4
    1b80:	a8 f2       	brcs	.-86     	; 0x1b2c <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <KeyPad_getPressedKey+0xae>
    1b8e:	b0 cf       	rjmp	.-160    	; 0x1af0 <KeyPad_getPressedKey+0xe>
    1b90:	ad cf       	rjmp	.-166    	; 0x1aec <KeyPad_getPressedKey+0xa>

00001b92 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <KeyPad_4x4_adjustKeyNumber+0x6>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <KeyPad_4x4_adjustKeyNumber+0x8>
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3c 83       	std	Y+4, r19	; 0x04
    1ba8:	2b 83       	std	Y+3, r18	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	88 30       	cpi	r24, 0x08	; 8
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <KeyPad_4x4_adjustKeyNumber+0x24>
    1bb4:	70 c0       	rjmp	.+224    	; 0x1c96 <KeyPad_4x4_adjustKeyNumber+0x104>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	29 30       	cpi	r18, 0x09	; 9
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	5c f5       	brge	.+86     	; 0x1c16 <KeyPad_4x4_adjustKeyNumber+0x84>
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	84 30       	cpi	r24, 0x04	; 4
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <KeyPad_4x4_adjustKeyNumber+0x3a>
    1bca:	59 c0       	rjmp	.+178    	; 0x1c7e <KeyPad_4x4_adjustKeyNumber+0xec>
    1bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bce:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd0:	25 30       	cpi	r18, 0x05	; 5
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	9c f4       	brge	.+38     	; 0x1bfc <KeyPad_4x4_adjustKeyNumber+0x6a>
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	91 05       	cpc	r25, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <KeyPad_4x4_adjustKeyNumber+0x50>
    1be0:	48 c0       	rjmp	.+144    	; 0x1c72 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	23 30       	cpi	r18, 0x03	; 3
    1be8:	31 05       	cpc	r19, r1
    1bea:	0c f0       	brlt	.+2      	; 0x1bee <KeyPad_4x4_adjustKeyNumber+0x5c>
    1bec:	45 c0       	rjmp	.+138    	; 0x1c78 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <KeyPad_4x4_adjustKeyNumber+0x68>
    1bf8:	39 c0       	rjmp	.+114    	; 0x1c6c <KeyPad_4x4_adjustKeyNumber+0xda>
    1bfa:	68 c0       	rjmp	.+208    	; 0x1ccc <KeyPad_4x4_adjustKeyNumber+0x13a>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	26 30       	cpi	r18, 0x06	; 6
    1c02:	31 05       	cpc	r19, r1
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <KeyPad_4x4_adjustKeyNumber+0x76>
    1c06:	41 c0       	rjmp	.+130    	; 0x1c8a <KeyPad_4x4_adjustKeyNumber+0xf8>
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	87 30       	cpi	r24, 0x07	; 7
    1c0e:	91 05       	cpc	r25, r1
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <KeyPad_4x4_adjustKeyNumber+0x82>
    1c12:	3e c0       	rjmp	.+124    	; 0x1c90 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1c14:	37 c0       	rjmp	.+110    	; 0x1c84 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1a:	2c 30       	cpi	r18, 0x0C	; 12
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <KeyPad_4x4_adjustKeyNumber+0x90>
    1c20:	46 c0       	rjmp	.+140    	; 0x1cae <KeyPad_4x4_adjustKeyNumber+0x11c>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	8d 30       	cpi	r24, 0x0D	; 13
    1c28:	91 05       	cpc	r25, r1
    1c2a:	5c f4       	brge	.+22     	; 0x1c42 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	2a 30       	cpi	r18, 0x0A	; 10
    1c32:	31 05       	cpc	r19, r1
    1c34:	b1 f1       	breq	.+108    	; 0x1ca2 <KeyPad_4x4_adjustKeyNumber+0x110>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	8b 30       	cpi	r24, 0x0B	; 11
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	a4 f5       	brge	.+104    	; 0x1ca8 <KeyPad_4x4_adjustKeyNumber+0x116>
    1c40:	2d c0       	rjmp	.+90     	; 0x1c9c <KeyPad_4x4_adjustKeyNumber+0x10a>
    1c42:	2b 81       	ldd	r18, Y+3	; 0x03
    1c44:	3c 81       	ldd	r19, Y+4	; 0x04
    1c46:	2e 30       	cpi	r18, 0x0E	; 14
    1c48:	31 05       	cpc	r19, r1
    1c4a:	b9 f1       	breq	.+110    	; 0x1cba <KeyPad_4x4_adjustKeyNumber+0x128>
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	8e 30       	cpi	r24, 0x0E	; 14
    1c52:	91 05       	cpc	r25, r1
    1c54:	7c f1       	brlt	.+94     	; 0x1cb4 <KeyPad_4x4_adjustKeyNumber+0x122>
    1c56:	2b 81       	ldd	r18, Y+3	; 0x03
    1c58:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5a:	2f 30       	cpi	r18, 0x0F	; 15
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	81 f1       	breq	.+96     	; 0x1cc0 <KeyPad_4x4_adjustKeyNumber+0x12e>
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	80 31       	cpi	r24, 0x10	; 16
    1c66:	91 05       	cpc	r25, r1
    1c68:	71 f1       	breq	.+92     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x134>
    1c6a:	30 c0       	rjmp	.+96     	; 0x1ccc <KeyPad_4x4_adjustKeyNumber+0x13a>
	{
		case 1: return '7';
    1c6c:	97 e3       	ldi	r25, 0x37	; 55
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	2f c0       	rjmp	.+94     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: return '8';
    1c72:	28 e3       	ldi	r18, 0x38	; 56
    1c74:	2a 83       	std	Y+2, r18	; 0x02
    1c76:	2c c0       	rjmp	.+88     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: return '9';
    1c78:	39 e3       	ldi	r19, 0x39	; 57
    1c7a:	3a 83       	std	Y+2, r19	; 0x02
    1c7c:	29 c0       	rjmp	.+82     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: return '%'; // ASCII Code of %
    1c7e:	85 e2       	ldi	r24, 0x25	; 37
    1c80:	8a 83       	std	Y+2, r24	; 0x02
    1c82:	26 c0       	rjmp	.+76     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: return '4';
    1c84:	94 e3       	ldi	r25, 0x34	; 52
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	23 c0       	rjmp	.+70     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: return '5';
    1c8a:	25 e3       	ldi	r18, 0x35	; 53
    1c8c:	2a 83       	std	Y+2, r18	; 0x02
    1c8e:	20 c0       	rjmp	.+64     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: return '6';
    1c90:	36 e3       	ldi	r19, 0x36	; 54
    1c92:	3a 83       	std	Y+2, r19	; 0x02
    1c94:	1d c0       	rjmp	.+58     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1c96:	8a e2       	ldi	r24, 0x2A	; 42
    1c98:	8a 83       	std	Y+2, r24	; 0x02
    1c9a:	1a c0       	rjmp	.+52     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: return '1';
    1c9c:	91 e3       	ldi	r25, 0x31	; 49
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	17 c0       	rjmp	.+46     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: return '2';
    1ca2:	22 e3       	ldi	r18, 0x32	; 50
    1ca4:	2a 83       	std	Y+2, r18	; 0x02
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: return '3';
    1ca8:	33 e3       	ldi	r19, 0x33	; 51
    1caa:	3a 83       	std	Y+2, r19	; 0x02
    1cac:	11 c0       	rjmp	.+34     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1cae:	8d e2       	ldi	r24, 0x2D	; 45
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	0e c0       	rjmp	.+28     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1cb4:	9d e0       	ldi	r25, 0x0D	; 13
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	0b c0       	rjmp	.+22     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: return '0';
    1cba:	20 e3       	ldi	r18, 0x30	; 48
    1cbc:	2a 83       	std	Y+2, r18	; 0x02
    1cbe:	08 c0       	rjmp	.+16     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1cc0:	3d e3       	ldi	r19, 0x3D	; 61
    1cc2:	3a 83       	std	Y+2, r19	; 0x02
    1cc4:	05 c0       	rjmp	.+10     	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1cc6:	8b e2       	ldi	r24, 0x2B	; 43
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		default: return button_number;								 						
    1ccc:	99 81       	ldd	r25, Y+1	; 0x01
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1ce8:	a1 e3       	ldi	r26, 0x31	; 49
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e1 e3       	ldi	r30, 0x31	; 49
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 67       	ori	r24, 0x70	; 112
    1cf4:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1cf6:	e4 e3       	ldi	r30, 0x34	; 52
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1cfe:	88 e3       	ldi	r24, 0x38	; 56
    1d00:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1d04:	8c e0       	ldi	r24, 0x0C	; 12
    1d06:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	e9 97       	sbiw	r28, 0x39	; 57
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1d2c:	a2 e3       	ldi	r26, 0x32	; 50
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e2 e3       	ldi	r30, 0x32	; 50
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 7e       	andi	r24, 0xEF	; 239
    1d38:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1d3a:	a2 e3       	ldi	r26, 0x32	; 50
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e2 e3       	ldi	r30, 0x32	; 50
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 7d       	andi	r24, 0xDF	; 223
    1d46:	8c 93       	st	X, r24
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e8       	ldi	r26, 0x80	; 128
    1d4e:	bf e3       	ldi	r27, 0x3F	; 63
    1d50:	8d ab       	std	Y+53, r24	; 0x35
    1d52:	9e ab       	std	Y+54, r25	; 0x36
    1d54:	af ab       	std	Y+55, r26	; 0x37
    1d56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	6d a9       	ldd	r22, Y+53	; 0x35
    1d5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a ef       	ldi	r20, 0xFA	; 250
    1d66:	54 e4       	ldi	r21, 0x44	; 68
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	89 ab       	std	Y+49, r24	; 0x31
    1d72:	9a ab       	std	Y+50, r25	; 0x32
    1d74:	ab ab       	std	Y+51, r26	; 0x33
    1d76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d78:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <LCD_sendCommand+0x84>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	98 ab       	std	Y+48, r25	; 0x30
    1d96:	8f a7       	std	Y+47, r24	; 0x2f
    1d98:	3f c0       	rjmp	.+126    	; 0x1e18 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1d9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1da0:	9c a9       	ldd	r25, Y+52	; 0x34
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	4c f5       	brge	.+82     	; 0x1e04 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	6d a9       	ldd	r22, Y+53	; 0x35
    1db4:	7e a9       	ldd	r23, Y+54	; 0x36
    1db6:	8f a9       	ldd	r24, Y+55	; 0x37
    1db8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	98 ab       	std	Y+48, r25	; 0x30
    1dd8:	8f a7       	std	Y+47, r24	; 0x2f
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <LCD_sendCommand+0xe4>
    1ddc:	88 ec       	ldi	r24, 0xC8	; 200
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9e a7       	std	Y+46, r25	; 0x2e
    1de2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1de6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_sendCommand+0xd2>
    1dec:	9e a7       	std	Y+46, r25	; 0x2e
    1dee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df2:	98 a9       	ldd	r25, Y+48	; 0x30
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	98 ab       	std	Y+48, r25	; 0x30
    1df8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <LCD_sendCommand+0xc6>
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	69 a9       	ldd	r22, Y+49	; 0x31
    1e06:	7a a9       	ldd	r23, Y+50	; 0x32
    1e08:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	98 ab       	std	Y+48, r25	; 0x30
    1e16:	8f a7       	std	Y+47, r24	; 0x2f
    1e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1c:	9c a7       	std	Y+44, r25	; 0x2c
    1e1e:	8b a7       	std	Y+43, r24	; 0x2b
    1e20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_sendCommand+0x10e>
    1e28:	9c a7       	std	Y+44, r25	; 0x2c
    1e2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 64       	ori	r24, 0x40	; 64
    1e38:	8c 93       	st	X, r24
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a0 e8       	ldi	r26, 0x80	; 128
    1e40:	bf e3       	ldi	r27, 0x3F	; 63
    1e42:	8f a3       	std	Y+39, r24	; 0x27
    1e44:	98 a7       	std	Y+40, r25	; 0x28
    1e46:	a9 a7       	std	Y+41, r26	; 0x29
    1e48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a ef       	ldi	r20, 0xFA	; 250
    1e58:	54 e4       	ldi	r21, 0x44	; 68
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8b a3       	std	Y+35, r24	; 0x23
    1e64:	9c a3       	std	Y+36, r25	; 0x24
    1e66:	ad a3       	std	Y+37, r26	; 0x25
    1e68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e70:	9e a1       	ldd	r25, Y+38	; 0x26
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <LCD_sendCommand+0x176>
		__ticks = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9a a3       	std	Y+34, r25	; 0x22
    1e88:	89 a3       	std	Y+33, r24	; 0x21
    1e8a:	3f c0       	rjmp	.+126    	; 0x1f0a <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e90:	8d a1       	ldd	r24, Y+37	; 0x25
    1e92:	9e a1       	ldd	r25, Y+38	; 0x26
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	4c f5       	brge	.+82     	; 0x1ef6 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea8:	89 a5       	ldd	r24, Y+41	; 0x29
    1eaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9a a3       	std	Y+34, r25	; 0x22
    1eca:	89 a3       	std	Y+33, r24	; 0x21
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <LCD_sendCommand+0x1d6>
    1ece:	88 ec       	ldi	r24, 0xC8	; 200
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	98 a3       	std	Y+32, r25	; 0x20
    1ed4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ed6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ed8:	98 a1       	ldd	r25, Y+32	; 0x20
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <LCD_sendCommand+0x1c4>
    1ede:	98 a3       	std	Y+32, r25	; 0x20
    1ee0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	9a a3       	std	Y+34, r25	; 0x22
    1eea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	89 a1       	ldd	r24, Y+33	; 0x21
    1eee:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	69 f7       	brne	.-38     	; 0x1ece <LCD_sendCommand+0x1b8>
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef8:	7c a1       	ldd	r23, Y+36	; 0x24
    1efa:	8d a1       	ldd	r24, Y+37	; 0x25
    1efc:	9e a1       	ldd	r25, Y+38	; 0x26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9a a3       	std	Y+34, r25	; 0x22
    1f08:	89 a3       	std	Y+33, r24	; 0x21
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f10:	8d 8f       	std	Y+29, r24	; 0x1d
    1f12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_sendCommand+0x200>
    1f1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f1c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1f1e:	e5 e3       	ldi	r30, 0x35	; 53
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	89 ad       	ldd	r24, Y+57	; 0x39
    1f24:	80 83       	st	Z, r24
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a0 e8       	ldi	r26, 0x80	; 128
    1f2c:	bf e3       	ldi	r27, 0x3F	; 63
    1f2e:	89 8f       	std	Y+25, r24	; 0x19
    1f30:	9a 8f       	std	Y+26, r25	; 0x1a
    1f32:	ab 8f       	std	Y+27, r26	; 0x1b
    1f34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	69 8d       	ldd	r22, Y+25	; 0x19
    1f38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a ef       	ldi	r20, 0xFA	; 250
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8d 8b       	std	Y+21, r24	; 0x15
    1f50:	9e 8b       	std	Y+22, r25	; 0x16
    1f52:	af 8b       	std	Y+23, r26	; 0x17
    1f54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f56:	6d 89       	ldd	r22, Y+21	; 0x15
    1f58:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <LCD_sendCommand+0x262>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 8b       	std	Y+20, r25	; 0x14
    1f74:	8b 8b       	std	Y+19, r24	; 0x13
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1f78:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	69 8d       	ldd	r22, Y+25	; 0x19
    1f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9c 8b       	std	Y+20, r25	; 0x14
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <LCD_sendCommand+0x2c2>
    1fba:	88 ec       	ldi	r24, 0xC8	; 200
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9a 8b       	std	Y+18, r25	; 0x12
    1fc0:	89 8b       	std	Y+17, r24	; 0x11
    1fc2:	89 89       	ldd	r24, Y+17	; 0x11
    1fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_sendCommand+0x2b0>
    1fca:	9a 8b       	std	Y+18, r25	; 0x12
    1fcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fda:	9c 89       	ldd	r25, Y+20	; 0x14
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <LCD_sendCommand+0x2a4>
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	98 8b       	std	Y+16, r25	; 0x10
    1ffc:	8f 87       	std	Y+15, r24	; 0x0f
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	98 89       	ldd	r25, Y+16	; 0x10
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_sendCommand+0x2ec>
    2006:	98 8b       	std	Y+16, r25	; 0x10
    2008:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    200a:	a2 e3       	ldi	r26, 0x32	; 50
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e2 e3       	ldi	r30, 0x32	; 50
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8f 7b       	andi	r24, 0xBF	; 191
    2016:	8c 93       	st	X, r24
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e8       	ldi	r26, 0x80	; 128
    201e:	bf e3       	ldi	r27, 0x3F	; 63
    2020:	8b 87       	std	Y+11, r24	; 0x0b
    2022:	9c 87       	std	Y+12, r25	; 0x0c
    2024:	ad 87       	std	Y+13, r26	; 0x0d
    2026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8f 83       	std	Y+7, r24	; 0x07
    2042:	98 87       	std	Y+8, r25	; 0x08
    2044:	a9 87       	std	Y+9, r26	; 0x09
    2046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <LCD_sendCommand+0x354>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <LCD_sendCommand+0x3b4>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0x3a2>
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <LCD_sendCommand+0x396>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_sendCommand+0x3de>
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20fc:	e9 96       	adiw	r28, 0x39	; 57
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	e9 97       	sbiw	r28, 0x39	; 57
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2124:	a2 e3       	ldi	r26, 0x32	; 50
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e2 e3       	ldi	r30, 0x32	; 50
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 61       	ori	r24, 0x10	; 16
    2130:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2132:	a2 e3       	ldi	r26, 0x32	; 50
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e2 e3       	ldi	r30, 0x32	; 50
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8f 7d       	andi	r24, 0xDF	; 223
    213e:	8c 93       	st	X, r24
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e8       	ldi	r26, 0x80	; 128
    2146:	bf e3       	ldi	r27, 0x3F	; 63
    2148:	8d ab       	std	Y+53, r24	; 0x35
    214a:	9e ab       	std	Y+54, r25	; 0x36
    214c:	af ab       	std	Y+55, r26	; 0x37
    214e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2150:	6d a9       	ldd	r22, Y+53	; 0x35
    2152:	7e a9       	ldd	r23, Y+54	; 0x36
    2154:	8f a9       	ldd	r24, Y+55	; 0x37
    2156:	98 ad       	ldd	r25, Y+56	; 0x38
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a ef       	ldi	r20, 0xFA	; 250
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	89 ab       	std	Y+49, r24	; 0x31
    216a:	9a ab       	std	Y+50, r25	; 0x32
    216c:	ab ab       	std	Y+51, r26	; 0x33
    216e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2170:	69 a9       	ldd	r22, Y+49	; 0x31
    2172:	7a a9       	ldd	r23, Y+50	; 0x32
    2174:	8b a9       	ldd	r24, Y+51	; 0x33
    2176:	9c a9       	ldd	r25, Y+52	; 0x34
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	2c f4       	brge	.+10     	; 0x2192 <LCD_displayCharacter+0x84>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	98 ab       	std	Y+48, r25	; 0x30
    218e:	8f a7       	std	Y+47, r24	; 0x2f
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2192:	69 a9       	ldd	r22, Y+49	; 0x31
    2194:	7a a9       	ldd	r23, Y+50	; 0x32
    2196:	8b a9       	ldd	r24, Y+51	; 0x33
    2198:	9c a9       	ldd	r25, Y+52	; 0x34
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	4c f5       	brge	.+82     	; 0x21fc <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	6d a9       	ldd	r22, Y+53	; 0x35
    21ac:	7e a9       	ldd	r23, Y+54	; 0x36
    21ae:	8f a9       	ldd	r24, Y+55	; 0x37
    21b0:	98 ad       	ldd	r25, Y+56	; 0x38
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <LCD_displayCharacter+0xe4>
    21d4:	88 ec       	ldi	r24, 0xC8	; 200
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e a7       	std	Y+46, r25	; 0x2e
    21da:	8d a7       	std	Y+45, r24	; 0x2d
    21dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21de:	9e a5       	ldd	r25, Y+46	; 0x2e
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_displayCharacter+0xd2>
    21e4:	9e a7       	std	Y+46, r25	; 0x2e
    21e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f4:	98 a9       	ldd	r25, Y+48	; 0x30
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	69 f7       	brne	.-38     	; 0x21d4 <LCD_displayCharacter+0xc6>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	69 a9       	ldd	r22, Y+49	; 0x31
    21fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2200:	8b a9       	ldd	r24, Y+51	; 0x33
    2202:	9c a9       	ldd	r25, Y+52	; 0x34
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	98 ab       	std	Y+48, r25	; 0x30
    220e:	8f a7       	std	Y+47, r24	; 0x2f
    2210:	8f a5       	ldd	r24, Y+47	; 0x2f
    2212:	98 a9       	ldd	r25, Y+48	; 0x30
    2214:	9c a7       	std	Y+44, r25	; 0x2c
    2216:	8b a7       	std	Y+43, r24	; 0x2b
    2218:	8b a5       	ldd	r24, Y+43	; 0x2b
    221a:	9c a5       	ldd	r25, Y+44	; 0x2c
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_displayCharacter+0x10e>
    2220:	9c a7       	std	Y+44, r25	; 0x2c
    2222:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2224:	a2 e3       	ldi	r26, 0x32	; 50
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e2 e3       	ldi	r30, 0x32	; 50
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	80 64       	ori	r24, 0x40	; 64
    2230:	8c 93       	st	X, r24
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	a0 e8       	ldi	r26, 0x80	; 128
    2238:	bf e3       	ldi	r27, 0x3F	; 63
    223a:	8f a3       	std	Y+39, r24	; 0x27
    223c:	98 a7       	std	Y+40, r25	; 0x28
    223e:	a9 a7       	std	Y+41, r26	; 0x29
    2240:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2242:	6f a1       	ldd	r22, Y+39	; 0x27
    2244:	78 a5       	ldd	r23, Y+40	; 0x28
    2246:	89 a5       	ldd	r24, Y+41	; 0x29
    2248:	9a a5       	ldd	r25, Y+42	; 0x2a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	4a ef       	ldi	r20, 0xFA	; 250
    2250:	54 e4       	ldi	r21, 0x44	; 68
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	8b a3       	std	Y+35, r24	; 0x23
    225c:	9c a3       	std	Y+36, r25	; 0x24
    225e:	ad a3       	std	Y+37, r26	; 0x25
    2260:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2262:	6b a1       	ldd	r22, Y+35	; 0x23
    2264:	7c a1       	ldd	r23, Y+36	; 0x24
    2266:	8d a1       	ldd	r24, Y+37	; 0x25
    2268:	9e a1       	ldd	r25, Y+38	; 0x26
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	5f e3       	ldi	r21, 0x3F	; 63
    2272:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2276:	88 23       	and	r24, r24
    2278:	2c f4       	brge	.+10     	; 0x2284 <LCD_displayCharacter+0x176>
		__ticks = 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
    2282:	3f c0       	rjmp	.+126    	; 0x2302 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2284:	6b a1       	ldd	r22, Y+35	; 0x23
    2286:	7c a1       	ldd	r23, Y+36	; 0x24
    2288:	8d a1       	ldd	r24, Y+37	; 0x25
    228a:	9e a1       	ldd	r25, Y+38	; 0x26
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	3f ef       	ldi	r19, 0xFF	; 255
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	57 e4       	ldi	r21, 0x47	; 71
    2294:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2298:	18 16       	cp	r1, r24
    229a:	4c f5       	brge	.+82     	; 0x22ee <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229c:	6f a1       	ldd	r22, Y+39	; 0x27
    229e:	78 a5       	ldd	r23, Y+40	; 0x28
    22a0:	89 a5       	ldd	r24, Y+41	; 0x29
    22a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e2       	ldi	r20, 0x20	; 32
    22aa:	51 e4       	ldi	r21, 0x41	; 65
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9a a3       	std	Y+34, r25	; 0x22
    22c2:	89 a3       	std	Y+33, r24	; 0x21
    22c4:	0f c0       	rjmp	.+30     	; 0x22e4 <LCD_displayCharacter+0x1d6>
    22c6:	88 ec       	ldi	r24, 0xC8	; 200
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	98 a3       	std	Y+32, r25	; 0x20
    22cc:	8f 8f       	std	Y+31, r24	; 0x1f
    22ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d0:	98 a1       	ldd	r25, Y+32	; 0x20
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_displayCharacter+0x1c4>
    22d6:	98 a3       	std	Y+32, r25	; 0x20
    22d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22da:	89 a1       	ldd	r24, Y+33	; 0x21
    22dc:	9a a1       	ldd	r25, Y+34	; 0x22
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	9a a3       	std	Y+34, r25	; 0x22
    22e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e4:	89 a1       	ldd	r24, Y+33	; 0x21
    22e6:	9a a1       	ldd	r25, Y+34	; 0x22
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	69 f7       	brne	.-38     	; 0x22c6 <LCD_displayCharacter+0x1b8>
    22ec:	14 c0       	rjmp	.+40     	; 0x2316 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ee:	6b a1       	ldd	r22, Y+35	; 0x23
    22f0:	7c a1       	ldd	r23, Y+36	; 0x24
    22f2:	8d a1       	ldd	r24, Y+37	; 0x25
    22f4:	9e a1       	ldd	r25, Y+38	; 0x26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9a a3       	std	Y+34, r25	; 0x22
    2300:	89 a3       	std	Y+33, r24	; 0x21
    2302:	89 a1       	ldd	r24, Y+33	; 0x21
    2304:	9a a1       	ldd	r25, Y+34	; 0x22
    2306:	9e 8f       	std	Y+30, r25	; 0x1e
    2308:	8d 8f       	std	Y+29, r24	; 0x1d
    230a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <LCD_displayCharacter+0x200>
    2312:	9e 8f       	std	Y+30, r25	; 0x1e
    2314:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    2316:	e5 e3       	ldi	r30, 0x35	; 53
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	89 ad       	ldd	r24, Y+57	; 0x39
    231c:	80 83       	st	Z, r24
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e8       	ldi	r26, 0x80	; 128
    2324:	bf e3       	ldi	r27, 0x3F	; 63
    2326:	89 8f       	std	Y+25, r24	; 0x19
    2328:	9a 8f       	std	Y+26, r25	; 0x1a
    232a:	ab 8f       	std	Y+27, r26	; 0x1b
    232c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	69 8d       	ldd	r22, Y+25	; 0x19
    2330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8d 8b       	std	Y+21, r24	; 0x15
    2348:	9e 8b       	std	Y+22, r25	; 0x16
    234a:	af 8b       	std	Y+23, r26	; 0x17
    234c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    234e:	6d 89       	ldd	r22, Y+21	; 0x15
    2350:	7e 89       	ldd	r23, Y+22	; 0x16
    2352:	8f 89       	ldd	r24, Y+23	; 0x17
    2354:	98 8d       	ldd	r25, Y+24	; 0x18
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_displayCharacter+0x262>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9c 8b       	std	Y+20, r25	; 0x14
    236c:	8b 8b       	std	Y+19, r24	; 0x13
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2370:	6d 89       	ldd	r22, Y+21	; 0x15
    2372:	7e 89       	ldd	r23, Y+22	; 0x16
    2374:	8f 89       	ldd	r24, Y+23	; 0x17
    2376:	98 8d       	ldd	r25, Y+24	; 0x18
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	69 8d       	ldd	r22, Y+25	; 0x19
    238a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	8b 8b       	std	Y+19, r24	; 0x13
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_displayCharacter+0x2c2>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9a 8b       	std	Y+18, r25	; 0x12
    23b8:	89 8b       	std	Y+17, r24	; 0x11
    23ba:	89 89       	ldd	r24, Y+17	; 0x11
    23bc:	9a 89       	ldd	r25, Y+18	; 0x12
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_displayCharacter+0x2b0>
    23c2:	9a 8b       	std	Y+18, r25	; 0x12
    23c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8b 89       	ldd	r24, Y+19	; 0x13
    23c8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8b 89       	ldd	r24, Y+19	; 0x13
    23d2:	9c 89       	ldd	r25, Y+20	; 0x14
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_displayCharacter+0x2a4>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9c 8b       	std	Y+20, r25	; 0x14
    23ec:	8b 8b       	std	Y+19, r24	; 0x13
    23ee:	8b 89       	ldd	r24, Y+19	; 0x13
    23f0:	9c 89       	ldd	r25, Y+20	; 0x14
    23f2:	98 8b       	std	Y+16, r25	; 0x10
    23f4:	8f 87       	std	Y+15, r24	; 0x0f
    23f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f8:	98 89       	ldd	r25, Y+16	; 0x10
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_displayCharacter+0x2ec>
    23fe:	98 8b       	std	Y+16, r25	; 0x10
    2400:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2402:	a2 e3       	ldi	r26, 0x32	; 50
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e2 e3       	ldi	r30, 0x32	; 50
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8f 7b       	andi	r24, 0xBF	; 191
    240e:	8c 93       	st	X, r24
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	a0 e8       	ldi	r26, 0x80	; 128
    2416:	bf e3       	ldi	r27, 0x3F	; 63
    2418:	8b 87       	std	Y+11, r24	; 0x0b
    241a:	9c 87       	std	Y+12, r25	; 0x0c
    241c:	ad 87       	std	Y+13, r26	; 0x0d
    241e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2420:	6b 85       	ldd	r22, Y+11	; 0x0b
    2422:	7c 85       	ldd	r23, Y+12	; 0x0c
    2424:	8d 85       	ldd	r24, Y+13	; 0x0d
    2426:	9e 85       	ldd	r25, Y+14	; 0x0e
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a ef       	ldi	r20, 0xFA	; 250
    242e:	54 e4       	ldi	r21, 0x44	; 68
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8f 83       	std	Y+7, r24	; 0x07
    243a:	98 87       	std	Y+8, r25	; 0x08
    243c:	a9 87       	std	Y+9, r26	; 0x09
    243e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	2c f4       	brge	.+10     	; 0x2462 <LCD_displayCharacter+0x354>
		__ticks = 1;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	3f c0       	rjmp	.+126    	; 0x24e0 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	4c f5       	brge	.+82     	; 0x24cc <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	6b 85       	ldd	r22, Y+11	; 0x0b
    247c:	7c 85       	ldd	r23, Y+12	; 0x0c
    247e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2480:	9e 85       	ldd	r25, Y+14	; 0x0e
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e2       	ldi	r20, 0x20	; 32
    2488:	51 e4       	ldi	r21, 0x41	; 65
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <LCD_displayCharacter+0x3b4>
    24a4:	88 ec       	ldi	r24, 0xC8	; 200
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <LCD_displayCharacter+0x3a2>
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	69 f7       	brne	.-38     	; 0x24a4 <LCD_displayCharacter+0x396>
    24ca:	14 c0       	rjmp	.+40     	; 0x24f4 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_displayCharacter+0x3de>
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24f4:	e9 96       	adiw	r28, 0x39	; 57
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <LCD_displayString+0x6>
    250c:	0f 92       	push	r0
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	9b 83       	std	Y+3, r25	; 0x03
    2514:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2516:	19 82       	std	Y+1, r1	; 0x01
    2518:	0e c0       	rjmp	.+28     	; 0x2536 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	9b 81       	ldd	r25, Y+3	; 0x03
    2524:	fc 01       	movw	r30, r24
    2526:	e2 0f       	add	r30, r18
    2528:	f3 1f       	adc	r31, r19
    252a:	80 81       	ld	r24, Z
    252c:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_displayCharacter>
		i++;
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	8f 5f       	subi	r24, 0xFF	; 255
    2534:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	9b 81       	ldd	r25, Y+3	; 0x03
    2540:	fc 01       	movw	r30, r24
    2542:	e2 0f       	add	r30, r18
    2544:	f3 1f       	adc	r31, r19
    2546:	80 81       	ld	r24, Z
    2548:	88 23       	and	r24, r24
    254a:	39 f7       	brne	.-50     	; 0x251a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <LCD_goToRowColumn+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <LCD_goToRowColumn+0x8>
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	8a 83       	std	Y+2, r24	; 0x02
    2568:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	3d 83       	std	Y+5, r19	; 0x05
    2572:	2c 83       	std	Y+4, r18	; 0x04
    2574:	8c 81       	ldd	r24, Y+4	; 0x04
    2576:	9d 81       	ldd	r25, Y+5	; 0x05
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	91 05       	cpc	r25, r1
    257c:	c1 f0       	breq	.+48     	; 0x25ae <LCD_goToRowColumn+0x56>
    257e:	2c 81       	ldd	r18, Y+4	; 0x04
    2580:	3d 81       	ldd	r19, Y+5	; 0x05
    2582:	22 30       	cpi	r18, 0x02	; 2
    2584:	31 05       	cpc	r19, r1
    2586:	2c f4       	brge	.+10     	; 0x2592 <LCD_goToRowColumn+0x3a>
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	9d 81       	ldd	r25, Y+5	; 0x05
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	61 f0       	breq	.+24     	; 0x25a8 <LCD_goToRowColumn+0x50>
    2590:	19 c0       	rjmp	.+50     	; 0x25c4 <LCD_goToRowColumn+0x6c>
    2592:	2c 81       	ldd	r18, Y+4	; 0x04
    2594:	3d 81       	ldd	r19, Y+5	; 0x05
    2596:	22 30       	cpi	r18, 0x02	; 2
    2598:	31 05       	cpc	r19, r1
    259a:	69 f0       	breq	.+26     	; 0x25b6 <LCD_goToRowColumn+0x5e>
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	9d 81       	ldd	r25, Y+5	; 0x05
    25a0:	83 30       	cpi	r24, 0x03	; 3
    25a2:	91 05       	cpc	r25, r1
    25a4:	61 f0       	breq	.+24     	; 0x25be <LCD_goToRowColumn+0x66>
    25a6:	0e c0       	rjmp	.+28     	; 0x25c4 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	0b c0       	rjmp	.+22     	; 0x25c4 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	80 5c       	subi	r24, 0xC0	; 192
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	07 c0       	rjmp	.+14     	; 0x25c4 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	80 5f       	subi	r24, 0xF0	; 240
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	03 c0       	rjmp	.+6      	; 0x25c4 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	80 5b       	subi	r24, 0xB0	; 176
    25c2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	80 68       	ori	r24, 0x80	; 128
    25c8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <LCD_displayStringRowColumn+0x6>
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <LCD_displayStringRowColumn+0x8>
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	6a 83       	std	Y+2, r22	; 0x02
    25ec:	5c 83       	std	Y+4, r21	; 0x04
    25ee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	6a 81       	ldd	r22, Y+2	; 0x02
    25f4:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	0e 94 83 12 	call	0x2506	; 0x2506 <LCD_displayString>
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	62 97       	sbiw	r28, 0x12	; 18
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	9a 8b       	std	Y+18, r25	; 0x12
    2624:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2626:	89 89       	ldd	r24, Y+17	; 0x11
    2628:	9a 89       	ldd	r25, Y+18	; 0x12
    262a:	9e 01       	movw	r18, r28
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	b9 01       	movw	r22, r18
    2632:	4a e0       	ldi	r20, 0x0A	; 10
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <itoa>
   LCD_displayString(buff);
    263a:	ce 01       	movw	r24, r28
    263c:	01 96       	adiw	r24, 0x01	; 1
    263e:	0e 94 83 12 	call	0x2506	; 0x2506 <LCD_displayString>
}
    2642:	62 96       	adiw	r28, 0x12	; 18
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
}
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <main>:
void Timer_add_count(void);
void Timer_count(uint8 time_5seconds);
void get_password(uint8* str);
void send_password(uint8* str);
/*------------------------------------------Main Function--------------------------------------*/
int main(void){
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	c6 55       	subi	r28, 0x56	; 86
    2672:	d0 40       	sbci	r29, 0x00	; 0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61

	struct TIMER_init Timer1;
	uint8 pass_1[5];
	uint8 pass_2[5];
	uint8 match=1,i;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	8d af       	std	Y+61, r24	; 0x3d
	uint8 option,result;
	uint8 retry=0;
    2682:	19 ae       	std	Y+57, r1	; 0x39
	UART_config config = {BIT_8, DISABLE, STOP_BIT_1};   // 8_bit frame, parity disabled, 1 stop bit
    2684:	ce 01       	movw	r24, r28
    2686:	81 5b       	subi	r24, 0xB1	; 177
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	64 96       	adiw	r28, 0x14	; 20
    268c:	9f af       	std	Y+63, r25	; 0x3f
    268e:	8e af       	std	Y+62, r24	; 0x3e
    2690:	64 97       	sbiw	r28, 0x14	; 20
    2692:	82 e1       	ldi	r24, 0x12	; 18
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	66 96       	adiw	r28, 0x16	; 22
    2698:	9f af       	std	Y+63, r25	; 0x3f
    269a:	8e af       	std	Y+62, r24	; 0x3e
    269c:	66 97       	sbiw	r28, 0x16	; 22
    269e:	93 e0       	ldi	r25, 0x03	; 3
    26a0:	67 96       	adiw	r28, 0x17	; 23
    26a2:	9f af       	std	Y+63, r25	; 0x3f
    26a4:	67 97       	sbiw	r28, 0x17	; 23
    26a6:	66 96       	adiw	r28, 0x16	; 22
    26a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    26aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ac:	66 97       	sbiw	r28, 0x16	; 22
    26ae:	00 80       	ld	r0, Z
    26b0:	66 96       	adiw	r28, 0x16	; 22
    26b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    26b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    26b6:	66 97       	sbiw	r28, 0x16	; 22
    26b8:	01 96       	adiw	r24, 0x01	; 1
    26ba:	66 96       	adiw	r28, 0x16	; 22
    26bc:	9f af       	std	Y+63, r25	; 0x3f
    26be:	8e af       	std	Y+62, r24	; 0x3e
    26c0:	66 97       	sbiw	r28, 0x16	; 22
    26c2:	64 96       	adiw	r28, 0x14	; 20
    26c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    26c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    26c8:	64 97       	sbiw	r28, 0x14	; 20
    26ca:	00 82       	st	Z, r0
    26cc:	64 96       	adiw	r28, 0x14	; 20
    26ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    26d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    26d2:	64 97       	sbiw	r28, 0x14	; 20
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	64 96       	adiw	r28, 0x14	; 20
    26d8:	9f af       	std	Y+63, r25	; 0x3f
    26da:	8e af       	std	Y+62, r24	; 0x3e
    26dc:	64 97       	sbiw	r28, 0x14	; 20
    26de:	67 96       	adiw	r28, 0x17	; 23
    26e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    26e2:	67 97       	sbiw	r28, 0x17	; 23
    26e4:	91 50       	subi	r25, 0x01	; 1
    26e6:	67 96       	adiw	r28, 0x17	; 23
    26e8:	9f af       	std	Y+63, r25	; 0x3f
    26ea:	67 97       	sbiw	r28, 0x17	; 23
    26ec:	67 96       	adiw	r28, 0x17	; 23
    26ee:	ef ad       	ldd	r30, Y+63	; 0x3f
    26f0:	67 97       	sbiw	r28, 0x17	; 23
    26f2:	ee 23       	and	r30, r30
    26f4:	c1 f6       	brne	.-80     	; 0x26a6 <main+0x3e>
	uart_init(&config);
    26f6:	ce 01       	movw	r24, r28
    26f8:	81 5b       	subi	r24, 0xB1	; 177
    26fa:	9f 4f       	sbci	r25, 0xFF	; 255
    26fc:	0e 94 9a 18 	call	0x3134	; 0x3134 <uart_init>
	Timer1.timer=1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	8e af       	std	Y+62, r24	; 0x3e
	Timer1.mode=1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	8f af       	std	Y+63, r24	; 0x3f
	Timer1.comp_value=39062;
    2708:	fe 01       	movw	r30, r28
    270a:	ee 5b       	subi	r30, 0xBE	; 190
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	86 e9       	ldi	r24, 0x96	; 150
    2710:	98 e9       	ldi	r25, 0x98	; 152
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
	Timer1.prescaler=1024;
    2716:	fe 01       	movw	r30, r28
    2718:	e0 5c       	subi	r30, 0xC0	; 192
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	94 e0       	ldi	r25, 0x04	; 4
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
	Timer1.comp_match_mode=0;
    2724:	fe 01       	movw	r30, r28
    2726:	ec 5b       	subi	r30, 0xBC	; 188
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	10 82       	st	Z, r1
	SREG|=(1<<7);
    272c:	af e5       	ldi	r26, 0x5F	; 95
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ef e5       	ldi	r30, 0x5F	; 95
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	80 68       	ori	r24, 0x80	; 128
    2738:	8c 93       	st	X, r24
	TIMER_Init(&Timer1);
    273a:	ce 01       	movw	r24, r28
    273c:	ce 96       	adiw	r24, 0x3e	; 62
    273e:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER_Init>
	TIMER_Stop(1);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	0e 94 b5 0b 	call	0x176a	; 0x176a <TIMER_Stop>
	TIMER_Timer1SetCallBack(&Timer_add_count);
    2748:	88 e2       	ldi	r24, 0x28	; 40
    274a:	97 e1       	ldi	r25, 0x17	; 23
    274c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <TIMER_Timer1SetCallBack>
	LCD_init();
    2750:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_init>
	LCD_displayStringRowColumn(0,0,"HELLO");
    2754:	20 e6       	ldi	r18, 0x60	; 96
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	a9 01       	movw	r20, r18
    275e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	aa ef       	ldi	r26, 0xFA	; 250
    2768:	b3 e4       	ldi	r27, 0x43	; 67
    276a:	8d ab       	std	Y+53, r24	; 0x35
    276c:	9e ab       	std	Y+54, r25	; 0x36
    276e:	af ab       	std	Y+55, r26	; 0x37
    2770:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6d a9       	ldd	r22, Y+53	; 0x35
    2774:	7e a9       	ldd	r23, Y+54	; 0x36
    2776:	8f a9       	ldd	r24, Y+55	; 0x37
    2778:	98 ad       	ldd	r25, Y+56	; 0x38
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a ef       	ldi	r20, 0xFA	; 250
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	89 ab       	std	Y+49, r24	; 0x31
    278c:	9a ab       	std	Y+50, r25	; 0x32
    278e:	ab ab       	std	Y+51, r26	; 0x33
    2790:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2792:	69 a9       	ldd	r22, Y+49	; 0x31
    2794:	7a a9       	ldd	r23, Y+50	; 0x32
    2796:	8b a9       	ldd	r24, Y+51	; 0x33
    2798:	9c a9       	ldd	r25, Y+52	; 0x34
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <main+0x14c>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	98 ab       	std	Y+48, r25	; 0x30
    27b0:	8f a7       	std	Y+47, r24	; 0x2f
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <main+0x1ca>
	else if (__tmp > 65535)
    27b4:	69 a9       	ldd	r22, Y+49	; 0x31
    27b6:	7a a9       	ldd	r23, Y+50	; 0x32
    27b8:	8b a9       	ldd	r24, Y+51	; 0x33
    27ba:	9c a9       	ldd	r25, Y+52	; 0x34
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <main+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6d a9       	ldd	r22, Y+53	; 0x35
    27ce:	7e a9       	ldd	r23, Y+54	; 0x36
    27d0:	8f a9       	ldd	r24, Y+55	; 0x37
    27d2:	98 ad       	ldd	r25, Y+56	; 0x38
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	98 ab       	std	Y+48, r25	; 0x30
    27f2:	8f a7       	std	Y+47, r24	; 0x2f
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <main+0x1ac>
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9e a7       	std	Y+46, r25	; 0x2e
    27fc:	8d a7       	std	Y+45, r24	; 0x2d
    27fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2800:	9e a5       	ldd	r25, Y+46	; 0x2e
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <main+0x19a>
    2806:	9e a7       	std	Y+46, r25	; 0x2e
    2808:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8f a5       	ldd	r24, Y+47	; 0x2f
    280c:	98 a9       	ldd	r25, Y+48	; 0x30
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	98 ab       	std	Y+48, r25	; 0x30
    2812:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8f a5       	ldd	r24, Y+47	; 0x2f
    2816:	98 a9       	ldd	r25, Y+48	; 0x30
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <main+0x18e>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <main+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	69 a9       	ldd	r22, Y+49	; 0x31
    2820:	7a a9       	ldd	r23, Y+50	; 0x32
    2822:	8b a9       	ldd	r24, Y+51	; 0x33
    2824:	9c a9       	ldd	r25, Y+52	; 0x34
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	98 ab       	std	Y+48, r25	; 0x30
    2830:	8f a7       	std	Y+47, r24	; 0x2f
    2832:	8f a5       	ldd	r24, Y+47	; 0x2f
    2834:	98 a9       	ldd	r25, Y+48	; 0x30
    2836:	9c a7       	std	Y+44, r25	; 0x2c
    2838:	8b a7       	std	Y+43, r24	; 0x2b
    283a:	8b a5       	ldd	r24, Y+43	; 0x2b
    283c:	9c a5       	ldd	r25, Y+44	; 0x2c
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <main+0x1d6>
    2842:	9c a7       	std	Y+44, r25	; 0x2c
    2844:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	LCD_clearScreen();
    2846:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
	do{
		match=1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	8d af       	std	Y+61, r24	; 0x3d
		LCD_displayStringRowColumn(0,0,"ENTER NEW PASS");
    284e:	26 e6       	ldi	r18, 0x66	; 102
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	a9 01       	movw	r20, r18
    2858:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_goToRowColumn>
		get_password(pass_1);
    2864:	ce 01       	movw	r24, r28
    2866:	8b 5b       	subi	r24, 0xBB	; 187
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <get_password>
		LCD_clearScreen();
    286e:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"reenter pass");
    2872:	25 e7       	ldi	r18, 0x75	; 117
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	a9 01       	movw	r20, r18
    287c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_goToRowColumn>
		get_password(pass_2);
    2888:	ce 01       	movw	r24, r28
    288a:	86 5b       	subi	r24, 0xB6	; 182
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <get_password>
		LCD_clearScreen();
    2892:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
		for(i=0;i<5;i++){
    2896:	1c ae       	std	Y+60, r1	; 0x3c
    2898:	1a c0       	rjmp	.+52     	; 0x28ce <main+0x266>
			if(pass_1[i]!=pass_2[i])
    289a:	8c ad       	ldd	r24, Y+60	; 0x3c
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	ce 01       	movw	r24, r28
    28a2:	8b 5b       	subi	r24, 0xBB	; 187
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	fc 01       	movw	r30, r24
    28a8:	e2 0f       	add	r30, r18
    28aa:	f3 1f       	adc	r31, r19
    28ac:	40 81       	ld	r20, Z
    28ae:	8c ad       	ldd	r24, Y+60	; 0x3c
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	ce 01       	movw	r24, r28
    28b6:	86 5b       	subi	r24, 0xB6	; 182
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	fc 01       	movw	r30, r24
    28bc:	e2 0f       	add	r30, r18
    28be:	f3 1f       	adc	r31, r19
    28c0:	80 81       	ld	r24, Z
    28c2:	48 17       	cp	r20, r24
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <main+0x260>
				match=0;
    28c6:	1d ae       	std	Y+61, r1	; 0x3d
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"reenter pass");
		LCD_goToRowColumn(1,0);
		get_password(pass_2);
		LCD_clearScreen();
		for(i=0;i<5;i++){
    28c8:	8c ad       	ldd	r24, Y+60	; 0x3c
    28ca:	8f 5f       	subi	r24, 0xFF	; 255
    28cc:	8c af       	std	Y+60, r24	; 0x3c
    28ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    28d0:	85 30       	cpi	r24, 0x05	; 5
    28d2:	18 f3       	brcs	.-58     	; 0x289a <main+0x232>
			if(pass_1[i]!=pass_2[i])
				match=0;
		}
	}while(!match);
    28d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d6:	88 23       	and	r24, r24
    28d8:	09 f4       	brne	.+2      	; 0x28dc <main+0x274>
    28da:	b7 cf       	rjmp	.-146    	; 0x284a <main+0x1e2>
	LCD_clearScreen();
    28dc:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"password match");
    28e0:	22 e8       	ldi	r18, 0x82	; 130
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	a9 01       	movw	r20, r18
    28ea:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	aa e7       	ldi	r26, 0x7A	; 122
    28f4:	b4 e4       	ldi	r27, 0x44	; 68
    28f6:	8f a3       	std	Y+39, r24	; 0x27
    28f8:	98 a7       	std	Y+40, r25	; 0x28
    28fa:	a9 a7       	std	Y+41, r26	; 0x29
    28fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2900:	78 a5       	ldd	r23, Y+40	; 0x28
    2902:	89 a5       	ldd	r24, Y+41	; 0x29
    2904:	9a a5       	ldd	r25, Y+42	; 0x2a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4a ef       	ldi	r20, 0xFA	; 250
    290c:	54 e4       	ldi	r21, 0x44	; 68
    290e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	8b a3       	std	Y+35, r24	; 0x23
    2918:	9c a3       	std	Y+36, r25	; 0x24
    291a:	ad a3       	std	Y+37, r26	; 0x25
    291c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    291e:	6b a1       	ldd	r22, Y+35	; 0x23
    2920:	7c a1       	ldd	r23, Y+36	; 0x24
    2922:	8d a1       	ldd	r24, Y+37	; 0x25
    2924:	9e a1       	ldd	r25, Y+38	; 0x26
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e8       	ldi	r20, 0x80	; 128
    292c:	5f e3       	ldi	r21, 0x3F	; 63
    292e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2932:	88 23       	and	r24, r24
    2934:	2c f4       	brge	.+10     	; 0x2940 <main+0x2d8>
		__ticks = 1;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9a a3       	std	Y+34, r25	; 0x22
    293c:	89 a3       	std	Y+33, r24	; 0x21
    293e:	3f c0       	rjmp	.+126    	; 0x29be <main+0x356>
	else if (__tmp > 65535)
    2940:	6b a1       	ldd	r22, Y+35	; 0x23
    2942:	7c a1       	ldd	r23, Y+36	; 0x24
    2944:	8d a1       	ldd	r24, Y+37	; 0x25
    2946:	9e a1       	ldd	r25, Y+38	; 0x26
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	4c f5       	brge	.+82     	; 0x29aa <main+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2958:	6f a1       	ldd	r22, Y+39	; 0x27
    295a:	78 a5       	ldd	r23, Y+40	; 0x28
    295c:	89 a5       	ldd	r24, Y+41	; 0x29
    295e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e2       	ldi	r20, 0x20	; 32
    2966:	51 e4       	ldi	r21, 0x41	; 65
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9a a3       	std	Y+34, r25	; 0x22
    297e:	89 a3       	std	Y+33, r24	; 0x21
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <main+0x338>
    2982:	88 ec       	ldi	r24, 0xC8	; 200
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	98 a3       	std	Y+32, r25	; 0x20
    2988:	8f 8f       	std	Y+31, r24	; 0x1f
    298a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    298c:	98 a1       	ldd	r25, Y+32	; 0x20
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <main+0x326>
    2992:	98 a3       	std	Y+32, r25	; 0x20
    2994:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2996:	89 a1       	ldd	r24, Y+33	; 0x21
    2998:	9a a1       	ldd	r25, Y+34	; 0x22
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	9a a3       	std	Y+34, r25	; 0x22
    299e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a0:	89 a1       	ldd	r24, Y+33	; 0x21
    29a2:	9a a1       	ldd	r25, Y+34	; 0x22
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	69 f7       	brne	.-38     	; 0x2982 <main+0x31a>
    29a8:	14 c0       	rjmp	.+40     	; 0x29d2 <main+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29aa:	6b a1       	ldd	r22, Y+35	; 0x23
    29ac:	7c a1       	ldd	r23, Y+36	; 0x24
    29ae:	8d a1       	ldd	r24, Y+37	; 0x25
    29b0:	9e a1       	ldd	r25, Y+38	; 0x26
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9a a3       	std	Y+34, r25	; 0x22
    29bc:	89 a3       	std	Y+33, r24	; 0x21
    29be:	89 a1       	ldd	r24, Y+33	; 0x21
    29c0:	9a a1       	ldd	r25, Y+34	; 0x22
    29c2:	9e 8f       	std	Y+30, r25	; 0x1e
    29c4:	8d 8f       	std	Y+29, r24	; 0x1d
    29c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <main+0x362>
    29ce:	9e 8f       	std	Y+30, r25	; 0x1e
    29d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	send_password(pass_1);
    29d2:	ce 01       	movw	r24, r28
    29d4:	8b 5b       	subi	r24, 0xBB	; 187
    29d6:	9f 4f       	sbci	r25, 0xFF	; 255
    29d8:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <send_password>
	LCD_clearScreen();
    29dc:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Password saved");
    29e0:	21 e9       	ldi	r18, 0x91	; 145
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	a9 01       	movw	r20, r18
    29ea:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	aa e7       	ldi	r26, 0x7A	; 122
    29f4:	b4 e4       	ldi	r27, 0x44	; 68
    29f6:	89 8f       	std	Y+25, r24	; 0x19
    29f8:	9a 8f       	std	Y+26, r25	; 0x1a
    29fa:	ab 8f       	std	Y+27, r26	; 0x1b
    29fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a ef       	ldi	r20, 0xFA	; 250
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8d 8b       	std	Y+21, r24	; 0x15
    2a18:	9e 8b       	std	Y+22, r25	; 0x16
    2a1a:	af 8b       	std	Y+23, r26	; 0x17
    2a1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a20:	7e 89       	ldd	r23, Y+22	; 0x16
    2a22:	8f 89       	ldd	r24, Y+23	; 0x17
    2a24:	98 8d       	ldd	r25, Y+24	; 0x18
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <main+0x3d8>
		__ticks = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	3f c0       	rjmp	.+126    	; 0x2abe <main+0x456>
	else if (__tmp > 65535)
    2a40:	6d 89       	ldd	r22, Y+21	; 0x15
    2a42:	7e 89       	ldd	r23, Y+22	; 0x16
    2a44:	8f 89       	ldd	r24, Y+23	; 0x17
    2a46:	98 8d       	ldd	r25, Y+24	; 0x18
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	4f e7       	ldi	r20, 0x7F	; 127
    2a4e:	57 e4       	ldi	r21, 0x47	; 71
    2a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	4c f5       	brge	.+82     	; 0x2aaa <main+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9c 8b       	std	Y+20, r25	; 0x14
    2a7e:	8b 8b       	std	Y+19, r24	; 0x13
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <main+0x438>
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9a 8b       	std	Y+18, r25	; 0x12
    2a88:	89 8b       	std	Y+17, r24	; 0x11
    2a8a:	89 89       	ldd	r24, Y+17	; 0x11
    2a8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <main+0x426>
    2a92:	9a 8b       	std	Y+18, r25	; 0x12
    2a94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a96:	8b 89       	ldd	r24, Y+19	; 0x13
    2a98:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9c 8b       	std	Y+20, r25	; 0x14
    2a9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	69 f7       	brne	.-38     	; 0x2a82 <main+0x41a>
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <main+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2aac:	7e 89       	ldd	r23, Y+22	; 0x16
    2aae:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9c 8b       	std	Y+20, r25	; 0x14
    2abc:	8b 8b       	std	Y+19, r24	; 0x13
    2abe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac2:	98 8b       	std	Y+16, r25	; 0x10
    2ac4:	8f 87       	std	Y+15, r24	; 0x0f
    2ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ac8:	98 89       	ldd	r25, Y+16	; 0x10
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <main+0x462>
    2ace:	98 8b       	std	Y+16, r25	; 0x10
    2ad0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);

	while(1){
		LCD_clearScreen();
    2ad2:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"+: change password");
    2ad6:	20 ea       	ldi	r18, 0xA0	; 160
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	a9 01       	movw	r20, r18
    2ae0:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"-: open door");
    2ae4:	23 eb       	ldi	r18, 0xB3	; 179
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	a9 01       	movw	r20, r18
    2aee:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
		option=KeyPad_getPressedKey();
    2af2:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KeyPad_getPressedKey>
    2af6:	8b af       	std	Y+59, r24	; 0x3b
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	aa ef       	ldi	r26, 0xFA	; 250
    2afe:	b3 e4       	ldi	r27, 0x43	; 67
    2b00:	8b 87       	std	Y+11, r24	; 0x0b
    2b02:	9c 87       	std	Y+12, r25	; 0x0c
    2b04:	ad 87       	std	Y+13, r26	; 0x0d
    2b06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a ef       	ldi	r20, 0xFA	; 250
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8f 83       	std	Y+7, r24	; 0x07
    2b22:	98 87       	std	Y+8, r25	; 0x08
    2b24:	a9 87       	std	Y+9, r26	; 0x09
    2b26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3c:	88 23       	and	r24, r24
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <main+0x4e2>
		__ticks = 1;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
    2b48:	3f c0       	rjmp	.+126    	; 0x2bc8 <main+0x560>
	else if (__tmp > 65535)
    2b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4c:	78 85       	ldd	r23, Y+8	; 0x08
    2b4e:	89 85       	ldd	r24, Y+9	; 0x09
    2b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	3f ef       	ldi	r19, 0xFF	; 255
    2b56:	4f e7       	ldi	r20, 0x7F	; 127
    2b58:	57 e4       	ldi	r21, 0x47	; 71
    2b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5e:	18 16       	cp	r1, r24
    2b60:	4c f5       	brge	.+82     	; 0x2bb4 <main+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e2       	ldi	r20, 0x20	; 32
    2b70:	51 e4       	ldi	r21, 0x41	; 65
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
    2b8a:	0f c0       	rjmp	.+30     	; 0x2baa <main+0x542>
    2b8c:	88 ec       	ldi	r24, 0xC8	; 200
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	9c 81       	ldd	r25, Y+4	; 0x04
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <main+0x530>
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
    2b9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	69 f7       	brne	.-38     	; 0x2b8c <main+0x524>
    2bb2:	14 c0       	rjmp	.+40     	; 0x2bdc <main+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb6:	78 85       	ldd	r23, Y+8	; 0x08
    2bb8:	89 85       	ldd	r24, Y+9	; 0x09
    2bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
    2bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bca:	9e 81       	ldd	r25, Y+6	; 0x06
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <main+0x56c>
    2bd8:	9a 83       	std	Y+2, r25	; 0x02
    2bda:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if(option=='+')
    2bdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bde:	8b 32       	cpi	r24, 0x2B	; 43
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <main+0x57c>
    2be2:	b6 c0       	rjmp	.+364    	; 0x2d50 <main+0x6e8>
		{
			do{LCD_clearScreen();
    2be4:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter password");
    2be8:	20 ec       	ldi	r18, 0xC0	; 192
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	a9 01       	movw	r20, r18
    2bf2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,0);
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_goToRowColumn>
			get_password(pass_1);
    2bfe:	ce 01       	movw	r24, r28
    2c00:	8b 5b       	subi	r24, 0xBB	; 187
    2c02:	9f 4f       	sbci	r25, 0xFF	; 255
    2c04:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <get_password>
			if(retry==0){
    2c08:	89 ad       	ldd	r24, Y+57	; 0x39
    2c0a:	88 23       	and	r24, r24
    2c0c:	71 f4       	brne	.+28     	; 0x2c2a <main+0x5c2>
				UART_SendByte(status_READY);
    2c0e:	80 91 0d 01 	lds	r24, 0x010D
    2c12:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
			while(UART_RecieveByte()!=status_READY){};
    2c16:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    2c1a:	98 2f       	mov	r25, r24
    2c1c:	80 91 0d 01 	lds	r24, 0x010D
    2c20:	98 17       	cp	r25, r24
    2c22:	c9 f7       	brne	.-14     	; 0x2c16 <main+0x5ae>
			UART_SendByte(option);
    2c24:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c26:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
			}
			send_password(pass_1);
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	8b 5b       	subi	r24, 0xBB	; 187
    2c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c30:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <send_password>
			while(UART_RecieveByte()!=result_READY){};
    2c34:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    2c38:	98 2f       	mov	r25, r24
    2c3a:	80 91 11 01 	lds	r24, 0x0111
    2c3e:	98 17       	cp	r25, r24
    2c40:	c9 f7       	brne	.-14     	; 0x2c34 <main+0x5cc>
			UART_SendByte(result_READY);
    2c42:	80 91 11 01 	lds	r24, 0x0111
    2c46:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
			result=UART_RecieveByte();
    2c4a:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    2c4e:	8a af       	std	Y+58, r24	; 0x3a
			retry++;
    2c50:	89 ad       	ldd	r24, Y+57	; 0x39
    2c52:	8f 5f       	subi	r24, 0xFF	; 255
    2c54:	89 af       	std	Y+57, r24	; 0x39
			}while(result==unmatched);
    2c56:	90 91 0f 01 	lds	r25, 0x010F
    2c5a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c5c:	89 17       	cp	r24, r25
    2c5e:	11 f2       	breq	.-124    	; 0x2be4 <main+0x57c>

			if(result==matched){
    2c60:	90 91 0e 01 	lds	r25, 0x010E
    2c64:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c66:	89 17       	cp	r24, r25
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <main+0x604>
    2c6a:	56 c0       	rjmp	.+172    	; 0x2d18 <main+0x6b0>
				LCD_clearScreen();
    2c6c:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
				do{
					LCD_displayStringRowColumn(0,0,"ENTER NEW PASS");
    2c70:	26 e6       	ldi	r18, 0x66	; 102
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	a9 01       	movw	r20, r18
    2c7a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
					LCD_goToRowColumn(1,0);
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_goToRowColumn>
					get_password(pass_1);
    2c86:	ce 01       	movw	r24, r28
    2c88:	8b 5b       	subi	r24, 0xBB	; 187
    2c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <get_password>
					LCD_clearScreen();
    2c90:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"reenter pass");
    2c94:	25 e7       	ldi	r18, 0x75	; 117
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	a9 01       	movw	r20, r18
    2c9e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
					LCD_goToRowColumn(1,0);
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_goToRowColumn>
					get_password(pass_2);
    2caa:	ce 01       	movw	r24, r28
    2cac:	86 5b       	subi	r24, 0xB6	; 182
    2cae:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb0:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <get_password>
					for(i=0;i<5;i++){
    2cb4:	1c ae       	std	Y+60, r1	; 0x3c
    2cb6:	1a c0       	rjmp	.+52     	; 0x2cec <main+0x684>
						if(pass_1[i]!=pass_2[i])
    2cb8:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	8b 5b       	subi	r24, 0xBB	; 187
    2cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	e2 0f       	add	r30, r18
    2cc8:	f3 1f       	adc	r31, r19
    2cca:	40 81       	ld	r20, Z
    2ccc:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cce:	28 2f       	mov	r18, r24
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	86 5b       	subi	r24, 0xB6	; 182
    2cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd8:	fc 01       	movw	r30, r24
    2cda:	e2 0f       	add	r30, r18
    2cdc:	f3 1f       	adc	r31, r19
    2cde:	80 81       	ld	r24, Z
    2ce0:	48 17       	cp	r20, r24
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <main+0x67e>
							match=0;
    2ce4:	1d ae       	std	Y+61, r1	; 0x3d
					get_password(pass_1);
					LCD_clearScreen();
					LCD_displayStringRowColumn(0,0,"reenter pass");
					LCD_goToRowColumn(1,0);
					get_password(pass_2);
					for(i=0;i<5;i++){
    2ce6:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ce8:	8f 5f       	subi	r24, 0xFF	; 255
    2cea:	8c af       	std	Y+60, r24	; 0x3c
    2cec:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cee:	85 30       	cpi	r24, 0x05	; 5
    2cf0:	18 f3       	brcs	.-58     	; 0x2cb8 <main+0x650>
						if(pass_1[i]!=pass_2[i])
							match=0;
					}
				}while(match==0);
    2cf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cf4:	88 23       	and	r24, r24
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <main+0x692>
    2cf8:	bb cf       	rjmp	.-138    	; 0x2c70 <main+0x608>
				send_password(pass_1);
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	8b 5b       	subi	r24, 0xBB	; 187
    2cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2d00:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <send_password>
				LCD_clearScreen();
    2d04:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Password saved");
    2d08:	21 e9       	ldi	r18, 0x91	; 145
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	a9 01       	movw	r20, r18
    2d12:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
    2d16:	1a c0       	rjmp	.+52     	; 0x2d4c <main+0x6e4>

			}
			else if(result==thief){
    2d18:	90 91 10 01 	lds	r25, 0x0110
    2d1c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d1e:	89 17       	cp	r24, r25
    2d20:	a9 f4       	brne	.+42     	; 0x2d4c <main+0x6e4>
				LCD_clearScreen();
    2d22:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Emsek 7aramy");
    2d26:	2f ec       	ldi	r18, 0xCF	; 207
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	a9 01       	movw	r20, r18
    2d30:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Calling 122");
    2d34:	2c ed       	ldi	r18, 0xDC	; 220
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	a9 01       	movw	r20, r18
    2d3e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
				Timer_count(12);
    2d42:	8c e0       	ldi	r24, 0x0C	; 12
    2d44:	0e 94 34 17 	call	0x2e68	; 0x2e68 <Timer_count>
				Timer_finish=0;
    2d48:	10 92 1d 01 	sts	0x011D, r1
			}
			retry=0;
    2d4c:	19 ae       	std	Y+57, r1	; 0x39
    2d4e:	c1 ce       	rjmp	.-638    	; 0x2ad2 <main+0x46a>
		}
		else if(option=='-'){
    2d50:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d52:	8d 32       	cpi	r24, 0x2D	; 45
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <main+0x6f0>
    2d56:	bd ce       	rjmp	.-646    	; 0x2ad2 <main+0x46a>

			do{LCD_clearScreen();
    2d58:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter password");
    2d5c:	20 ec       	ldi	r18, 0xC0	; 192
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	a9 01       	movw	r20, r18
    2d66:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,0);
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_goToRowColumn>
			get_password(pass_1);
    2d72:	ce 01       	movw	r24, r28
    2d74:	8b 5b       	subi	r24, 0xBB	; 187
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <get_password>
			if(retry==0){
    2d7c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d7e:	88 23       	and	r24, r24
    2d80:	71 f4       	brne	.+28     	; 0x2d9e <main+0x736>
				UART_SendByte(status_READY);
    2d82:	80 91 0d 01 	lds	r24, 0x010D
    2d86:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
			while(UART_RecieveByte()!=status_READY){};
    2d8a:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    2d8e:	98 2f       	mov	r25, r24
    2d90:	80 91 0d 01 	lds	r24, 0x010D
    2d94:	98 17       	cp	r25, r24
    2d96:	c9 f7       	brne	.-14     	; 0x2d8a <main+0x722>
			UART_SendByte(option);
    2d98:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d9a:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
			}

			send_password(pass_1);
    2d9e:	ce 01       	movw	r24, r28
    2da0:	8b 5b       	subi	r24, 0xBB	; 187
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <send_password>
			while(UART_RecieveByte()!=result_READY){};
    2da8:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    2dac:	98 2f       	mov	r25, r24
    2dae:	80 91 11 01 	lds	r24, 0x0111
    2db2:	98 17       	cp	r25, r24
    2db4:	c9 f7       	brne	.-14     	; 0x2da8 <main+0x740>
			UART_SendByte(result_READY);
    2db6:	80 91 11 01 	lds	r24, 0x0111
    2dba:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
			result=UART_RecieveByte();
    2dbe:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    2dc2:	8a af       	std	Y+58, r24	; 0x3a
			retry++;
    2dc4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	89 af       	std	Y+57, r24	; 0x39
			}while(result==unmatched);
    2dca:	90 91 0f 01 	lds	r25, 0x010F
    2dce:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dd0:	89 17       	cp	r24, r25
    2dd2:	11 f2       	breq	.-124    	; 0x2d58 <main+0x6f0>

			if(result==matched){
    2dd4:	90 91 0e 01 	lds	r25, 0x010E
    2dd8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dda:	89 17       	cp	r24, r25
    2ddc:	e9 f4       	brne	.+58     	; 0x2e18 <main+0x7b0>
				LCD_clearScreen();
    2dde:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Door unlocking");
    2de2:	28 ee       	ldi	r18, 0xE8	; 232
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	a9 01       	movw	r20, r18
    2dec:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
				Timer_count(2);
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	0e 94 34 17 	call	0x2e68	; 0x2e68 <Timer_count>
				Timer_finish=0;
    2df6:	10 92 1d 01 	sts	0x011D, r1
				LCD_clearScreen();
    2dfa:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Door locking");
    2dfe:	27 ef       	ldi	r18, 0xF7	; 247
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	a9 01       	movw	r20, r18
    2e08:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
				Timer_count(2);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	0e 94 34 17 	call	0x2e68	; 0x2e68 <Timer_count>
				Timer_finish=0;
    2e12:	10 92 1d 01 	sts	0x011D, r1
    2e16:	1a c0       	rjmp	.+52     	; 0x2e4c <main+0x7e4>
			}
			else if(result==thief){
    2e18:	90 91 10 01 	lds	r25, 0x0110
    2e1c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e1e:	89 17       	cp	r24, r25
    2e20:	a9 f4       	brne	.+42     	; 0x2e4c <main+0x7e4>
				LCD_clearScreen();
    2e22:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Emsek 7aramy");
    2e26:	2f ec       	ldi	r18, 0xCF	; 207
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	a9 01       	movw	r20, r18
    2e30:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Calling 122");
    2e34:	2c ed       	ldi	r18, 0xDC	; 220
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	60 e0       	ldi	r22, 0x00	; 0
    2e3c:	a9 01       	movw	r20, r18
    2e3e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_displayStringRowColumn>
				Timer_count(12);
    2e42:	8c e0       	ldi	r24, 0x0C	; 12
    2e44:	0e 94 34 17 	call	0x2e68	; 0x2e68 <Timer_count>
				Timer_finish=0;
    2e48:	10 92 1d 01 	sts	0x011D, r1
			}
			retry=0;
    2e4c:	19 ae       	std	Y+57, r1	; 0x39
    2e4e:	41 ce       	rjmp	.-894    	; 0x2ad2 <main+0x46a>

00002e50 <Timer_add_count>:

/*--------------------------------------------Functions----------------------------------------*/



void Timer_add_count(void){
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
	count++;
    2e58:	80 91 1c 01 	lds	r24, 0x011C
    2e5c:	8f 5f       	subi	r24, 0xFF	; 255
    2e5e:	80 93 1c 01 	sts	0x011C, r24
}
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <Timer_count>:


void Timer_count(uint8 time_5seconds){
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	0f 92       	push	r0
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	89 83       	std	Y+1, r24	; 0x01
	count=0;
    2e74:	10 92 1c 01 	sts	0x011C, r1
	TIMER_Start(1,1024);
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	74 e0       	ldi	r23, 0x04	; 4
    2e7e:	0e 94 c8 09 	call	0x1390	; 0x1390 <TIMER_Start>
	while(count!= time_5seconds){};
    2e82:	90 91 1c 01 	lds	r25, 0x011C
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	98 17       	cp	r25, r24
    2e8a:	d9 f7       	brne	.-10     	; 0x2e82 <Timer_count+0x1a>
	Timer_finish=1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	80 93 1d 01 	sts	0x011D, r24
	TIMER_Stop(1);
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	0e 94 b5 0b 	call	0x176a	; 0x176a <TIMER_Stop>
}
    2e98:	0f 90       	pop	r0
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <get_password>:

void get_password(uint8* str){
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	61 97       	sbiw	r28, 0x11	; 17
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	99 8b       	std	Y+17, r25	; 0x11
    2eba:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0;
    2ebc:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<5;i++){
    2ebe:	1f 86       	std	Y+15, r1	; 0x0f
    2ec0:	84 c0       	rjmp	.+264    	; 0x2fca <get_password+0x12a>

		str[i]=KeyPad_getPressedKey();
    2ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	88 89       	ldd	r24, Y+16	; 0x10
    2eca:	99 89       	ldd	r25, Y+17	; 0x11
    2ecc:	8c 01       	movw	r16, r24
    2ece:	02 0f       	add	r16, r18
    2ed0:	13 1f       	adc	r17, r19
    2ed2:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <KeyPad_getPressedKey>
    2ed6:	f8 01       	movw	r30, r16
    2ed8:	80 83       	st	Z, r24
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a8 ec       	ldi	r26, 0xC8	; 200
    2ee0:	b3 e4       	ldi	r27, 0x43	; 67
    2ee2:	8b 87       	std	Y+11, r24	; 0x0b
    2ee4:	9c 87       	std	Y+12, r25	; 0x0c
    2ee6:	ad 87       	std	Y+13, r26	; 0x0d
    2ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a ef       	ldi	r20, 0xFA	; 250
    2ef8:	54 e4       	ldi	r21, 0x44	; 68
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8f 83       	std	Y+7, r24	; 0x07
    2f04:	98 87       	std	Y+8, r25	; 0x08
    2f06:	a9 87       	std	Y+9, r26	; 0x09
    2f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0c:	78 85       	ldd	r23, Y+8	; 0x08
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <get_password+0x8c>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <get_password+0x10a>
	else if (__tmp > 65535)
    2f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2e:	78 85       	ldd	r23, Y+8	; 0x08
    2f30:	89 85       	ldd	r24, Y+9	; 0x09
    2f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3f ef       	ldi	r19, 0xFF	; 255
    2f38:	4f e7       	ldi	r20, 0x7F	; 127
    2f3a:	57 e4       	ldi	r21, 0x47	; 71
    2f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f40:	18 16       	cp	r1, r24
    2f42:	4c f5       	brge	.+82     	; 0x2f96 <get_password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e2       	ldi	r20, 0x20	; 32
    2f52:	51 e4       	ldi	r21, 0x41	; 65
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <get_password+0xec>
    2f6e:	88 ec       	ldi	r24, 0xC8	; 200
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9c 83       	std	Y+4, r25	; 0x04
    2f74:	8b 83       	std	Y+3, r24	; 0x03
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <get_password+0xda>
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	69 f7       	brne	.-38     	; 0x2f6e <get_password+0xce>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <get_password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	78 85       	ldd	r23, Y+8	; 0x08
    2f9a:	89 85       	ldd	r24, Y+9	; 0x09
    2f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9e 83       	std	Y+6, r25	; 0x06
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <get_password+0x116>
    2fba:	9a 83       	std	Y+2, r25	; 0x02
    2fbc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		LCD_displayCharacter('*');
    2fbe:	8a e2       	ldi	r24, 0x2A	; 42
    2fc0:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_displayCharacter>
	TIMER_Stop(1);
}

void get_password(uint8* str){
	uint8 i=0;
	for(i=0;i<5;i++){
    2fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	8f 87       	std	Y+15, r24	; 0x0f
    2fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fcc:	85 30       	cpi	r24, 0x05	; 5
    2fce:	08 f4       	brcc	.+2      	; 0x2fd2 <get_password+0x132>
    2fd0:	78 cf       	rjmp	.-272    	; 0x2ec2 <get_password+0x22>
		LCD_displayCharacter('*');

	}


}
    2fd2:	61 96       	adiw	r28, 0x11	; 17
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

00002fe8 <send_password>:

void send_password(uint8* str){
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	61 97       	sbiw	r28, 0x11	; 17
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	99 8b       	std	Y+17, r25	; 0x11
    2ffe:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0;
    3000:	1f 86       	std	Y+15, r1	; 0x0f
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a8 e4       	ldi	r26, 0x48	; 72
    3008:	b2 e4       	ldi	r27, 0x42	; 66
    300a:	8b 87       	std	Y+11, r24	; 0x0b
    300c:	9c 87       	std	Y+12, r25	; 0x0c
    300e:	ad 87       	std	Y+13, r26	; 0x0d
    3010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3012:	6b 85       	ldd	r22, Y+11	; 0x0b
    3014:	7c 85       	ldd	r23, Y+12	; 0x0c
    3016:	8d 85       	ldd	r24, Y+13	; 0x0d
    3018:	9e 85       	ldd	r25, Y+14	; 0x0e
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a ef       	ldi	r20, 0xFA	; 250
    3020:	54 e4       	ldi	r21, 0x44	; 68
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	8f 83       	std	Y+7, r24	; 0x07
    302c:	98 87       	std	Y+8, r25	; 0x08
    302e:	a9 87       	std	Y+9, r26	; 0x09
    3030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <send_password+0x6c>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <send_password+0xea>
	else if (__tmp > 65535)
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	4c f5       	brge	.+82     	; 0x30be <send_password+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306c:	6b 85       	ldd	r22, Y+11	; 0x0b
    306e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3070:	8d 85       	ldd	r24, Y+13	; 0x0d
    3072:	9e 85       	ldd	r25, Y+14	; 0x0e
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <send_password+0xcc>
    3096:	88 ec       	ldi	r24, 0xC8	; 200
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	9c 83       	std	Y+4, r25	; 0x04
    309c:	8b 83       	std	Y+3, r24	; 0x03
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <send_password+0xba>
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	69 f7       	brne	.-38     	; 0x3096 <send_password+0xae>
    30bc:	14 c0       	rjmp	.+40     	; 0x30e6 <send_password+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30be:	6f 81       	ldd	r22, Y+7	; 0x07
    30c0:	78 85       	ldd	r23, Y+8	; 0x08
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9e 83       	std	Y+6, r25	; 0x06
    30d0:	8d 83       	std	Y+5, r24	; 0x05
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <send_password+0xf6>
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	UART_SendByte(READY);
    30e6:	80 91 0c 01 	lds	r24, 0x010C
    30ea:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
	for(i=0;i<5;i++){
    30ee:	1f 86       	std	Y+15, r1	; 0x0f
    30f0:	15 c0       	rjmp	.+42     	; 0x311c <send_password+0x134>
		while(UART_RecieveByte()!=READY){};
    30f2:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    30f6:	98 2f       	mov	r25, r24
    30f8:	80 91 0c 01 	lds	r24, 0x010C
    30fc:	98 17       	cp	r25, r24
    30fe:	c9 f7       	brne	.-14     	; 0x30f2 <send_password+0x10a>
		UART_SendByte(str[i]);
    3100:	8f 85       	ldd	r24, Y+15	; 0x0f
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	88 89       	ldd	r24, Y+16	; 0x10
    3108:	99 89       	ldd	r25, Y+17	; 0x11
    310a:	fc 01       	movw	r30, r24
    310c:	e2 0f       	add	r30, r18
    310e:	f3 1f       	adc	r31, r19
    3110:	80 81       	ld	r24, Z
    3112:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>

void send_password(uint8* str){
	uint8 i=0;
	_delay_ms(50);
	UART_SendByte(READY);
	for(i=0;i<5;i++){
    3116:	8f 85       	ldd	r24, Y+15	; 0x0f
    3118:	8f 5f       	subi	r24, 0xFF	; 255
    311a:	8f 87       	std	Y+15, r24	; 0x0f
    311c:	8f 85       	ldd	r24, Y+15	; 0x0f
    311e:	85 30       	cpi	r24, 0x05	; 5
    3120:	40 f3       	brcs	.-48     	; 0x30f2 <send_password+0x10a>
		while(UART_RecieveByte()!=READY){};
		UART_SendByte(str[i]);

	}
}
    3122:	61 96       	adiw	r28, 0x11	; 17
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <uart_init>:

#include "uart.h"


void uart_init(const UART_config * cofig_Ptr)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	00 d0       	rcall	.+0      	; 0x313a <uart_init+0x6>
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= (1 << RXEN) | (1 << TXEN); // enable Tx, Rx
    3142:	aa e2       	ldi	r26, 0x2A	; 42
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	ea e2       	ldi	r30, 0x2A	; 42
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	88 61       	ori	r24, 0x18	; 24
    314e:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) ;
    3150:	a0 e4       	ldi	r26, 0x40	; 64
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e0 e4       	ldi	r30, 0x40	; 64
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	80 68       	ori	r24, 0x80	; 128
    315c:	8c 93       	st	X, r24

	/*double speed*/
	UCSRA = (UCSRA & 0xFD) | (double_speed << 1); // double speed
    315e:	ab e2       	ldi	r26, 0x2B	; 43
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	eb e2       	ldi	r30, 0x2B	; 43
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	82 60       	ori	r24, 0x02	; 2
    316a:	8c 93       	st	X, r24

	//UCSRC |=  (1 << UCSZ1) | (1 << UCSZ0); // 8 bit data
	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
    316c:	a0 e4       	ldi	r26, 0x40	; 64
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	e0 e4       	ldi	r30, 0x40	; 64
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	28 2f       	mov	r18, r24
    3178:	29 7f       	andi	r18, 0xF9	; 249
    317a:	e9 81       	ldd	r30, Y+1	; 0x01
    317c:	fa 81       	ldd	r31, Y+2	; 0x02
    317e:	80 81       	ld	r24, Z
    3180:	88 2f       	mov	r24, r24
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	83 70       	andi	r24, 0x03	; 3
    3186:	90 70       	andi	r25, 0x00	; 0
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	82 2b       	or	r24, r18
    318e:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
    3190:	aa e2       	ldi	r26, 0x2A	; 42
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	ea e2       	ldi	r30, 0x2A	; 42
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	98 2f       	mov	r25, r24
    319c:	9b 7f       	andi	r25, 0xFB	; 251
    319e:	e9 81       	ldd	r30, Y+1	; 0x01
    31a0:	fa 81       	ldd	r31, Y+2	; 0x02
    31a2:	80 81       	ld	r24, Z
    31a4:	84 70       	andi	r24, 0x04	; 4
    31a6:	89 2b       	or	r24, r25
    31a8:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
    31aa:	a0 e4       	ldi	r26, 0x40	; 64
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e0 e4       	ldi	r30, 0x40	; 64
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	28 2f       	mov	r18, r24
    31b6:	2f 7c       	andi	r18, 0xCF	; 207
    31b8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ba:	fa 81       	ldd	r31, Y+2	; 0x02
    31bc:	81 81       	ldd	r24, Z+1	; 0x01
    31be:	88 2f       	mov	r24, r24
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	82 95       	swap	r24
    31c4:	92 95       	swap	r25
    31c6:	90 7f       	andi	r25, 0xF0	; 240
    31c8:	98 27       	eor	r25, r24
    31ca:	80 7f       	andi	r24, 0xF0	; 240
    31cc:	98 27       	eor	r25, r24
    31ce:	82 2b       	or	r24, r18
    31d0:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
    31d2:	a0 e4       	ldi	r26, 0x40	; 64
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e0 e4       	ldi	r30, 0x40	; 64
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	28 2f       	mov	r18, r24
    31de:	27 7f       	andi	r18, 0xF7	; 247
    31e0:	e9 81       	ldd	r30, Y+1	; 0x01
    31e2:	fa 81       	ldd	r31, Y+2	; 0x02
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	88 2f       	mov	r24, r24
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	88 0f       	add	r24, r24
    31ec:	99 1f       	adc	r25, r25
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	82 2b       	or	r24, r18
    31f8:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (mode_bit << 6);
    31fa:	a0 e4       	ldi	r26, 0x40	; 64
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e0 e4       	ldi	r30, 0x40	; 64
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8f 7b       	andi	r24, 0xBF	; 191
    3206:	8c 93       	st	X, r24

	UBRRL = BAUD_PRESCALE;
    3208:	e9 e2       	ldi	r30, 0x29	; 41
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	87 e6       	ldi	r24, 0x67	; 103
    320e:	80 83       	st	Z, r24
	UBRRH = BAUD_PRESCALE >> 8;
    3210:	e0 e4       	ldi	r30, 0x40	; 64
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	10 82       	st	Z, r1
}
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <UART_SendByte>:


void UART_SendByte(uint8 data)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	0f 92       	push	r0
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
    322c:	eb e2       	ldi	r30, 0x2B	; 43
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	80 72       	andi	r24, 0x20	; 32
    3238:	90 70       	andi	r25, 0x00	; 0
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	b9 f3       	breq	.-18     	; 0x322c <UART_SendByte+0xc>
	UDR = data;
    323e:	ec e2       	ldi	r30, 0x2C	; 44
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	80 83       	st	Z, r24
}
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <UART_RecieveByte>:

uint8 UART_RecieveByte(void)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
    3256:	eb e2       	ldi	r30, 0x2B	; 43
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 81       	ld	r24, Z
    325c:	88 23       	and	r24, r24
    325e:	dc f7       	brge	.-10     	; 0x3256 <UART_RecieveByte+0x8>
	return UDR;
    3260:	ec e2       	ldi	r30, 0x2C	; 44
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
}
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <uart_sendString>:

void uart_sendString(const uint8 *str)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	00 d0       	rcall	.+0      	; 0x3272 <uart_sendString+0x6>
    3272:	0f 92       	push	r0
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	9b 83       	std	Y+3, r25	; 0x03
    327a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    327c:	19 82       	std	Y+1, r1	; 0x01
    327e:	0e c0       	rjmp	.+28     	; 0x329c <uart_sendString+0x30>
	while (str[i] != '\0')
	{
		UART_SendByte(str[i]);
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	9b 81       	ldd	r25, Y+3	; 0x03
    328a:	fc 01       	movw	r30, r24
    328c:	e2 0f       	add	r30, r18
    328e:	f3 1f       	adc	r31, r19
    3290:	80 81       	ld	r24, Z
    3292:	0e 94 10 19 	call	0x3220	; 0x3220 <UART_SendByte>
		i++;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	8f 5f       	subi	r24, 0xFF	; 255
    329a:	89 83       	std	Y+1, r24	; 0x01
}

void uart_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	9b 81       	ldd	r25, Y+3	; 0x03
    32a6:	fc 01       	movw	r30, r24
    32a8:	e2 0f       	add	r30, r18
    32aa:	f3 1f       	adc	r31, r19
    32ac:	80 81       	ld	r24, Z
    32ae:	88 23       	and	r24, r24
    32b0:	39 f7       	brne	.-50     	; 0x3280 <uart_sendString+0x14>
	{
		UART_SendByte(str[i]);
		i++;
	}
}
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <uart_recieveString>:

void uart_recieveString(uint8 *str)
{
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <uart_recieveString+0xa>
    32c8:	0f 92       	push	r0
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	9b 83       	std	Y+3, r25	; 0x03
    32d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32d2:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_RecieveByte();
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	9b 81       	ldd	r25, Y+3	; 0x03
    32de:	8c 01       	movw	r16, r24
    32e0:	02 0f       	add	r16, r18
    32e2:	13 1f       	adc	r17, r19
    32e4:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    32e8:	f8 01       	movw	r30, r16
    32ea:	80 83       	st	Z, r24
    32ec:	0f c0       	rjmp	.+30     	; 0x330c <uart_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	8f 5f       	subi	r24, 0xFF	; 255
    32f2:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_RecieveByte();
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	8a 81       	ldd	r24, Y+2	; 0x02
    32fc:	9b 81       	ldd	r25, Y+3	; 0x03
    32fe:	8c 01       	movw	r16, r24
    3300:	02 0f       	add	r16, r18
    3302:	13 1f       	adc	r17, r19
    3304:	0e 94 27 19 	call	0x324e	; 0x324e <UART_RecieveByte>
    3308:	f8 01       	movw	r30, r16
    330a:	80 83       	st	Z, r24

void uart_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_RecieveByte();
	while (str[i] != '#')
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	28 2f       	mov	r18, r24
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	8a 81       	ldd	r24, Y+2	; 0x02
    3314:	9b 81       	ldd	r25, Y+3	; 0x03
    3316:	fc 01       	movw	r30, r24
    3318:	e2 0f       	add	r30, r18
    331a:	f3 1f       	adc	r31, r19
    331c:	80 81       	ld	r24, Z
    331e:	83 32       	cpi	r24, 0x23	; 35
    3320:	31 f7       	brne	.-52     	; 0x32ee <uart_recieveString+0x30>
	{
		i++;
		str[i] = UART_RecieveByte();
	}
	str[i] = '\0';
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	9b 81       	ldd	r25, Y+3	; 0x03
    332c:	fc 01       	movw	r30, r24
    332e:	e2 0f       	add	r30, r18
    3330:	f3 1f       	adc	r31, r19
    3332:	10 82       	st	Z, r1
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	08 95       	ret

00003344 <__prologue_saves__>:
    3344:	2f 92       	push	r2
    3346:	3f 92       	push	r3
    3348:	4f 92       	push	r4
    334a:	5f 92       	push	r5
    334c:	6f 92       	push	r6
    334e:	7f 92       	push	r7
    3350:	8f 92       	push	r8
    3352:	9f 92       	push	r9
    3354:	af 92       	push	r10
    3356:	bf 92       	push	r11
    3358:	cf 92       	push	r12
    335a:	df 92       	push	r13
    335c:	ef 92       	push	r14
    335e:	ff 92       	push	r15
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	ca 1b       	sub	r28, r26
    336e:	db 0b       	sbc	r29, r27
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	09 94       	ijmp

0000337c <__epilogue_restores__>:
    337c:	2a 88       	ldd	r2, Y+18	; 0x12
    337e:	39 88       	ldd	r3, Y+17	; 0x11
    3380:	48 88       	ldd	r4, Y+16	; 0x10
    3382:	5f 84       	ldd	r5, Y+15	; 0x0f
    3384:	6e 84       	ldd	r6, Y+14	; 0x0e
    3386:	7d 84       	ldd	r7, Y+13	; 0x0d
    3388:	8c 84       	ldd	r8, Y+12	; 0x0c
    338a:	9b 84       	ldd	r9, Y+11	; 0x0b
    338c:	aa 84       	ldd	r10, Y+10	; 0x0a
    338e:	b9 84       	ldd	r11, Y+9	; 0x09
    3390:	c8 84       	ldd	r12, Y+8	; 0x08
    3392:	df 80       	ldd	r13, Y+7	; 0x07
    3394:	ee 80       	ldd	r14, Y+6	; 0x06
    3396:	fd 80       	ldd	r15, Y+5	; 0x05
    3398:	0c 81       	ldd	r16, Y+4	; 0x04
    339a:	1b 81       	ldd	r17, Y+3	; 0x03
    339c:	aa 81       	ldd	r26, Y+2	; 0x02
    339e:	b9 81       	ldd	r27, Y+1	; 0x01
    33a0:	ce 0f       	add	r28, r30
    33a2:	d1 1d       	adc	r29, r1
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	ed 01       	movw	r28, r26
    33b0:	08 95       	ret

000033b2 <itoa>:
    33b2:	fb 01       	movw	r30, r22
    33b4:	9f 01       	movw	r18, r30
    33b6:	e8 94       	clt
    33b8:	42 30       	cpi	r20, 0x02	; 2
    33ba:	c4 f0       	brlt	.+48     	; 0x33ec <itoa+0x3a>
    33bc:	45 32       	cpi	r20, 0x25	; 37
    33be:	b4 f4       	brge	.+44     	; 0x33ec <itoa+0x3a>
    33c0:	4a 30       	cpi	r20, 0x0A	; 10
    33c2:	29 f4       	brne	.+10     	; 0x33ce <itoa+0x1c>
    33c4:	97 fb       	bst	r25, 7
    33c6:	1e f4       	brtc	.+6      	; 0x33ce <itoa+0x1c>
    33c8:	90 95       	com	r25
    33ca:	81 95       	neg	r24
    33cc:	9f 4f       	sbci	r25, 0xFF	; 255
    33ce:	64 2f       	mov	r22, r20
    33d0:	77 27       	eor	r23, r23
    33d2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__udivmodhi4>
    33d6:	80 5d       	subi	r24, 0xD0	; 208
    33d8:	8a 33       	cpi	r24, 0x3A	; 58
    33da:	0c f0       	brlt	.+2      	; 0x33de <itoa+0x2c>
    33dc:	89 5d       	subi	r24, 0xD9	; 217
    33de:	81 93       	st	Z+, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	a1 f7       	brne	.-24     	; 0x33ce <itoa+0x1c>
    33e6:	16 f4       	brtc	.+4      	; 0x33ec <itoa+0x3a>
    33e8:	5d e2       	ldi	r21, 0x2D	; 45
    33ea:	51 93       	st	Z+, r21
    33ec:	10 82       	st	Z, r1
    33ee:	c9 01       	movw	r24, r18
    33f0:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <strrev>

000033f4 <strrev>:
    33f4:	dc 01       	movw	r26, r24
    33f6:	fc 01       	movw	r30, r24
    33f8:	67 2f       	mov	r22, r23
    33fa:	71 91       	ld	r23, Z+
    33fc:	77 23       	and	r23, r23
    33fe:	e1 f7       	brne	.-8      	; 0x33f8 <strrev+0x4>
    3400:	32 97       	sbiw	r30, 0x02	; 2
    3402:	04 c0       	rjmp	.+8      	; 0x340c <strrev+0x18>
    3404:	7c 91       	ld	r23, X
    3406:	6d 93       	st	X+, r22
    3408:	70 83       	st	Z, r23
    340a:	62 91       	ld	r22, -Z
    340c:	ae 17       	cp	r26, r30
    340e:	bf 07       	cpc	r27, r31
    3410:	c8 f3       	brcs	.-14     	; 0x3404 <strrev+0x10>
    3412:	08 95       	ret

00003414 <__udivmodhi4>:
    3414:	aa 1b       	sub	r26, r26
    3416:	bb 1b       	sub	r27, r27
    3418:	51 e1       	ldi	r21, 0x11	; 17
    341a:	07 c0       	rjmp	.+14     	; 0x342a <__udivmodhi4_ep>

0000341c <__udivmodhi4_loop>:
    341c:	aa 1f       	adc	r26, r26
    341e:	bb 1f       	adc	r27, r27
    3420:	a6 17       	cp	r26, r22
    3422:	b7 07       	cpc	r27, r23
    3424:	10 f0       	brcs	.+4      	; 0x342a <__udivmodhi4_ep>
    3426:	a6 1b       	sub	r26, r22
    3428:	b7 0b       	sbc	r27, r23

0000342a <__udivmodhi4_ep>:
    342a:	88 1f       	adc	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	5a 95       	dec	r21
    3430:	a9 f7       	brne	.-22     	; 0x341c <__udivmodhi4_loop>
    3432:	80 95       	com	r24
    3434:	90 95       	com	r25
    3436:	bc 01       	movw	r22, r24
    3438:	cd 01       	movw	r24, r26
    343a:	08 95       	ret

0000343c <_exit>:
    343c:	f8 94       	cli

0000343e <__stop_program>:
    343e:	ff cf       	rjmp	.-2      	; 0x343e <__stop_program>
