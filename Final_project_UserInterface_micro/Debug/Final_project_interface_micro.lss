
Final_project_interface_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000335c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000335c  000033f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800094  00800094  00003424  2**0
                  ALLOC
  3 .stab         0000348c  00000000  00000000  00003424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ffd  00000000  00000000  000068b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000078ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000097a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a691  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b440  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bffb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_3>
      10:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__vector_8>
      24:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <main>
      8a:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:
 */

#include "I2C.h"
#include "EEPROM.h"

void EEPROM_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
     b4e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TWI_init>
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <EEPROM_writeByte+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <EEPROM_writeByte+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     b6a:	0e 94 66 06 	call	0xccc	; 0xccc <TWI_start>
	if(TWI_getStatus() != TW_START){
     b6e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     b72:	88 30       	cpi	r24, 0x08	; 8
     b74:	11 f0       	breq	.+4      	; 0xb7a <EEPROM_writeByte+0x22>
		return 0;
     b76:	1c 82       	std	Y+4, r1	; 0x04
     b78:	28 c0       	rjmp	.+80     	; 0xbca <EEPROM_writeByte+0x72>
	}

	TWI_write((uint8)(0xA0|((u16addr & 0x0700)>>7)));
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	80 70       	andi	r24, 0x00	; 0
     b80:	97 70       	andi	r25, 0x07	; 7
     b82:	88 0f       	add	r24, r24
     b84:	89 2f       	mov	r24, r25
     b86:	88 1f       	adc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	91 95       	neg	r25
     b8c:	80 6a       	ori	r24, 0xA0	; 160
     b8e:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     b92:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     b96:	88 31       	cpi	r24, 0x18	; 24
     b98:	11 f0       	breq	.+4      	; 0xb9e <EEPROM_writeByte+0x46>
		return 0;
     b9a:	1c 82       	std	Y+4, r1	; 0x04
     b9c:	16 c0       	rjmp	.+44     	; 0xbca <EEPROM_writeByte+0x72>

	 TWI_write((uint8)(u16addr));
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_write>
	 if (TWI_getStatus() != TW_MT_DATA_ACK)
     ba4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     ba8:	88 32       	cpi	r24, 0x28	; 40
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x58>
	        return 0;
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	0d c0       	rjmp	.+26     	; 0xbca <EEPROM_writeByte+0x72>

	 TWI_write(u8data);
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_write>
	 if (TWI_getStatus() != TW_MT_DATA_ACK)
     bb6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     bba:	88 32       	cpi	r24, 0x28	; 40
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <EEPROM_writeByte+0x6a>
		 return 0;
     bbe:	1c 82       	std	Y+4, r1	; 0x04
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <EEPROM_writeByte+0x72>

	 TWI_stop();
     bc2:	0e 94 80 06 	call	0xd00	; 0xd00 <TWI_stop>
	 return 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	8c 83       	std	Y+4, r24	; 0x04
     bca:	8c 81       	ldd	r24, Y+4	; 0x04




}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <EEPROM_readByte+0x6>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <EEPROM_readByte+0x8>
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	7c 83       	std	Y+4, r23	; 0x04
     bee:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
     bf0:	0e 94 66 06 	call	0xccc	; 0xccc <TWI_start>
	if(TWI_getStatus() != TW_START)
     bf4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     bf8:	88 30       	cpi	r24, 0x08	; 8
     bfa:	11 f0       	breq	.+4      	; 0xc00 <EEPROM_readByte+0x26>
		return 0;
     bfc:	1d 82       	std	Y+5, r1	; 0x05
     bfe:	44 c0       	rjmp	.+136    	; 0xc88 <EEPROM_readByte+0xae>

	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	80 70       	andi	r24, 0x00	; 0
     c06:	97 70       	andi	r25, 0x07	; 7
     c08:	88 0f       	add	r24, r24
     c0a:	89 2f       	mov	r24, r25
     c0c:	88 1f       	adc	r24, r24
     c0e:	99 0b       	sbc	r25, r25
     c10:	91 95       	neg	r25
     c12:	80 6a       	ori	r24, 0xA0	; 160
     c14:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c18:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     c1c:	88 31       	cpi	r24, 0x18	; 24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <EEPROM_readByte+0x4a>
		return 0;
     c20:	1d 82       	std	Y+5, r1	; 0x05
     c22:	32 c0       	rjmp	.+100    	; 0xc88 <EEPROM_readByte+0xae>

	TWI_write((uint8)(u16addr));
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     c2a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     c2e:	88 32       	cpi	r24, 0x28	; 40
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x5c>
		return 0;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	29 c0       	rjmp	.+82     	; 0xc88 <EEPROM_readByte+0xae>

	TWI_start();
     c36:	0e 94 66 06 	call	0xccc	; 0xccc <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
     c3a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     c3e:	80 31       	cpi	r24, 0x10	; 16
     c40:	11 f0       	breq	.+4      	; 0xc46 <EEPROM_readByte+0x6c>
	     return 0;
     c42:	1d 82       	std	Y+5, r1	; 0x05
     c44:	21 c0       	rjmp	.+66     	; 0xc88 <EEPROM_readByte+0xae>

	TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	80 70       	andi	r24, 0x00	; 0
     c4c:	97 70       	andi	r25, 0x07	; 7
     c4e:	88 0f       	add	r24, r24
     c50:	89 2f       	mov	r24, r25
     c52:	88 1f       	adc	r24, r24
     c54:	99 0b       	sbc	r25, r25
     c56:	91 95       	neg	r25
     c58:	81 6a       	ori	r24, 0xA1	; 161
     c5a:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c5e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	11 f0       	breq	.+4      	; 0xc6a <EEPROM_readByte+0x90>
		return 0;
     c66:	1d 82       	std	Y+5, r1	; 0x05
     c68:	0f c0       	rjmp	.+30     	; 0xc88 <EEPROM_readByte+0xae>

	*u8data = TWI_readWithNACK();
     c6a:	0e 94 cc 06 	call	0xd98	; 0xd98 <TWI_readWithNACK>
     c6e:	eb 81       	ldd	r30, Y+3	; 0x03
     c70:	fc 81       	ldd	r31, Y+4	; 0x04
     c72:	80 83       	st	Z, r24
	 if (TWI_getStatus() != TW_MR_DATA_NACK)
     c74:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <TWI_getStatus>
     c78:	88 35       	cpi	r24, 0x58	; 88
     c7a:	11 f0       	breq	.+4      	; 0xc80 <EEPROM_readByte+0xa6>
		 return 0;
     c7c:	1d 82       	std	Y+5, r1	; 0x05
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <EEPROM_readByte+0xae>

	 TWI_stop();
     c80:	0e 94 80 06 	call	0xd00	; 0xd00 <TWI_stop>
	 return 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	8d 81       	ldd	r24, Y+5	; 0x05



}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <TWI_init>:
 *      Author: Omar Hany
 */

#include "I2C.h"

void TWI_init(void){
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x02;
     ca2:	e0 e2       	ldi	r30, 0x20	; 32
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	80 83       	st	Z, r24
	TWSR = 0x00;
     caa:	e1 e2       	ldi	r30, 0x21	; 33
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	10 82       	st	Z, r1
	TWAR = 0b00000010; // my address = 0x01
     cb0:	e2 e2       	ldi	r30, 0x22	; 34
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWEN);
     cb8:	a6 e5       	ldi	r26, 0x56	; 86
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e6 e5       	ldi	r30, 0x56	; 86
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	84 60       	ori	r24, 0x04	; 4
     cc4:	8c 93       	st	X, r24
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <TWI_start>:
void TWI_start(void){
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWINT); //clear TWINT flag
     cd4:	a6 e5       	ldi	r26, 0x56	; 86
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e6 e5       	ldi	r30, 0x56	; 86
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 68       	ori	r24, 0x80	; 128
     ce0:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWSTA); // send the start bit
     ce2:	a6 e5       	ldi	r26, 0x56	; 86
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e6 e5       	ldi	r30, 0x56	; 86
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 62       	ori	r24, 0x20	; 32
     cee:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));//check the flag
     cf0:	e6 e5       	ldi	r30, 0x56	; 86
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 23       	and	r24, r24
     cf8:	dc f7       	brge	.-10     	; 0xcf0 <TWI_start+0x24>
}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <TWI_stop>:
void TWI_stop(void){
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWINT);//clear TWINT flag
     d08:	a6 e5       	ldi	r26, 0x56	; 86
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e5       	ldi	r30, 0x56	; 86
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWSTO); // send the stop bit
     d16:	a6 e5       	ldi	r26, 0x56	; 86
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e5       	ldi	r30, 0x56	; 86
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 61       	ori	r24, 0x10	; 16
     d22:	8c 93       	st	X, r24
}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <TWI_write>:
void TWI_write(uint8 data){
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	0f 92       	push	r0
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
     d36:	e3 e2       	ldi	r30, 0x23	; 35
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWINT);
     d3e:	a6 e5       	ldi	r26, 0x56	; 86
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e5       	ldi	r30, 0x56	; 86
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 68       	ori	r24, 0x80	; 128
     d4a:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     d4c:	e6 e5       	ldi	r30, 0x56	; 86
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 23       	and	r24, r24
     d54:	dc f7       	brge	.-10     	; 0xd4c <TWI_write+0x22>
}
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <TWI_readWithACK>:
uint8 TWI_readWithACK(void){
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWINT); //clear the flag
     d66:	a6 e5       	ldi	r26, 0x56	; 86
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e6 e5       	ldi	r30, 0x56	; 86
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEA); // enable sending ack after reading data
     d74:	a6 e5       	ldi	r26, 0x56	; 86
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e6 e5       	ldi	r30, 0x56	; 86
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 64       	ori	r24, 0x40	; 64
     d80:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     d82:	e6 e5       	ldi	r30, 0x56	; 86
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 23       	and	r24, r24
     d8a:	dc f7       	brge	.-10     	; 0xd82 <TWI_readWithACK+0x24>
	return TWDR;
     d8c:	e3 e2       	ldi	r30, 0x23	; 35
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(void){
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWINT); //clear the flag
     da0:	a6 e5       	ldi	r26, 0x56	; 86
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e6 e5       	ldi	r30, 0x56	; 86
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     dae:	e6 e5       	ldi	r30, 0x56	; 86
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	88 23       	and	r24, r24
     db6:	dc f7       	brge	.-10     	; 0xdae <TWI_readWithNACK+0x16>
	return TWDR;
     db8:	e3 e2       	ldi	r30, 0x23	; 35
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
}
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <TWI_getStatus>:
uint8 TWI_getStatus(void){
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	return (TWSR&0xF8);
     dcc:	e1 e2       	ldi	r30, 0x21	; 33
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	88 7f       	andi	r24, 0xF8	; 248
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <TIMER_Init>:

static volatile void(*timer0)(void)= NULL;
static volatile void(*timer1)(void)= NULL;
static volatile void(*timer2)(void)= NULL;

void TIMER_Init(struct TIMER_init *i){
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <TIMER_Init+0x6>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
	if(i->timer==0){
     de8:	e9 81       	ldd	r30, Y+1	; 0x01
     dea:	fa 81       	ldd	r31, Y+2	; 0x02
     dec:	80 81       	ld	r24, Z
     dee:	88 23       	and	r24, r24
     df0:	09 f0       	breq	.+2      	; 0xdf4 <TIMER_Init+0x1a>
     df2:	3b c1       	rjmp	.+630    	; 0x106a <TIMER_Init+0x290>
		SET_BIT(TCCR0,FOC0);
     df4:	a3 e5       	ldi	r26, 0x53	; 83
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e3 e5       	ldi	r30, 0x53	; 83
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 68       	ori	r24, 0x80	; 128
     e00:	8c 93       	st	X, r24
		OCR0 = i->comp_value;
     e02:	ac e5       	ldi	r26, 0x5C	; 92
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	fa 81       	ldd	r31, Y+2	; 0x02
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	95 81       	ldd	r25, Z+5	; 0x05
     e0e:	8c 93       	st	X, r24
		//timer mode
		if(i->mode==0){
     e10:	e9 81       	ldd	r30, Y+1	; 0x01
     e12:	fa 81       	ldd	r31, Y+2	; 0x02
     e14:	81 81       	ldd	r24, Z+1	; 0x01
     e16:	88 23       	and	r24, r24
     e18:	b1 f4       	brne	.+44     	; 0xe46 <TIMER_Init+0x6c>
			CLEAR_BIT(TCCR0,WGM01);
     e1a:	a3 e5       	ldi	r26, 0x53	; 83
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e3 e5       	ldi	r30, 0x53	; 83
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
     e28:	a3 e5       	ldi	r26, 0x53	; 83
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e3 e5       	ldi	r30, 0x53	; 83
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8f 7b       	andi	r24, 0xBF	; 191
     e34:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0);
     e36:	a9 e5       	ldi	r26, 0x59	; 89
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e9 e5       	ldi	r30, 0x59	; 89
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	81 60       	ori	r24, 0x01	; 1
     e42:	8c 93       	st	X, r24
     e44:	1a c0       	rjmp	.+52     	; 0xe7a <TIMER_Init+0xa0>

		}
		else if(i->mode==1){
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a9 f4       	brne	.+42     	; 0xe7a <TIMER_Init+0xa0>
			SET_BIT(TCCR0,WGM01);
     e50:	a3 e5       	ldi	r26, 0x53	; 83
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e3 e5       	ldi	r30, 0x53	; 83
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
     e5e:	a3 e5       	ldi	r26, 0x53	; 83
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e3 e5       	ldi	r30, 0x53	; 83
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
     e6c:	a9 e5       	ldi	r26, 0x59	; 89
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e9 e5       	ldi	r30, 0x59	; 89
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
     e7a:	e9 81       	ldd	r30, Y+1	; 0x01
     e7c:	fa 81       	ldd	r31, Y+2	; 0x02
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	b1 f4       	brne	.+44     	; 0xeb4 <TIMER_Init+0xda>
			CLEAR_BIT(TCCR0,CS02);
     e88:	a3 e5       	ldi	r26, 0x53	; 83
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e3 e5       	ldi	r30, 0x53	; 83
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8b 7f       	andi	r24, 0xFB	; 251
     e94:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     e96:	a3 e5       	ldi	r26, 0x53	; 83
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e3 e5       	ldi	r30, 0x53	; 83
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8d 7f       	andi	r24, 0xFD	; 253
     ea2:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     ea4:	a3 e5       	ldi	r26, 0x53	; 83
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e3 e5       	ldi	r30, 0x53	; 83
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	8c 93       	st	X, r24
     eb2:	75 c0       	rjmp	.+234    	; 0xf9e <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==8){
     eb4:	e9 81       	ldd	r30, Y+1	; 0x01
     eb6:	fa 81       	ldd	r31, Y+2	; 0x02
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	88 30       	cpi	r24, 0x08	; 8
     ebe:	91 05       	cpc	r25, r1
     ec0:	b1 f4       	brne	.+44     	; 0xeee <TIMER_Init+0x114>
			CLEAR_BIT(TCCR0,CS02);
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8b 7f       	andi	r24, 0xFB	; 251
     ece:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS00);
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
     eea:	8c 93       	st	X, r24
     eec:	58 c0       	rjmp	.+176    	; 0xf9e <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==64){
     eee:	e9 81       	ldd	r30, Y+1	; 0x01
     ef0:	fa 81       	ldd	r31, Y+2	; 0x02
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	80 34       	cpi	r24, 0x40	; 64
     ef8:	91 05       	cpc	r25, r1
     efa:	b1 f4       	brne	.+44     	; 0xf28 <TIMER_Init+0x14e>
			CLEAR_BIT(TCCR0,CS02);
     efc:	a3 e5       	ldi	r26, 0x53	; 83
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e3 e5       	ldi	r30, 0x53	; 83
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	82 60       	ori	r24, 0x02	; 2
     f16:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	8c 93       	st	X, r24
     f26:	3b c0       	rjmp	.+118    	; 0xf9e <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==256){
     f28:	e9 81       	ldd	r30, Y+1	; 0x01
     f2a:	fa 81       	ldd	r31, Y+2	; 0x02
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	80 30       	cpi	r24, 0x00	; 0
     f34:	92 07       	cpc	r25, r18
     f36:	b1 f4       	brne	.+44     	; 0xf64 <TIMER_Init+0x18a>
			SET_BIT(TCCR0,CS02);
     f38:	a3 e5       	ldi	r26, 0x53	; 83
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e3 e5       	ldi	r30, 0x53	; 83
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	84 60       	ori	r24, 0x04	; 4
     f44:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     f46:	a3 e5       	ldi	r26, 0x53	; 83
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e3 e5       	ldi	r30, 0x53	; 83
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS00);
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
     f62:	1d c0       	rjmp	.+58     	; 0xf9e <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==1024){
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	24 e0       	ldi	r18, 0x04	; 4
     f6e:	80 30       	cpi	r24, 0x00	; 0
     f70:	92 07       	cpc	r25, r18
     f72:	a9 f4       	brne	.+42     	; 0xf9e <TIMER_Init+0x1c4>
			SET_BIT(TCCR0,CS02);
     f74:	a3 e5       	ldi	r26, 0x53	; 83
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e3 e5       	ldi	r30, 0x53	; 83
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     f82:	a3 e5       	ldi	r26, 0x53	; 83
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e3 e5       	ldi	r30, 0x53	; 83
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8d 7f       	andi	r24, 0xFD	; 253
     f8e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     f90:	a3 e5       	ldi	r26, 0x53	; 83
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e3 e5       	ldi	r30, 0x53	; 83
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	81 60       	ori	r24, 0x01	; 1
     f9c:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	86 81       	ldd	r24, Z+6	; 0x06
     fa4:	88 23       	and	r24, r24
     fa6:	79 f4       	brne	.+30     	; 0xfc6 <TIMER_Init+0x1ec>
			CLEAR_BIT(TCCR0,COM01);
     fa8:	a3 e5       	ldi	r26, 0x53	; 83
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e5       	ldi	r30, 0x53	; 83
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7d       	andi	r24, 0xDF	; 223
     fb4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
     fb6:	a3 e5       	ldi	r26, 0x53	; 83
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e3 e5       	ldi	r30, 0x53	; 83
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7e       	andi	r24, 0xEF	; 239
     fc2:	8c 93       	st	X, r24
     fc4:	2a c3       	rjmp	.+1620   	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
     fc6:	e9 81       	ldd	r30, Y+1	; 0x01
     fc8:	fa 81       	ldd	r31, Y+2	; 0x02
     fca:	86 81       	ldd	r24, Z+6	; 0x06
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	b1 f4       	brne	.+44     	; 0xffc <TIMER_Init+0x222>
			SET_BIT(DDRB,PB3);
     fd0:	a7 e3       	ldi	r26, 0x37	; 55
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e7 e3       	ldi	r30, 0x37	; 55
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	88 60       	ori	r24, 0x08	; 8
     fdc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
     fde:	a3 e5       	ldi	r26, 0x53	; 83
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e3 e5       	ldi	r30, 0x53	; 83
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7d       	andi	r24, 0xDF	; 223
     fea:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
     fec:	a3 e5       	ldi	r26, 0x53	; 83
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e3 e5       	ldi	r30, 0x53	; 83
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 61       	ori	r24, 0x10	; 16
     ff8:	8c 93       	st	X, r24
     ffa:	0f c3       	rjmp	.+1566   	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
     ffc:	e9 81       	ldd	r30, Y+1	; 0x01
     ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	b1 f4       	brne	.+44     	; 0x1032 <TIMER_Init+0x258>
			SET_BIT(DDRB,PB3);
    1006:	a7 e3       	ldi	r26, 0x37	; 55
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e7 e3       	ldi	r30, 0x37	; 55
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 60       	ori	r24, 0x08	; 8
    1012:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
    1014:	a3 e5       	ldi	r26, 0x53	; 83
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e3 e5       	ldi	r30, 0x53	; 83
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 62       	ori	r24, 0x20	; 32
    1020:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7e       	andi	r24, 0xEF	; 239
    102e:	8c 93       	st	X, r24
    1030:	f4 c2       	rjmp	.+1512   	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
    1032:	e9 81       	ldd	r30, Y+1	; 0x01
    1034:	fa 81       	ldd	r31, Y+2	; 0x02
    1036:	86 81       	ldd	r24, Z+6	; 0x06
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	09 f0       	breq	.+2      	; 0x103e <TIMER_Init+0x264>
    103c:	ee c2       	rjmp	.+1500   	; 0x161a <TIMER_Init+0x840>
			SET_BIT(DDRB,PB3);
    103e:	a7 e3       	ldi	r26, 0x37	; 55
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e7 e3       	ldi	r30, 0x37	; 55
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 60       	ori	r24, 0x08	; 8
    104a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
    104c:	a3 e5       	ldi	r26, 0x53	; 83
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e3 e5       	ldi	r30, 0x53	; 83
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 62       	ori	r24, 0x20	; 32
    1058:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
    105a:	a3 e5       	ldi	r26, 0x53	; 83
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e5       	ldi	r30, 0x53	; 83
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 61       	ori	r24, 0x10	; 16
    1066:	8c 93       	st	X, r24
    1068:	d8 c2       	rjmp	.+1456   	; 0x161a <TIMER_Init+0x840>
		}


	}
	else if(i->timer==1){
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	80 81       	ld	r24, Z
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	09 f0       	breq	.+2      	; 0x1076 <TIMER_Init+0x29c>
    1074:	59 c1       	rjmp	.+690    	; 0x1328 <TIMER_Init+0x54e>
		SET_BIT(TCCR1A,FOC1A);
    1076:	af e4       	ldi	r26, 0x4F	; 79
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ef e4       	ldi	r30, 0x4F	; 79
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	88 60       	ori	r24, 0x08	; 8
    1082:	8c 93       	st	X, r24
		OCR1A= i->comp_value;
    1084:	aa e4       	ldi	r26, 0x4A	; 74
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e9 81       	ldd	r30, Y+1	; 0x01
    108a:	fa 81       	ldd	r31, Y+2	; 0x02
    108c:	84 81       	ldd	r24, Z+4	; 0x04
    108e:	95 81       	ldd	r25, Z+5	; 0x05
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	9c 93       	st	X, r25
    1094:	8e 93       	st	-X, r24
		//timer mode
		if(i->mode==0){
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	fa 81       	ldd	r31, Y+2	; 0x02
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	88 23       	and	r24, r24
    109e:	21 f5       	brne	.+72     	; 0x10e8 <TIMER_Init+0x30e>
			CLEAR_BIT(TCCR1A,WGM11);
    10a0:	af e4       	ldi	r26, 0x4F	; 79
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ef e4       	ldi	r30, 0x4F	; 79
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8d 7f       	andi	r24, 0xFD	; 253
    10ac:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    10ae:	af e4       	ldi	r26, 0x4F	; 79
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ef e4       	ldi	r30, 0x4F	; 79
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8e 7f       	andi	r24, 0xFE	; 254
    10ba:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
    10bc:	ae e4       	ldi	r26, 0x4E	; 78
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ee e4       	ldi	r30, 0x4E	; 78
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	87 7f       	andi	r24, 0xF7	; 247
    10c8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7e       	andi	r24, 0xEF	; 239
    10d6:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE1);
    10d8:	a9 e5       	ldi	r26, 0x59	; 89
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e9 e5       	ldi	r30, 0x59	; 89
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	84 60       	ori	r24, 0x04	; 4
    10e4:	8c 93       	st	X, r24
    10e6:	28 c0       	rjmp	.+80     	; 0x1138 <TIMER_Init+0x35e>

		}
		else if(i->mode==1){
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	81 81       	ldd	r24, Z+1	; 0x01
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	19 f5       	brne	.+70     	; 0x1138 <TIMER_Init+0x35e>
			CLEAR_BIT(TCCR1A,WGM11);
    10f2:	af e4       	ldi	r26, 0x4F	; 79
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ef e4       	ldi	r30, 0x4F	; 79
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8d 7f       	andi	r24, 0xFD	; 253
    10fe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
    1100:	af e4       	ldi	r26, 0x4F	; 79
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ef e4       	ldi	r30, 0x4F	; 79
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    110e:	ae e4       	ldi	r26, 0x4E	; 78
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ee e4       	ldi	r30, 0x4E	; 78
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 60       	ori	r24, 0x08	; 8
    111a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
    111c:	ae e4       	ldi	r26, 0x4E	; 78
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ee e4       	ldi	r30, 0x4E	; 78
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7e       	andi	r24, 0xEF	; 239
    1128:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE1A);
    112a:	a9 e5       	ldi	r26, 0x59	; 89
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e9 e5       	ldi	r30, 0x59	; 89
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 61       	ori	r24, 0x10	; 16
    1136:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
    1138:	e9 81       	ldd	r30, Y+1	; 0x01
    113a:	fa 81       	ldd	r31, Y+2	; 0x02
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	b1 f4       	brne	.+44     	; 0x1172 <TIMER_Init+0x398>
			CLEAR_BIT(TCCR1B,CS12);
    1146:	ae e4       	ldi	r26, 0x4E	; 78
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	ee e4       	ldi	r30, 0x4E	; 78
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8b 7f       	andi	r24, 0xFB	; 251
    1152:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
    1154:	ae e4       	ldi	r26, 0x4E	; 78
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ee e4       	ldi	r30, 0x4E	; 78
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8d 7f       	andi	r24, 0xFD	; 253
    1160:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
    1162:	ae e4       	ldi	r26, 0x4E	; 78
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	ee e4       	ldi	r30, 0x4E	; 78
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	8c 93       	st	X, r24
    1170:	75 c0       	rjmp	.+234    	; 0x125c <TIMER_Init+0x482>
		}
		else if(i->prescaler==8){
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	91 05       	cpc	r25, r1
    117e:	b1 f4       	brne	.+44     	; 0x11ac <TIMER_Init+0x3d2>
			CLEAR_BIT(TCCR1B,CS12);
    1180:	ae e4       	ldi	r26, 0x4E	; 78
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ee e4       	ldi	r30, 0x4E	; 78
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8b 7f       	andi	r24, 0xFB	; 251
    118c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    118e:	ae e4       	ldi	r26, 0x4E	; 78
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ee e4       	ldi	r30, 0x4E	; 78
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	82 60       	ori	r24, 0x02	; 2
    119a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS10);
    119c:	ae e4       	ldi	r26, 0x4E	; 78
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ee e4       	ldi	r30, 0x4E	; 78
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8e 7f       	andi	r24, 0xFE	; 254
    11a8:	8c 93       	st	X, r24
    11aa:	58 c0       	rjmp	.+176    	; 0x125c <TIMER_Init+0x482>
		}
		else if(i->prescaler==64){
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	80 34       	cpi	r24, 0x40	; 64
    11b6:	91 05       	cpc	r25, r1
    11b8:	b1 f4       	brne	.+44     	; 0x11e6 <TIMER_Init+0x40c>
			CLEAR_BIT(TCCR1B,CS12);
    11ba:	ae e4       	ldi	r26, 0x4E	; 78
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ee e4       	ldi	r30, 0x4E	; 78
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8b 7f       	andi	r24, 0xFB	; 251
    11c6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    11c8:	ae e4       	ldi	r26, 0x4E	; 78
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ee e4       	ldi	r30, 0x4E	; 78
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	82 60       	ori	r24, 0x02	; 2
    11d4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
    11d6:	ae e4       	ldi	r26, 0x4E	; 78
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ee e4       	ldi	r30, 0x4E	; 78
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	81 60       	ori	r24, 0x01	; 1
    11e2:	8c 93       	st	X, r24
    11e4:	3b c0       	rjmp	.+118    	; 0x125c <TIMER_Init+0x482>
		}
		else if(i->prescaler==256){
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	93 81       	ldd	r25, Z+3	; 0x03
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	80 30       	cpi	r24, 0x00	; 0
    11f2:	92 07       	cpc	r25, r18
    11f4:	b1 f4       	brne	.+44     	; 0x1222 <TIMER_Init+0x448>
			SET_BIT(TCCR1B,CS12);
    11f6:	ae e4       	ldi	r26, 0x4E	; 78
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ee e4       	ldi	r30, 0x4E	; 78
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	84 60       	ori	r24, 0x04	; 4
    1202:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
    1204:	ae e4       	ldi	r26, 0x4E	; 78
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ee e4       	ldi	r30, 0x4E	; 78
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8d 7f       	andi	r24, 0xFD	; 253
    1210:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS10);
    1212:	ae e4       	ldi	r26, 0x4E	; 78
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ee e4       	ldi	r30, 0x4E	; 78
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8e 7f       	andi	r24, 0xFE	; 254
    121e:	8c 93       	st	X, r24
    1220:	1d c0       	rjmp	.+58     	; 0x125c <TIMER_Init+0x482>
		}
		else if(i->prescaler==1024){
    1222:	e9 81       	ldd	r30, Y+1	; 0x01
    1224:	fa 81       	ldd	r31, Y+2	; 0x02
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	24 e0       	ldi	r18, 0x04	; 4
    122c:	80 30       	cpi	r24, 0x00	; 0
    122e:	92 07       	cpc	r25, r18
    1230:	a9 f4       	brne	.+42     	; 0x125c <TIMER_Init+0x482>
			SET_BIT(TCCR1B,CS12);
    1232:	ae e4       	ldi	r26, 0x4E	; 78
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ee e4       	ldi	r30, 0x4E	; 78
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
    1240:	ae e4       	ldi	r26, 0x4E	; 78
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ee e4       	ldi	r30, 0x4E	; 78
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8d 7f       	andi	r24, 0xFD	; 253
    124c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
    124e:	ae e4       	ldi	r26, 0x4E	; 78
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ee e4       	ldi	r30, 0x4E	; 78
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
    125c:	e9 81       	ldd	r30, Y+1	; 0x01
    125e:	fa 81       	ldd	r31, Y+2	; 0x02
    1260:	86 81       	ldd	r24, Z+6	; 0x06
    1262:	88 23       	and	r24, r24
    1264:	79 f4       	brne	.+30     	; 0x1284 <TIMER_Init+0x4aa>
			CLEAR_BIT(TCCR1A,COM1A1);
    1266:	af e4       	ldi	r26, 0x4F	; 79
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ef e4       	ldi	r30, 0x4F	; 79
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8f 77       	andi	r24, 0x7F	; 127
    1272:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    1274:	af e4       	ldi	r26, 0x4F	; 79
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ef e4       	ldi	r30, 0x4F	; 79
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 7b       	andi	r24, 0xBF	; 191
    1280:	8c 93       	st	X, r24
    1282:	cb c1       	rjmp	.+918    	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	86 81       	ldd	r24, Z+6	; 0x06
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	b1 f4       	brne	.+44     	; 0x12ba <TIMER_Init+0x4e0>
			SET_BIT(DDRD,PD5);
    128e:	a1 e3       	ldi	r26, 0x31	; 49
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e1 e3       	ldi	r30, 0x31	; 49
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 62       	ori	r24, 0x20	; 32
    129a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A1);
    129c:	af e4       	ldi	r26, 0x4F	; 79
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ef e4       	ldi	r30, 0x4F	; 79
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 77       	andi	r24, 0x7F	; 127
    12a8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    12aa:	af e4       	ldi	r26, 0x4F	; 79
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ef e4       	ldi	r30, 0x4F	; 79
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 64       	ori	r24, 0x40	; 64
    12b6:	8c 93       	st	X, r24
    12b8:	b0 c1       	rjmp	.+864    	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
    12ba:	e9 81       	ldd	r30, Y+1	; 0x01
    12bc:	fa 81       	ldd	r31, Y+2	; 0x02
    12be:	86 81       	ldd	r24, Z+6	; 0x06
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	b1 f4       	brne	.+44     	; 0x12f0 <TIMER_Init+0x516>
			SET_BIT(DDRD,PD5);
    12c4:	a1 e3       	ldi	r26, 0x31	; 49
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	80 62       	ori	r24, 0x20	; 32
    12d0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    12d2:	af e4       	ldi	r26, 0x4F	; 79
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ef e4       	ldi	r30, 0x4F	; 79
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	80 68       	ori	r24, 0x80	; 128
    12de:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    12e0:	af e4       	ldi	r26, 0x4F	; 79
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ef e4       	ldi	r30, 0x4F	; 79
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 7b       	andi	r24, 0xBF	; 191
    12ec:	8c 93       	st	X, r24
    12ee:	95 c1       	rjmp	.+810    	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
    12f0:	e9 81       	ldd	r30, Y+1	; 0x01
    12f2:	fa 81       	ldd	r31, Y+2	; 0x02
    12f4:	86 81       	ldd	r24, Z+6	; 0x06
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	09 f0       	breq	.+2      	; 0x12fc <TIMER_Init+0x522>
    12fa:	8f c1       	rjmp	.+798    	; 0x161a <TIMER_Init+0x840>
			SET_BIT(DDRD,PD5);
    12fc:	a1 e3       	ldi	r26, 0x31	; 49
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e1 e3       	ldi	r30, 0x31	; 49
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 62       	ori	r24, 0x20	; 32
    1308:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    130a:	af e4       	ldi	r26, 0x4F	; 79
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ef e4       	ldi	r30, 0x4F	; 79
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 68       	ori	r24, 0x80	; 128
    1316:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    1318:	af e4       	ldi	r26, 0x4F	; 79
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ef e4       	ldi	r30, 0x4F	; 79
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 64       	ori	r24, 0x40	; 64
    1324:	8c 93       	st	X, r24
    1326:	79 c1       	rjmp	.+754    	; 0x161a <TIMER_Init+0x840>
		}


	}
	else if(i->timer==2){
    1328:	e9 81       	ldd	r30, Y+1	; 0x01
    132a:	fa 81       	ldd	r31, Y+2	; 0x02
    132c:	80 81       	ld	r24, Z
    132e:	82 30       	cpi	r24, 0x02	; 2
    1330:	09 f0       	breq	.+2      	; 0x1334 <TIMER_Init+0x55a>
    1332:	73 c1       	rjmp	.+742    	; 0x161a <TIMER_Init+0x840>
		SET_BIT(TCCR2,FOC2);
    1334:	a5 e4       	ldi	r26, 0x45	; 69
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e4       	ldi	r30, 0x45	; 69
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	80 68       	ori	r24, 0x80	; 128
    1340:	8c 93       	st	X, r24
		OCR2 = i->comp_value;
    1342:	a3 e4       	ldi	r26, 0x43	; 67
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	95 81       	ldd	r25, Z+5	; 0x05
    134e:	8c 93       	st	X, r24
		//timer mode
		if(i->mode==0){
    1350:	e9 81       	ldd	r30, Y+1	; 0x01
    1352:	fa 81       	ldd	r31, Y+2	; 0x02
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	88 23       	and	r24, r24
    1358:	b1 f4       	brne	.+44     	; 0x1386 <TIMER_Init+0x5ac>
			CLEAR_BIT(TCCR2,WGM21);
    135a:	a5 e4       	ldi	r26, 0x45	; 69
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e5 e4       	ldi	r30, 0x45	; 69
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	87 7f       	andi	r24, 0xF7	; 247
    1366:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    1368:	a5 e4       	ldi	r26, 0x45	; 69
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e4       	ldi	r30, 0x45	; 69
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7b       	andi	r24, 0xBF	; 191
    1374:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE2);
    1376:	a9 e5       	ldi	r26, 0x59	; 89
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e9 e5       	ldi	r30, 0x59	; 89
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	8c 93       	st	X, r24
    1384:	1a c0       	rjmp	.+52     	; 0x13ba <TIMER_Init+0x5e0>

		}
		else if(i->mode==1){
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	81 81       	ldd	r24, Z+1	; 0x01
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	a9 f4       	brne	.+42     	; 0x13ba <TIMER_Init+0x5e0>
			SET_BIT(TCCR2,WGM21);
    1390:	a5 e4       	ldi	r26, 0x45	; 69
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e4       	ldi	r30, 0x45	; 69
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	88 60       	ori	r24, 0x08	; 8
    139c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    139e:	a5 e4       	ldi	r26, 0x45	; 69
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 e4       	ldi	r30, 0x45	; 69
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	8f 7b       	andi	r24, 0xBF	; 191
    13aa:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE2);
    13ac:	a9 e5       	ldi	r26, 0x59	; 89
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e9 e5       	ldi	r30, 0x59	; 89
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 68       	ori	r24, 0x80	; 128
    13b8:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	b1 f4       	brne	.+44     	; 0x13f4 <TIMER_Init+0x61a>
			CLEAR_BIT(TCCR2,CS22);
    13c8:	a5 e4       	ldi	r26, 0x45	; 69
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e4       	ldi	r30, 0x45	; 69
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8b 7f       	andi	r24, 0xFB	; 251
    13d4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    13d6:	a5 e4       	ldi	r26, 0x45	; 69
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e4       	ldi	r30, 0x45	; 69
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    13e4:	a5 e4       	ldi	r26, 0x45	; 69
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e4       	ldi	r30, 0x45	; 69
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	8c 93       	st	X, r24
    13f2:	af c0       	rjmp	.+350    	; 0x1552 <TIMER_Init+0x778>
		}
		else if(i->prescaler==8){
    13f4:	e9 81       	ldd	r30, Y+1	; 0x01
    13f6:	fa 81       	ldd	r31, Y+2	; 0x02
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	91 05       	cpc	r25, r1
    1400:	b1 f4       	brne	.+44     	; 0x142e <TIMER_Init+0x654>
			CLEAR_BIT(TCCR2,CS22);
    1402:	a5 e4       	ldi	r26, 0x45	; 69
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e5 e4       	ldi	r30, 0x45	; 69
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8b 7f       	andi	r24, 0xFB	; 251
    140e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS21);
    1410:	a3 e5       	ldi	r26, 0x53	; 83
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e3 e5       	ldi	r30, 0x53	; 83
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	82 60       	ori	r24, 0x02	; 2
    141c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    141e:	a5 e4       	ldi	r26, 0x45	; 69
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e4       	ldi	r30, 0x45	; 69
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8e 7f       	andi	r24, 0xFE	; 254
    142a:	8c 93       	st	X, r24
    142c:	92 c0       	rjmp	.+292    	; 0x1552 <TIMER_Init+0x778>
		}
		else if(i->prescaler == 32){
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	80 32       	cpi	r24, 0x20	; 32
    1438:	91 05       	cpc	r25, r1
    143a:	b1 f4       	brne	.+44     	; 0x1468 <TIMER_Init+0x68e>
			CLEAR_BIT(TCCR2,CS22);
    143c:	a5 e4       	ldi	r26, 0x45	; 69
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e5 e4       	ldi	r30, 0x45	; 69
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8b 7f       	andi	r24, 0xFB	; 251
    1448:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    144a:	a5 e4       	ldi	r26, 0x45	; 69
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e5 e4       	ldi	r30, 0x45	; 69
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	82 60       	ori	r24, 0x02	; 2
    1456:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    1458:	a5 e4       	ldi	r26, 0x45	; 69
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e5 e4       	ldi	r30, 0x45	; 69
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	8c 93       	st	X, r24
    1466:	75 c0       	rjmp	.+234    	; 0x1552 <TIMER_Init+0x778>
		}
		else if(i->prescaler==64){
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	80 34       	cpi	r24, 0x40	; 64
    1472:	91 05       	cpc	r25, r1
    1474:	b1 f4       	brne	.+44     	; 0x14a2 <TIMER_Init+0x6c8>
			SET_BIT(TCCR2,CS22);
    1476:	a5 e4       	ldi	r26, 0x45	; 69
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e4       	ldi	r30, 0x45	; 69
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	84 60       	ori	r24, 0x04	; 4
    1482:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    1484:	a5 e4       	ldi	r26, 0x45	; 69
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e4       	ldi	r30, 0x45	; 69
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8d 7f       	andi	r24, 0xFD	; 253
    1490:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    1492:	a5 e4       	ldi	r26, 0x45	; 69
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e4       	ldi	r30, 0x45	; 69
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	8c 93       	st	X, r24
    14a0:	58 c0       	rjmp	.+176    	; 0x1552 <TIMER_Init+0x778>
		}
		else if(i->prescaler==128){
    14a2:	e9 81       	ldd	r30, Y+1	; 0x01
    14a4:	fa 81       	ldd	r31, Y+2	; 0x02
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	80 38       	cpi	r24, 0x80	; 128
    14ac:	91 05       	cpc	r25, r1
    14ae:	b1 f4       	brne	.+44     	; 0x14dc <TIMER_Init+0x702>
			SET_BIT(TCCR2,CS22);
    14b0:	a5 e4       	ldi	r26, 0x45	; 69
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e4       	ldi	r30, 0x45	; 69
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	84 60       	ori	r24, 0x04	; 4
    14bc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    14be:	a5 e4       	ldi	r26, 0x45	; 69
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e4       	ldi	r30, 0x45	; 69
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8d 7f       	andi	r24, 0xFD	; 253
    14ca:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    14cc:	a5 e4       	ldi	r26, 0x45	; 69
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e5 e4       	ldi	r30, 0x45	; 69
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	81 60       	ori	r24, 0x01	; 1
    14d8:	8c 93       	st	X, r24
    14da:	3b c0       	rjmp	.+118    	; 0x1552 <TIMER_Init+0x778>
		}
		else if(i->prescaler==256){
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	80 30       	cpi	r24, 0x00	; 0
    14e8:	92 07       	cpc	r25, r18
    14ea:	b1 f4       	brne	.+44     	; 0x1518 <TIMER_Init+0x73e>
			SET_BIT(TCCR2,CS22);
    14ec:	a5 e4       	ldi	r26, 0x45	; 69
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e5 e4       	ldi	r30, 0x45	; 69
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    14fa:	a5 e4       	ldi	r26, 0x45	; 69
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e4       	ldi	r30, 0x45	; 69
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	82 60       	ori	r24, 0x02	; 2
    1506:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    1508:	a5 e4       	ldi	r26, 0x45	; 69
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e5 e4       	ldi	r30, 0x45	; 69
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8e 7f       	andi	r24, 0xFE	; 254
    1514:	8c 93       	st	X, r24
    1516:	1d c0       	rjmp	.+58     	; 0x1552 <TIMER_Init+0x778>
		}
		else if(i->prescaler==1024){
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	24 e0       	ldi	r18, 0x04	; 4
    1522:	80 30       	cpi	r24, 0x00	; 0
    1524:	92 07       	cpc	r25, r18
    1526:	a9 f4       	brne	.+42     	; 0x1552 <TIMER_Init+0x778>
			SET_BIT(TCCR2,CS22);
    1528:	a5 e4       	ldi	r26, 0x45	; 69
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e4       	ldi	r30, 0x45	; 69
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    1536:	a5 e4       	ldi	r26, 0x45	; 69
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e4       	ldi	r30, 0x45	; 69
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	82 60       	ori	r24, 0x02	; 2
    1542:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    1544:	a5 e4       	ldi	r26, 0x45	; 69
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e4       	ldi	r30, 0x45	; 69
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	81 60       	ori	r24, 0x01	; 1
    1550:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
    1552:	e9 81       	ldd	r30, Y+1	; 0x01
    1554:	fa 81       	ldd	r31, Y+2	; 0x02
    1556:	86 81       	ldd	r24, Z+6	; 0x06
    1558:	88 23       	and	r24, r24
    155a:	79 f4       	brne	.+30     	; 0x157a <TIMER_Init+0x7a0>
			CLEAR_BIT(TCCR2,COM21);
    155c:	a5 e4       	ldi	r26, 0x45	; 69
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e5 e4       	ldi	r30, 0x45	; 69
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8f 7d       	andi	r24, 0xDF	; 223
    1568:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM20);
    156a:	a5 e4       	ldi	r26, 0x45	; 69
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e5 e4       	ldi	r30, 0x45	; 69
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	8f 7e       	andi	r24, 0xEF	; 239
    1576:	8c 93       	st	X, r24
    1578:	50 c0       	rjmp	.+160    	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
    157a:	e9 81       	ldd	r30, Y+1	; 0x01
    157c:	fa 81       	ldd	r31, Y+2	; 0x02
    157e:	86 81       	ldd	r24, Z+6	; 0x06
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	b1 f4       	brne	.+44     	; 0x15b0 <TIMER_Init+0x7d6>
			SET_BIT(DDRD,PD7);
    1584:	a1 e3       	ldi	r26, 0x31	; 49
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e1 e3       	ldi	r30, 0x31	; 49
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 68       	ori	r24, 0x80	; 128
    1590:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM21);
    1592:	a5 e4       	ldi	r26, 0x45	; 69
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e4       	ldi	r30, 0x45	; 69
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7d       	andi	r24, 0xDF	; 223
    159e:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM20);
    15a0:	a5 e4       	ldi	r26, 0x45	; 69
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e4       	ldi	r30, 0x45	; 69
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 61       	ori	r24, 0x10	; 16
    15ac:	8c 93       	st	X, r24
    15ae:	35 c0       	rjmp	.+106    	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	86 81       	ldd	r24, Z+6	; 0x06
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	b1 f4       	brne	.+44     	; 0x15e6 <TIMER_Init+0x80c>
			SET_BIT(DDRD,PD7);
    15ba:	a1 e3       	ldi	r26, 0x31	; 49
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e1 e3       	ldi	r30, 0x31	; 49
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 68       	ori	r24, 0x80	; 128
    15c6:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    15c8:	a5 e4       	ldi	r26, 0x45	; 69
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e4       	ldi	r30, 0x45	; 69
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 62       	ori	r24, 0x20	; 32
    15d4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM20);
    15d6:	a5 e4       	ldi	r26, 0x45	; 69
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e5 e4       	ldi	r30, 0x45	; 69
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 7e       	andi	r24, 0xEF	; 239
    15e2:	8c 93       	st	X, r24
    15e4:	1a c0       	rjmp	.+52     	; 0x161a <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
    15e6:	e9 81       	ldd	r30, Y+1	; 0x01
    15e8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ea:	86 81       	ldd	r24, Z+6	; 0x06
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	a9 f4       	brne	.+42     	; 0x161a <TIMER_Init+0x840>
			SET_BIT(DDRD,PD7);
    15f0:	a1 e3       	ldi	r26, 0x31	; 49
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 68       	ori	r24, 0x80	; 128
    15fc:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    15fe:	a5 e4       	ldi	r26, 0x45	; 69
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e4       	ldi	r30, 0x45	; 69
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 62       	ori	r24, 0x20	; 32
    160a:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM20);
    160c:	a5 e4       	ldi	r26, 0x45	; 69
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e4       	ldi	r30, 0x45	; 69
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	80 61       	ori	r24, 0x10	; 16
    1618:	8c 93       	st	X, r24
	}




}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <TIMER_Start>:
void TIMER_Start(uint8 t , uint8 clk){
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <TIMER_Start+0x6>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	6a 83       	std	Y+2, r22	; 0x02




		if(t==0){
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	88 23       	and	r24, r24
    1636:	09 f0       	breq	.+2      	; 0x163a <TIMER_Start+0x16>
    1638:	4c c0       	rjmp	.+152    	; 0x16d2 <TIMER_Start+0xae>

			// clock select
			if(clk==1){
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	b1 f4       	brne	.+44     	; 0x166c <TIMER_Start+0x48>
				CLEAR_BIT(TCCR0,CS02);
    1640:	a3 e5       	ldi	r26, 0x53	; 83
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e3 e5       	ldi	r30, 0x53	; 83
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8b 7f       	andi	r24, 0xFB	; 251
    164c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
    164e:	a3 e5       	ldi	r26, 0x53	; 83
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e3 e5       	ldi	r30, 0x53	; 83
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8d 7f       	andi	r24, 0xFD	; 253
    165a:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    165c:	a3 e5       	ldi	r26, 0x53	; 83
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e3 e5       	ldi	r30, 0x53	; 83
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	81 60       	ori	r24, 0x01	; 1
    1668:	8c 93       	st	X, r24
    166a:	03 c1       	rjmp	.+518    	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk==8){
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	88 30       	cpi	r24, 0x08	; 8
    1670:	b1 f4       	brne	.+44     	; 0x169e <TIMER_Start+0x7a>
				CLEAR_BIT(TCCR0,CS02);
    1672:	a3 e5       	ldi	r26, 0x53	; 83
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e3 e5       	ldi	r30, 0x53	; 83
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8b 7f       	andi	r24, 0xFB	; 251
    167e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    1680:	a3 e5       	ldi	r26, 0x53	; 83
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e3 e5       	ldi	r30, 0x53	; 83
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	82 60       	ori	r24, 0x02	; 2
    168c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS00);
    168e:	a3 e5       	ldi	r26, 0x53	; 83
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e3 e5       	ldi	r30, 0x53	; 83
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8e 7f       	andi	r24, 0xFE	; 254
    169a:	8c 93       	st	X, r24
    169c:	ea c0       	rjmp	.+468    	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk==64){
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 34       	cpi	r24, 0x40	; 64
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <TIMER_Start+0x82>
    16a4:	e6 c0       	rjmp	.+460    	; 0x1872 <TIMER_Start+0x24e>
				CLEAR_BIT(TCCR0,CS02);
    16a6:	a3 e5       	ldi	r26, 0x53	; 83
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e3 e5       	ldi	r30, 0x53	; 83
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8b 7f       	andi	r24, 0xFB	; 251
    16b2:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    16b4:	a3 e5       	ldi	r26, 0x53	; 83
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e3 e5       	ldi	r30, 0x53	; 83
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	82 60       	ori	r24, 0x02	; 2
    16c0:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    16c2:	a3 e5       	ldi	r26, 0x53	; 83
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e3 e5       	ldi	r30, 0x53	; 83
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	81 60       	ori	r24, 0x01	; 1
    16ce:	8c 93       	st	X, r24
    16d0:	d0 c0       	rjmp	.+416    	; 0x1872 <TIMER_Start+0x24e>
				CLEAR_BIT(TCCR0,CS01);
				SET_BIT(TCCR0,CS00);
			}

		}
		else if(t==1){
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	09 f0       	breq	.+2      	; 0x16da <TIMER_Start+0xb6>
    16d8:	4c c0       	rjmp	.+152    	; 0x1772 <TIMER_Start+0x14e>

			// clock select
			if(clk==1){
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	b1 f4       	brne	.+44     	; 0x170c <TIMER_Start+0xe8>
				CLEAR_BIT(TCCR1B,CS12);
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8b 7f       	andi	r24, 0xFB	; 251
    16ec:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS11);
    16ee:	ae e4       	ldi	r26, 0x4E	; 78
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ee e4       	ldi	r30, 0x4E	; 78
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8d 7f       	andi	r24, 0xFD	; 253
    16fa:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    16fc:	ae e4       	ldi	r26, 0x4E	; 78
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ee e4       	ldi	r30, 0x4E	; 78
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	8c 93       	st	X, r24
    170a:	b3 c0       	rjmp	.+358    	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk==8){
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	88 30       	cpi	r24, 0x08	; 8
    1710:	b1 f4       	brne	.+44     	; 0x173e <TIMER_Start+0x11a>
				CLEAR_BIT(TCCR1B,CS12);
    1712:	ae e4       	ldi	r26, 0x4E	; 78
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ee e4       	ldi	r30, 0x4E	; 78
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8b 7f       	andi	r24, 0xFB	; 251
    171e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS11);
    1720:	ae e4       	ldi	r26, 0x4E	; 78
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ee e4       	ldi	r30, 0x4E	; 78
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	82 60       	ori	r24, 0x02	; 2
    172c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS10);
    172e:	ae e4       	ldi	r26, 0x4E	; 78
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ee e4       	ldi	r30, 0x4E	; 78
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8e 7f       	andi	r24, 0xFE	; 254
    173a:	8c 93       	st	X, r24
    173c:	9a c0       	rjmp	.+308    	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk==64){
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 34       	cpi	r24, 0x40	; 64
    1742:	09 f0       	breq	.+2      	; 0x1746 <TIMER_Start+0x122>
    1744:	96 c0       	rjmp	.+300    	; 0x1872 <TIMER_Start+0x24e>
				CLEAR_BIT(TCCR1B,CS12);
    1746:	ae e4       	ldi	r26, 0x4E	; 78
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	ee e4       	ldi	r30, 0x4E	; 78
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8b 7f       	andi	r24, 0xFB	; 251
    1752:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS11);
    1754:	ae e4       	ldi	r26, 0x4E	; 78
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ee e4       	ldi	r30, 0x4E	; 78
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	82 60       	ori	r24, 0x02	; 2
    1760:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    1762:	ae e4       	ldi	r26, 0x4E	; 78
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ee e4       	ldi	r30, 0x4E	; 78
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	81 60       	ori	r24, 0x01	; 1
    176e:	8c 93       	st	X, r24
    1770:	80 c0       	rjmp	.+256    	; 0x1872 <TIMER_Start+0x24e>




		}
		else if(t==2){
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	09 f0       	breq	.+2      	; 0x177a <TIMER_Start+0x156>
    1778:	7c c0       	rjmp	.+248    	; 0x1872 <TIMER_Start+0x24e>


			// clock select
			if(clk==1){
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	b1 f4       	brne	.+44     	; 0x17ac <TIMER_Start+0x188>
				CLEAR_BIT(TCCR2,CS22);
    1780:	a5 e4       	ldi	r26, 0x45	; 69
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e5 e4       	ldi	r30, 0x45	; 69
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8b 7f       	andi	r24, 0xFB	; 251
    178c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    178e:	a5 e4       	ldi	r26, 0x45	; 69
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e4       	ldi	r30, 0x45	; 69
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8d 7f       	andi	r24, 0xFD	; 253
    179a:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    179c:	a5 e4       	ldi	r26, 0x45	; 69
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e4       	ldi	r30, 0x45	; 69
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	81 60       	ori	r24, 0x01	; 1
    17a8:	8c 93       	st	X, r24
    17aa:	63 c0       	rjmp	.+198    	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk==8){
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	88 30       	cpi	r24, 0x08	; 8
    17b0:	b1 f4       	brne	.+44     	; 0x17de <TIMER_Start+0x1ba>
				CLEAR_BIT(TCCR2,CS22);
    17b2:	a5 e4       	ldi	r26, 0x45	; 69
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e4       	ldi	r30, 0x45	; 69
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8b 7f       	andi	r24, 0xFB	; 251
    17be:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS21);
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	82 60       	ori	r24, 0x02	; 2
    17cc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    17ce:	a5 e4       	ldi	r26, 0x45	; 69
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e4       	ldi	r30, 0x45	; 69
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8e 7f       	andi	r24, 0xFE	; 254
    17da:	8c 93       	st	X, r24
    17dc:	4a c0       	rjmp	.+148    	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk == 32){
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	80 32       	cpi	r24, 0x20	; 32
    17e2:	b1 f4       	brne	.+44     	; 0x1810 <TIMER_Start+0x1ec>
				CLEAR_BIT(TCCR2,CS22);
    17e4:	a5 e4       	ldi	r26, 0x45	; 69
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e4       	ldi	r30, 0x45	; 69
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8b 7f       	andi	r24, 0xFB	; 251
    17f0:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS21);
    17f2:	a5 e4       	ldi	r26, 0x45	; 69
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e4       	ldi	r30, 0x45	; 69
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	82 60       	ori	r24, 0x02	; 2
    17fe:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1800:	a5 e4       	ldi	r26, 0x45	; 69
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e4       	ldi	r30, 0x45	; 69
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	81 60       	ori	r24, 0x01	; 1
    180c:	8c 93       	st	X, r24
    180e:	31 c0       	rjmp	.+98     	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk==64){
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 34       	cpi	r24, 0x40	; 64
    1814:	b1 f4       	brne	.+44     	; 0x1842 <TIMER_Start+0x21e>
				SET_BIT(TCCR2,CS22);
    1816:	a5 e4       	ldi	r26, 0x45	; 69
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e4       	ldi	r30, 0x45	; 69
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    1824:	a5 e4       	ldi	r26, 0x45	; 69
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e5 e4       	ldi	r30, 0x45	; 69
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8d 7f       	andi	r24, 0xFD	; 253
    1830:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    1832:	a5 e4       	ldi	r26, 0x45	; 69
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e4       	ldi	r30, 0x45	; 69
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8e 7f       	andi	r24, 0xFE	; 254
    183e:	8c 93       	st	X, r24
    1840:	18 c0       	rjmp	.+48     	; 0x1872 <TIMER_Start+0x24e>
			}
			else if(clk==128){
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	80 38       	cpi	r24, 0x80	; 128
    1846:	a9 f4       	brne	.+42     	; 0x1872 <TIMER_Start+0x24e>
				SET_BIT(TCCR2,CS22);
    1848:	a5 e4       	ldi	r26, 0x45	; 69
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e5 e4       	ldi	r30, 0x45	; 69
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	84 60       	ori	r24, 0x04	; 4
    1854:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    1856:	a5 e4       	ldi	r26, 0x45	; 69
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e5 e4       	ldi	r30, 0x45	; 69
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8d 7f       	andi	r24, 0xFD	; 253
    1862:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1864:	a5 e4       	ldi	r26, 0x45	; 69
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e5 e4       	ldi	r30, 0x45	; 69
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	81 60       	ori	r24, 0x01	; 1
    1870:	8c 93       	st	X, r24

		}



}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <TIMER_Stop>:
void TIMER_Stop(uint8 t){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	89 83       	std	Y+1, r24	; 0x01
	if(t==0){
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	88 23       	and	r24, r24
    188c:	b1 f4       	brne	.+44     	; 0x18ba <TIMER_Stop+0x3e>
			// clock select
		CLEAR_BIT(TCCR0,CS02);
    188e:	a3 e5       	ldi	r26, 0x53	; 83
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e3 e5       	ldi	r30, 0x53	; 83
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8b 7f       	andi	r24, 0xFB	; 251
    189a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS01);
    189c:	a3 e5       	ldi	r26, 0x53	; 83
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e3 e5       	ldi	r30, 0x53	; 83
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8d 7f       	andi	r24, 0xFD	; 253
    18a8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS00);
    18aa:	a3 e5       	ldi	r26, 0x53	; 83
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e3 e5       	ldi	r30, 0x53	; 83
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8e 7f       	andi	r24, 0xFE	; 254
    18b6:	8c 93       	st	X, r24
    18b8:	31 c0       	rjmp	.+98     	; 0x191c <TIMER_Stop+0xa0>


	}
	else if(t==1){
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	b1 f4       	brne	.+44     	; 0x18ec <TIMER_Stop+0x70>
	// clock select
		CLEAR_BIT(TCCR1B,CS12);
    18c0:	ae e4       	ldi	r26, 0x4E	; 78
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ee e4       	ldi	r30, 0x4E	; 78
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8b 7f       	andi	r24, 0xFB	; 251
    18cc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    18ce:	ae e4       	ldi	r26, 0x4E	; 78
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ee e4       	ldi	r30, 0x4E	; 78
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8d 7f       	andi	r24, 0xFD	; 253
    18da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS10);
    18dc:	ae e4       	ldi	r26, 0x4E	; 78
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ee e4       	ldi	r30, 0x4E	; 78
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8e 7f       	andi	r24, 0xFE	; 254
    18e8:	8c 93       	st	X, r24
    18ea:	18 c0       	rjmp	.+48     	; 0x191c <TIMER_Stop+0xa0>
	}
	else if(t==2){
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	82 30       	cpi	r24, 0x02	; 2
    18f0:	a9 f4       	brne	.+42     	; 0x191c <TIMER_Stop+0xa0>
	// clock select
		CLEAR_BIT(TCCR2,CS22);
    18f2:	a5 e4       	ldi	r26, 0x45	; 69
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e4       	ldi	r30, 0x45	; 69
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	8b 7f       	andi	r24, 0xFB	; 251
    18fe:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,CS21);
    1900:	a5 e4       	ldi	r26, 0x45	; 69
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e5 e4       	ldi	r30, 0x45	; 69
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8d 7f       	andi	r24, 0xFD	; 253
    190c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,CS20);
    190e:	a5 e4       	ldi	r26, 0x45	; 69
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e5 e4       	ldi	r30, 0x45	; 69
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8e 7f       	andi	r24, 0xFE	; 254
    191a:	8c 93       	st	X, r24
	}

}
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <TIMER_Timer0SetCallBack>:

void TIMER_Timer0SetCallBack(void(*ptr)(void)){
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <TIMER_Timer0SetCallBack+0x6>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
	timer0 = ptr;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	90 93 95 00 	sts	0x0095, r25
    193a:	80 93 94 00 	sts	0x0094, r24
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <TIMER_Timer1SetCallBack>:
void TIMER_Timer1SetCallBack(void(*ptr)(void)){
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <TIMER_Timer1SetCallBack+0x6>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	9a 83       	std	Y+2, r25	; 0x02
    1954:	89 83       	std	Y+1, r24	; 0x01
	timer1=ptr;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
    195a:	90 93 97 00 	sts	0x0097, r25
    195e:	80 93 96 00 	sts	0x0096, r24
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <TIMER_Timer2SetCallBack>:
void TIMER_Timer2SetCallBack(void(*ptr)(void)){
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <TIMER_Timer2SetCallBack+0x6>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
	timer2=ptr;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	90 93 99 00 	sts	0x0099, r25
    1982:	80 93 98 00 	sts	0x0098, r24
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <__vector_19>:

ISR(TIMER0_COMP_vect){
    1990:	1f 92       	push	r1
    1992:	0f 92       	push	r0
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	0f 92       	push	r0
    1998:	11 24       	eor	r1, r1
    199a:	2f 93       	push	r18
    199c:	3f 93       	push	r19
    199e:	4f 93       	push	r20
    19a0:	5f 93       	push	r21
    19a2:	6f 93       	push	r22
    19a4:	7f 93       	push	r23
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	af 93       	push	r26
    19ac:	bf 93       	push	r27
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	if(timer0!= NULL){
    19ba:	80 91 94 00 	lds	r24, 0x0094
    19be:	90 91 95 00 	lds	r25, 0x0095
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	29 f0       	breq	.+10     	; 0x19d0 <__vector_19+0x40>
		(*timer0)();
    19c6:	e0 91 94 00 	lds	r30, 0x0094
    19ca:	f0 91 95 00 	lds	r31, 0x0095
    19ce:	09 95       	icall
	}
}
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	ff 91       	pop	r31
    19d6:	ef 91       	pop	r30
    19d8:	bf 91       	pop	r27
    19da:	af 91       	pop	r26
    19dc:	9f 91       	pop	r25
    19de:	8f 91       	pop	r24
    19e0:	7f 91       	pop	r23
    19e2:	6f 91       	pop	r22
    19e4:	5f 91       	pop	r21
    19e6:	4f 91       	pop	r20
    19e8:	3f 91       	pop	r19
    19ea:	2f 91       	pop	r18
    19ec:	0f 90       	pop	r0
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	0f 90       	pop	r0
    19f2:	1f 90       	pop	r1
    19f4:	18 95       	reti

000019f6 <__vector_6>:
ISR(TIMER1_COMPA_vect){
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	af 93       	push	r26
    1a12:	bf 93       	push	r27
    1a14:	ef 93       	push	r30
    1a16:	ff 93       	push	r31
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	if(timer1!= NULL){
    1a20:	80 91 96 00 	lds	r24, 0x0096
    1a24:	90 91 97 00 	lds	r25, 0x0097
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	29 f0       	breq	.+10     	; 0x1a36 <__vector_6+0x40>
		(*timer1)();
    1a2c:	e0 91 96 00 	lds	r30, 0x0096
    1a30:	f0 91 97 00 	lds	r31, 0x0097
    1a34:	09 95       	icall
	}
}
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	ff 91       	pop	r31
    1a3c:	ef 91       	pop	r30
    1a3e:	bf 91       	pop	r27
    1a40:	af 91       	pop	r26
    1a42:	9f 91       	pop	r25
    1a44:	8f 91       	pop	r24
    1a46:	7f 91       	pop	r23
    1a48:	6f 91       	pop	r22
    1a4a:	5f 91       	pop	r21
    1a4c:	4f 91       	pop	r20
    1a4e:	3f 91       	pop	r19
    1a50:	2f 91       	pop	r18
    1a52:	0f 90       	pop	r0
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	0f 90       	pop	r0
    1a58:	1f 90       	pop	r1
    1a5a:	18 95       	reti

00001a5c <__vector_3>:
ISR(TIMER2_COMP_vect){
    1a5c:	1f 92       	push	r1
    1a5e:	0f 92       	push	r0
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	0f 92       	push	r0
    1a64:	11 24       	eor	r1, r1
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	4f 93       	push	r20
    1a6c:	5f 93       	push	r21
    1a6e:	6f 93       	push	r22
    1a70:	7f 93       	push	r23
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
    1a7a:	ef 93       	push	r30
    1a7c:	ff 93       	push	r31
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	if(timer2!= NULL){
    1a86:	80 91 98 00 	lds	r24, 0x0098
    1a8a:	90 91 99 00 	lds	r25, 0x0099
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	29 f0       	breq	.+10     	; 0x1a9c <__vector_3+0x40>
		(*timer2)();
    1a92:	e0 91 98 00 	lds	r30, 0x0098
    1a96:	f0 91 99 00 	lds	r31, 0x0099
    1a9a:	09 95       	icall
	}
}
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	ff 91       	pop	r31
    1aa2:	ef 91       	pop	r30
    1aa4:	bf 91       	pop	r27
    1aa6:	af 91       	pop	r26
    1aa8:	9f 91       	pop	r25
    1aaa:	8f 91       	pop	r24
    1aac:	7f 91       	pop	r23
    1aae:	6f 91       	pop	r22
    1ab0:	5f 91       	pop	r21
    1ab2:	4f 91       	pop	r20
    1ab4:	3f 91       	pop	r19
    1ab6:	2f 91       	pop	r18
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0
    1abe:	1f 90       	pop	r1
    1ac0:	18 95       	reti

00001ac2 <__vector_9>:
ISR(TIMER0_OVF_vect){
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	2f 93       	push	r18
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	if(timer0!= NULL){
    1aec:	80 91 94 00 	lds	r24, 0x0094
    1af0:	90 91 95 00 	lds	r25, 0x0095
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	29 f0       	breq	.+10     	; 0x1b02 <__vector_9+0x40>
		(*timer0)();
    1af8:	e0 91 94 00 	lds	r30, 0x0094
    1afc:	f0 91 95 00 	lds	r31, 0x0095
    1b00:	09 95       	icall
	}
}
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	ff 91       	pop	r31
    1b08:	ef 91       	pop	r30
    1b0a:	bf 91       	pop	r27
    1b0c:	af 91       	pop	r26
    1b0e:	9f 91       	pop	r25
    1b10:	8f 91       	pop	r24
    1b12:	7f 91       	pop	r23
    1b14:	6f 91       	pop	r22
    1b16:	5f 91       	pop	r21
    1b18:	4f 91       	pop	r20
    1b1a:	3f 91       	pop	r19
    1b1c:	2f 91       	pop	r18
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <__vector_8>:
ISR(TIMER1_OVF_vect){
    1b28:	1f 92       	push	r1
    1b2a:	0f 92       	push	r0
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	0f 92       	push	r0
    1b30:	11 24       	eor	r1, r1
    1b32:	2f 93       	push	r18
    1b34:	3f 93       	push	r19
    1b36:	4f 93       	push	r20
    1b38:	5f 93       	push	r21
    1b3a:	6f 93       	push	r22
    1b3c:	7f 93       	push	r23
    1b3e:	8f 93       	push	r24
    1b40:	9f 93       	push	r25
    1b42:	af 93       	push	r26
    1b44:	bf 93       	push	r27
    1b46:	ef 93       	push	r30
    1b48:	ff 93       	push	r31
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	if(timer1!= NULL){
    1b52:	80 91 96 00 	lds	r24, 0x0096
    1b56:	90 91 97 00 	lds	r25, 0x0097
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <__vector_8+0x40>
		(*timer1)();
    1b5e:	e0 91 96 00 	lds	r30, 0x0096
    1b62:	f0 91 97 00 	lds	r31, 0x0097
    1b66:	09 95       	icall
	}
}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <__vector_4>:
ISR(TIMER2_OVF_vect){
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	2f 93       	push	r18
    1b9a:	3f 93       	push	r19
    1b9c:	4f 93       	push	r20
    1b9e:	5f 93       	push	r21
    1ba0:	6f 93       	push	r22
    1ba2:	7f 93       	push	r23
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	af 93       	push	r26
    1baa:	bf 93       	push	r27
    1bac:	ef 93       	push	r30
    1bae:	ff 93       	push	r31
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
	if(timer2!= NULL){
    1bb8:	80 91 98 00 	lds	r24, 0x0098
    1bbc:	90 91 99 00 	lds	r25, 0x0099
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	29 f0       	breq	.+10     	; 0x1bce <__vector_4+0x40>
		(*timer2)();
    1bc4:	e0 91 98 00 	lds	r30, 0x0098
    1bc8:	f0 91 99 00 	lds	r31, 0x0099
    1bcc:	09 95       	icall
	}
}
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	ff 91       	pop	r31
    1bd4:	ef 91       	pop	r30
    1bd6:	bf 91       	pop	r27
    1bd8:	af 91       	pop	r26
    1bda:	9f 91       	pop	r25
    1bdc:	8f 91       	pop	r24
    1bde:	7f 91       	pop	r23
    1be0:	6f 91       	pop	r22
    1be2:	5f 91       	pop	r21
    1be4:	4f 91       	pop	r20
    1be6:	3f 91       	pop	r19
    1be8:	2f 91       	pop	r18
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	0f 90       	pop	r0
    1bf0:	1f 90       	pop	r1
    1bf2:	18 95       	reti

00001bf4 <UART_Init>:
 *      Author: Omar Hany
 */

#include "UART.h"

void UART_Init(struct UART_init *i ){
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <UART_Init+0x6>
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <UART_Init+0x8>
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	9c 83       	std	Y+4, r25	; 0x04
    1c02:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRA,U2X);
    1c04:	ab e2       	ldi	r26, 0x2B	; 43
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	eb e2       	ldi	r30, 0x2B	; 43
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	82 60       	ori	r24, 0x02	; 2
    1c10:	8c 93       	st	X, r24
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1c12:	ea e2       	ldi	r30, 0x2A	; 42
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	88 e1       	ldi	r24, 0x18	; 24
    1c18:	80 83       	st	Z, r24
	CLEAR_BIT(UCSRC,UMSEL);
    1c1a:	a0 e4       	ldi	r26, 0x40	; 64
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e0 e4       	ldi	r30, 0x40	; 64
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7b       	andi	r24, 0xBF	; 191
    1c26:	8c 93       	st	X, r24

	/* parity mode */
	if((*i).parity_mode==0){CLEAR_BIT(UCSRC,UPM0);
    1c28:	eb 81       	ldd	r30, Y+3	; 0x03
    1c2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 23       	and	r24, r24
    1c30:	79 f4       	brne	.+30     	; 0x1c50 <UART_Init+0x5c>
    1c32:	a0 e4       	ldi	r26, 0x40	; 64
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e0 e4       	ldi	r30, 0x40	; 64
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8f 7e       	andi	r24, 0xEF	; 239
    1c3e:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM1);}
    1c40:	a0 e4       	ldi	r26, 0x40	; 64
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e0 e4       	ldi	r30, 0x40	; 64
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8f 7d       	andi	r24, 0xDF	; 223
    1c4c:	8c 93       	st	X, r24
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <UART_Init+0xaa>
	else if((*i).parity_mode==1){CLEAR_BIT(UCSRC,UPM0);
    1c50:	eb 81       	ldd	r30, Y+3	; 0x03
    1c52:	fc 81       	ldd	r31, Y+4	; 0x04
    1c54:	80 81       	ld	r24, Z
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	79 f4       	brne	.+30     	; 0x1c78 <UART_Init+0x84>
    1c5a:	a0 e4       	ldi	r26, 0x40	; 64
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e0 e4       	ldi	r30, 0x40	; 64
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	8f 7e       	andi	r24, 0xEF	; 239
    1c66:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UPM1);}
    1c68:	a0 e4       	ldi	r26, 0x40	; 64
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e0 e4       	ldi	r30, 0x40	; 64
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	80 62       	ori	r24, 0x20	; 32
    1c74:	8c 93       	st	X, r24
    1c76:	13 c0       	rjmp	.+38     	; 0x1c9e <UART_Init+0xaa>
	else if((*i).parity_mode==2){SET_BIT(UCSRC,UPM0);
    1c78:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7c:	80 81       	ld	r24, Z
    1c7e:	82 30       	cpi	r24, 0x02	; 2
    1c80:	71 f4       	brne	.+28     	; 0x1c9e <UART_Init+0xaa>
    1c82:	a0 e4       	ldi	r26, 0x40	; 64
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e0 e4       	ldi	r30, 0x40	; 64
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 61       	ori	r24, 0x10	; 16
    1c8e:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);}
    1c90:	a0 e4       	ldi	r26, 0x40	; 64
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e0 e4       	ldi	r30, 0x40	; 64
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 62       	ori	r24, 0x20	; 32
    1c9c:	8c 93       	st	X, r24

	/* stop bit */
	if(i->stop_bit==0){CLEAR_BIT(UCSRC,USBS);}
    1c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	88 23       	and	r24, r24
    1ca6:	41 f4       	brne	.+16     	; 0x1cb8 <UART_Init+0xc4>
    1ca8:	a0 e4       	ldi	r26, 0x40	; 64
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e0 e4       	ldi	r30, 0x40	; 64
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	87 7f       	andi	r24, 0xF7	; 247
    1cb4:	8c 93       	st	X, r24
    1cb6:	0c c0       	rjmp	.+24     	; 0x1cd0 <UART_Init+0xdc>
	else if(i->stop_bit==1){SET_BIT(UCSRC,USBS);}
    1cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cba:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	39 f4       	brne	.+14     	; 0x1cd0 <UART_Init+0xdc>
    1cc2:	a0 e4       	ldi	r26, 0x40	; 64
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e0 e4       	ldi	r30, 0x40	; 64
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 60       	ori	r24, 0x08	; 8
    1cce:	8c 93       	st	X, r24

	/* character size */
	if(i->char_size == 5 ){CLEAR_BIT(UCSRC,UCSZ0);
    1cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd4:	81 81       	ldd	r24, Z+1	; 0x01
    1cd6:	85 30       	cpi	r24, 0x05	; 5
    1cd8:	b1 f4       	brne	.+44     	; 0x1d06 <UART_Init+0x112>
    1cda:	a0 e4       	ldi	r26, 0x40	; 64
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e0 e4       	ldi	r30, 0x40	; 64
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8d 7f       	andi	r24, 0xFD	; 253
    1ce6:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1); CLEAR_BIT(UCSRC,UCSZ2);}
    1ce8:	a0 e4       	ldi	r26, 0x40	; 64
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e0 e4       	ldi	r30, 0x40	; 64
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8b 7f       	andi	r24, 0xFB	; 251
    1cf4:	8c 93       	st	X, r24
    1cf6:	a0 e4       	ldi	r26, 0x40	; 64
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e0 e4       	ldi	r30, 0x40	; 64
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8b 7f       	andi	r24, 0xFB	; 251
    1d02:	8c 93       	st	X, r24
    1d04:	6b c0       	rjmp	.+214    	; 0x1ddc <UART_Init+0x1e8>
	else if(i->char_size == 6 ){SET_BIT(UCSRC,UCSZ0);
    1d06:	eb 81       	ldd	r30, Y+3	; 0x03
    1d08:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0a:	81 81       	ldd	r24, Z+1	; 0x01
    1d0c:	86 30       	cpi	r24, 0x06	; 6
    1d0e:	b1 f4       	brne	.+44     	; 0x1d3c <UART_Init+0x148>
    1d10:	a0 e4       	ldi	r26, 0x40	; 64
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e0 e4       	ldi	r30, 0x40	; 64
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	82 60       	ori	r24, 0x02	; 2
    1d1c:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1); CLEAR_BIT(UCSRC,UCSZ2);}
    1d1e:	a0 e4       	ldi	r26, 0x40	; 64
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e0 e4       	ldi	r30, 0x40	; 64
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	8b 7f       	andi	r24, 0xFB	; 251
    1d2a:	8c 93       	st	X, r24
    1d2c:	a0 e4       	ldi	r26, 0x40	; 64
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e0 e4       	ldi	r30, 0x40	; 64
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8b 7f       	andi	r24, 0xFB	; 251
    1d38:	8c 93       	st	X, r24
    1d3a:	50 c0       	rjmp	.+160    	; 0x1ddc <UART_Init+0x1e8>
	else if(i->char_size == 7 ){CLEAR_BIT(UCSRC,UCSZ0);
    1d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d40:	81 81       	ldd	r24, Z+1	; 0x01
    1d42:	87 30       	cpi	r24, 0x07	; 7
    1d44:	b1 f4       	brne	.+44     	; 0x1d72 <UART_Init+0x17e>
    1d46:	a0 e4       	ldi	r26, 0x40	; 64
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e0 e4       	ldi	r30, 0x40	; 64
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8d 7f       	andi	r24, 0xFD	; 253
    1d52:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1); CLEAR_BIT(UCSRC,UCSZ2);}
    1d54:	a0 e4       	ldi	r26, 0x40	; 64
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e0 e4       	ldi	r30, 0x40	; 64
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	84 60       	ori	r24, 0x04	; 4
    1d60:	8c 93       	st	X, r24
    1d62:	a0 e4       	ldi	r26, 0x40	; 64
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e0 e4       	ldi	r30, 0x40	; 64
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8b 7f       	andi	r24, 0xFB	; 251
    1d6e:	8c 93       	st	X, r24
    1d70:	35 c0       	rjmp	.+106    	; 0x1ddc <UART_Init+0x1e8>
	else if(i->char_size == 8 ){SET_BIT(UCSRC,UCSZ0);
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
    1d78:	88 30       	cpi	r24, 0x08	; 8
    1d7a:	b1 f4       	brne	.+44     	; 0x1da8 <UART_Init+0x1b4>
    1d7c:	a0 e4       	ldi	r26, 0x40	; 64
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e0 e4       	ldi	r30, 0x40	; 64
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	82 60       	ori	r24, 0x02	; 2
    1d88:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1); CLEAR_BIT(UCSRC,UCSZ2);}
    1d8a:	a0 e4       	ldi	r26, 0x40	; 64
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e0 e4       	ldi	r30, 0x40	; 64
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	84 60       	ori	r24, 0x04	; 4
    1d96:	8c 93       	st	X, r24
    1d98:	a0 e4       	ldi	r26, 0x40	; 64
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e0 e4       	ldi	r30, 0x40	; 64
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8b 7f       	andi	r24, 0xFB	; 251
    1da4:	8c 93       	st	X, r24
    1da6:	1a c0       	rjmp	.+52     	; 0x1ddc <UART_Init+0x1e8>
	else if(i->char_size == 9 ){SET_BIT(UCSRC,UCSZ0);
    1da8:	eb 81       	ldd	r30, Y+3	; 0x03
    1daa:	fc 81       	ldd	r31, Y+4	; 0x04
    1dac:	81 81       	ldd	r24, Z+1	; 0x01
    1dae:	89 30       	cpi	r24, 0x09	; 9
    1db0:	a9 f4       	brne	.+42     	; 0x1ddc <UART_Init+0x1e8>
    1db2:	a0 e4       	ldi	r26, 0x40	; 64
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e0 e4       	ldi	r30, 0x40	; 64
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	82 60       	ori	r24, 0x02	; 2
    1dbe:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1); SET_BIT(UCSRC,UCSZ2);}
    1dc0:	a0 e4       	ldi	r26, 0x40	; 64
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e0 e4       	ldi	r30, 0x40	; 64
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	84 60       	ori	r24, 0x04	; 4
    1dcc:	8c 93       	st	X, r24
    1dce:	a0 e4       	ldi	r26, 0x40	; 64
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e0 e4       	ldi	r30, 0x40	; 64
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	84 60       	ori	r24, 0x04	; 4
    1dda:	8c 93       	st	X, r24
	uint16 b = (((F_CPU / (i->baud_rate* 8UL))) - 1);
    1ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dde:	fc 81       	ldd	r31, Y+4	; 0x04
    1de0:	83 81       	ldd	r24, Z+3	; 0x03
    1de2:	94 81       	ldd	r25, Z+4	; 0x04
    1de4:	cc 01       	movw	r24, r24
    1de6:	a0 e0       	ldi	r26, 0x00	; 0
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	aa 1f       	adc	r26, r26
    1df0:	bb 1f       	adc	r27, r27
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	aa 1f       	adc	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	aa 1f       	adc	r26, r26
    1e00:	bb 1f       	adc	r27, r27
    1e02:	9c 01       	movw	r18, r24
    1e04:	ad 01       	movw	r20, r26
    1e06:	80 e4       	ldi	r24, 0x40	; 64
    1e08:	92 e4       	ldi	r25, 0x42	; 66
    1e0a:	af e0       	ldi	r26, 0x0F	; 15
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodsi4>
    1e16:	da 01       	movw	r26, r20
    1e18:	c9 01       	movw	r24, r18
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = b>>8;
    1e20:	e0 e4       	ldi	r30, 0x40	; 64
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	89 2f       	mov	r24, r25
    1e2a:	99 27       	eor	r25, r25
    1e2c:	80 83       	st	Z, r24
	UBRRL = b;
    1e2e:	e9 e2       	ldi	r30, 0x29	; 41
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	80 83       	st	Z, r24


}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <UART_SendByte>:


void UART_SendByte(const uint8 data)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e50:	eb e2       	ldi	r30, 0x2B	; 43
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	80 72       	andi	r24, 0x20	; 32
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	b9 f3       	breq	.-18     	; 0x1e50 <UART_SendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1e62:	ec e2       	ldi	r30, 0x2C	; 44
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <UART_RecieveByte>:

uint8 UART_RecieveByte(void)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1e7a:	eb e2       	ldi	r30, 0x2B	; 43
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 23       	and	r24, r24
    1e82:	dc f7       	brge	.-10     	; 0x1e7a <UART_RecieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1e84:	ec e2       	ldi	r30, 0x2C	; 44
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <UART_SendString>:

void UART_SendString(const uint8 *Str)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <UART_SendString+0x6>
    1e96:	0f 92       	push	r0
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	9b 83       	std	Y+3, r25	; 0x03
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ea0:	19 82       	std	Y+1, r1	; 0x01
    1ea2:	0e c0       	rjmp	.+28     	; 0x1ec0 <UART_SendString+0x30>
	while(Str[i] != '\0')
	{
		UART_SendByte(Str[i]);
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	80 81       	ld	r24, Z
    1eb6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <UART_SendByte>
		i++;
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	8f 5f       	subi	r24, 0xFF	; 255
    1ebe:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eca:	fc 01       	movw	r30, r24
    1ecc:	e2 0f       	add	r30, r18
    1ece:	f3 1f       	adc	r31, r19
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 23       	and	r24, r24
    1ed4:	39 f7       	brne	.-50     	; 0x1ea4 <UART_SendString+0x14>
	{
		UART_SendByte(Str[i]);
		i++;
	}
	UART_SendByte('#');
    1ed6:	83 e2       	ldi	r24, 0x23	; 35
    1ed8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <UART_SendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <UART_ReceiveString>:

void UART_ReceiveString(uint8 *Str)
{
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <UART_ReceiveString+0xa>
    1ef2:	0f 92       	push	r0
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	9b 83       	std	Y+3, r25	; 0x03
    1efa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1efc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_RecieveByte();
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	8c 01       	movw	r16, r24
    1f0a:	02 0f       	add	r16, r18
    1f0c:	13 1f       	adc	r17, r19
    1f0e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <UART_RecieveByte>
    1f12:	f8 01       	movw	r30, r16
    1f14:	80 83       	st	Z, r24
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <UART_ReceiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	8f 5f       	subi	r24, 0xFF	; 255
    1f1c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_RecieveByte();
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	8c 01       	movw	r16, r24
    1f2a:	02 0f       	add	r16, r18
    1f2c:	13 1f       	adc	r17, r19
    1f2e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <UART_RecieveByte>
    1f32:	f8 01       	movw	r30, r16
    1f34:	80 83       	st	Z, r24

void UART_ReceiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_RecieveByte();
	while(Str[i] != '#')
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f40:	fc 01       	movw	r30, r24
    1f42:	e2 0f       	add	r30, r18
    1f44:	f3 1f       	adc	r31, r19
    1f46:	80 81       	ld	r24, Z
    1f48:	83 32       	cpi	r24, 0x23	; 35
    1f4a:	31 f7       	brne	.-52     	; 0x1f18 <UART_ReceiveString+0x30>
	{
		i++;
		Str[i] = UART_RecieveByte();
	}
	Str[i] = '\0';
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	10 82       	st	Z, r1
}
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	08 95       	ret

00001f6e <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    1f76:	e7 e2       	ldi	r30, 0x27	; 39
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    1f7c:	e6 e2       	ldi	r30, 0x26	; 38
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	83 e8       	ldi	r24, 0x83	; 131
    1f82:	80 83       	st	Z, r24
}
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	87 70       	andi	r24, 0x07	; 7
    1f9a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1f9c:	a7 e2       	ldi	r26, 0x27	; 39
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e7 e2       	ldi	r30, 0x27	; 39
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 7e       	andi	r24, 0xE0	; 224
    1fa8:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    1faa:	a7 e2       	ldi	r26, 0x27	; 39
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e7 e2       	ldi	r30, 0x27	; 39
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	90 81       	ld	r25, Z
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	89 2b       	or	r24, r25
    1fb8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    1fba:	a6 e2       	ldi	r26, 0x26	; 38
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e6 e2       	ldi	r30, 0x26	; 38
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 64       	ori	r24, 0x40	; 64
    1fc6:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    1fc8:	e6 e2       	ldi	r30, 0x26	; 38
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	80 71       	andi	r24, 0x10	; 16
    1fd4:	90 70       	andi	r25, 0x00	; 0
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	b9 f3       	breq	.-18     	; 0x1fc8 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    1fda:	a6 e2       	ldi	r26, 0x26	; 38
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e6 e2       	ldi	r30, 0x26	; 38
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 61       	ori	r24, 0x10	; 16
    1fe6:	8c 93       	st	X, r24
	return ADC; /* return the data register */
    1fe8:	e4 e2       	ldi	r30, 0x24	; 36
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <KeyPad_getPressedKey+0x6>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2002:	1a 82       	std	Y+2, r1	; 0x02
    2004:	4c c0       	rjmp	.+152    	; 0x209e <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    2006:	ea e3       	ldi	r30, 0x3A	; 58
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	80 e1       	ldi	r24, 0x10	; 16
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 c0       	rjmp	.+4      	; 0x201a <KeyPad_getPressedKey+0x22>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	2a 95       	dec	r18
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <KeyPad_getPressedKey+0x1e>
    201e:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    2020:	eb e3       	ldi	r30, 0x3B	; 59
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	80 e1       	ldi	r24, 0x10	; 16
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 2e       	mov	r0, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <KeyPad_getPressedKey+0x3e>
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	0a 94       	dec	r0
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <KeyPad_getPressedKey+0x3a>
    203a:	80 95       	com	r24
    203c:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    203e:	19 82       	std	Y+1, r1	; 0x01
    2040:	28 c0       	rjmp	.+80     	; 0x2092 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    2042:	e9 e3       	ldi	r30, 0x39	; 57
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a9 01       	movw	r20, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <KeyPad_getPressedKey+0x62>
    2056:	55 95       	asr	r21
    2058:	47 95       	ror	r20
    205a:	8a 95       	dec	r24
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <KeyPad_getPressedKey+0x5e>
    205e:	ca 01       	movw	r24, r20
    2060:	81 70       	andi	r24, 0x01	; 1
    2062:	90 70       	andi	r25, 0x00	; 0
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	91 f4       	brne	.+36     	; 0x208c <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	98 2f       	mov	r25, r24
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	89 0f       	add	r24, r25
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	84 30       	cpi	r24, 0x04	; 4
    2096:	a8 f2       	brcs	.-86     	; 0x2042 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <KeyPad_getPressedKey+0xae>
    20a4:	b0 cf       	rjmp	.-160    	; 0x2006 <KeyPad_getPressedKey+0xe>
    20a6:	ad cf       	rjmp	.-166    	; 0x2002 <KeyPad_getPressedKey+0xa>

000020a8 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <KeyPad_4x4_adjustKeyNumber+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <KeyPad_4x4_adjustKeyNumber+0x8>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	3c 83       	std	Y+4, r19	; 0x04
    20be:	2b 83       	std	Y+3, r18	; 0x03
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	88 30       	cpi	r24, 0x08	; 8
    20c6:	91 05       	cpc	r25, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <KeyPad_4x4_adjustKeyNumber+0x24>
    20ca:	70 c0       	rjmp	.+224    	; 0x21ac <KeyPad_4x4_adjustKeyNumber+0x104>
    20cc:	2b 81       	ldd	r18, Y+3	; 0x03
    20ce:	3c 81       	ldd	r19, Y+4	; 0x04
    20d0:	29 30       	cpi	r18, 0x09	; 9
    20d2:	31 05       	cpc	r19, r1
    20d4:	5c f5       	brge	.+86     	; 0x212c <KeyPad_4x4_adjustKeyNumber+0x84>
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	84 30       	cpi	r24, 0x04	; 4
    20dc:	91 05       	cpc	r25, r1
    20de:	09 f4       	brne	.+2      	; 0x20e2 <KeyPad_4x4_adjustKeyNumber+0x3a>
    20e0:	59 c0       	rjmp	.+178    	; 0x2194 <KeyPad_4x4_adjustKeyNumber+0xec>
    20e2:	2b 81       	ldd	r18, Y+3	; 0x03
    20e4:	3c 81       	ldd	r19, Y+4	; 0x04
    20e6:	25 30       	cpi	r18, 0x05	; 5
    20e8:	31 05       	cpc	r19, r1
    20ea:	9c f4       	brge	.+38     	; 0x2112 <KeyPad_4x4_adjustKeyNumber+0x6a>
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	91 05       	cpc	r25, r1
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <KeyPad_4x4_adjustKeyNumber+0x50>
    20f6:	48 c0       	rjmp	.+144    	; 0x2188 <KeyPad_4x4_adjustKeyNumber+0xe0>
    20f8:	2b 81       	ldd	r18, Y+3	; 0x03
    20fa:	3c 81       	ldd	r19, Y+4	; 0x04
    20fc:	23 30       	cpi	r18, 0x03	; 3
    20fe:	31 05       	cpc	r19, r1
    2100:	0c f0       	brlt	.+2      	; 0x2104 <KeyPad_4x4_adjustKeyNumber+0x5c>
    2102:	45 c0       	rjmp	.+138    	; 0x218e <KeyPad_4x4_adjustKeyNumber+0xe6>
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	91 05       	cpc	r25, r1
    210c:	09 f4       	brne	.+2      	; 0x2110 <KeyPad_4x4_adjustKeyNumber+0x68>
    210e:	39 c0       	rjmp	.+114    	; 0x2182 <KeyPad_4x4_adjustKeyNumber+0xda>
    2110:	68 c0       	rjmp	.+208    	; 0x21e2 <KeyPad_4x4_adjustKeyNumber+0x13a>
    2112:	2b 81       	ldd	r18, Y+3	; 0x03
    2114:	3c 81       	ldd	r19, Y+4	; 0x04
    2116:	26 30       	cpi	r18, 0x06	; 6
    2118:	31 05       	cpc	r19, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <KeyPad_4x4_adjustKeyNumber+0x76>
    211c:	41 c0       	rjmp	.+130    	; 0x21a0 <KeyPad_4x4_adjustKeyNumber+0xf8>
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	87 30       	cpi	r24, 0x07	; 7
    2124:	91 05       	cpc	r25, r1
    2126:	0c f0       	brlt	.+2      	; 0x212a <KeyPad_4x4_adjustKeyNumber+0x82>
    2128:	3e c0       	rjmp	.+124    	; 0x21a6 <KeyPad_4x4_adjustKeyNumber+0xfe>
    212a:	37 c0       	rjmp	.+110    	; 0x219a <KeyPad_4x4_adjustKeyNumber+0xf2>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	2c 30       	cpi	r18, 0x0C	; 12
    2132:	31 05       	cpc	r19, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <KeyPad_4x4_adjustKeyNumber+0x90>
    2136:	46 c0       	rjmp	.+140    	; 0x21c4 <KeyPad_4x4_adjustKeyNumber+0x11c>
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	8d 30       	cpi	r24, 0x0D	; 13
    213e:	91 05       	cpc	r25, r1
    2140:	5c f4       	brge	.+22     	; 0x2158 <KeyPad_4x4_adjustKeyNumber+0xb0>
    2142:	2b 81       	ldd	r18, Y+3	; 0x03
    2144:	3c 81       	ldd	r19, Y+4	; 0x04
    2146:	2a 30       	cpi	r18, 0x0A	; 10
    2148:	31 05       	cpc	r19, r1
    214a:	b1 f1       	breq	.+108    	; 0x21b8 <KeyPad_4x4_adjustKeyNumber+0x110>
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	8b 30       	cpi	r24, 0x0B	; 11
    2152:	91 05       	cpc	r25, r1
    2154:	a4 f5       	brge	.+104    	; 0x21be <KeyPad_4x4_adjustKeyNumber+0x116>
    2156:	2d c0       	rjmp	.+90     	; 0x21b2 <KeyPad_4x4_adjustKeyNumber+0x10a>
    2158:	2b 81       	ldd	r18, Y+3	; 0x03
    215a:	3c 81       	ldd	r19, Y+4	; 0x04
    215c:	2e 30       	cpi	r18, 0x0E	; 14
    215e:	31 05       	cpc	r19, r1
    2160:	b9 f1       	breq	.+110    	; 0x21d0 <KeyPad_4x4_adjustKeyNumber+0x128>
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	8e 30       	cpi	r24, 0x0E	; 14
    2168:	91 05       	cpc	r25, r1
    216a:	7c f1       	brlt	.+94     	; 0x21ca <KeyPad_4x4_adjustKeyNumber+0x122>
    216c:	2b 81       	ldd	r18, Y+3	; 0x03
    216e:	3c 81       	ldd	r19, Y+4	; 0x04
    2170:	2f 30       	cpi	r18, 0x0F	; 15
    2172:	31 05       	cpc	r19, r1
    2174:	81 f1       	breq	.+96     	; 0x21d6 <KeyPad_4x4_adjustKeyNumber+0x12e>
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	80 31       	cpi	r24, 0x10	; 16
    217c:	91 05       	cpc	r25, r1
    217e:	71 f1       	breq	.+92     	; 0x21dc <KeyPad_4x4_adjustKeyNumber+0x134>
    2180:	30 c0       	rjmp	.+96     	; 0x21e2 <KeyPad_4x4_adjustKeyNumber+0x13a>
	{
		case 1: return '7';
    2182:	97 e3       	ldi	r25, 0x37	; 55
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	2f c0       	rjmp	.+94     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: return '8';
    2188:	28 e3       	ldi	r18, 0x38	; 56
    218a:	2a 83       	std	Y+2, r18	; 0x02
    218c:	2c c0       	rjmp	.+88     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: return '9';
    218e:	39 e3       	ldi	r19, 0x39	; 57
    2190:	3a 83       	std	Y+2, r19	; 0x02
    2192:	29 c0       	rjmp	.+82     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: return '%'; // ASCII Code of %
    2194:	85 e2       	ldi	r24, 0x25	; 37
    2196:	8a 83       	std	Y+2, r24	; 0x02
    2198:	26 c0       	rjmp	.+76     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: return '4';
    219a:	94 e3       	ldi	r25, 0x34	; 52
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	23 c0       	rjmp	.+70     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: return '5';
    21a0:	25 e3       	ldi	r18, 0x35	; 53
    21a2:	2a 83       	std	Y+2, r18	; 0x02
    21a4:	20 c0       	rjmp	.+64     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: return '6';
    21a6:	36 e3       	ldi	r19, 0x36	; 54
    21a8:	3a 83       	std	Y+2, r19	; 0x02
    21aa:	1d c0       	rjmp	.+58     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    21ac:	8a e2       	ldi	r24, 0x2A	; 42
    21ae:	8a 83       	std	Y+2, r24	; 0x02
    21b0:	1a c0       	rjmp	.+52     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: return '1';
    21b2:	91 e3       	ldi	r25, 0x31	; 49
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	17 c0       	rjmp	.+46     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: return '2';
    21b8:	22 e3       	ldi	r18, 0x32	; 50
    21ba:	2a 83       	std	Y+2, r18	; 0x02
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: return '3';
    21be:	33 e3       	ldi	r19, 0x33	; 51
    21c0:	3a 83       	std	Y+2, r19	; 0x02
    21c2:	11 c0       	rjmp	.+34     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    21c4:	8d e2       	ldi	r24, 0x2D	; 45
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: return 13;  /* ASCII of Enter */
    21ca:	9d e0       	ldi	r25, 0x0D	; 13
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	0b c0       	rjmp	.+22     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: return '0';
    21d0:	20 e3       	ldi	r18, 0x30	; 48
    21d2:	2a 83       	std	Y+2, r18	; 0x02
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    21d6:	3d e3       	ldi	r19, 0x3D	; 61
    21d8:	3a 83       	std	Y+2, r19	; 0x02
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    21dc:	8b e2       	ldi	r24, 0x2B	; 43
    21de:	8a 83       	std	Y+2, r24	; 0x02
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		default: return button_number;								 						
    21e2:	99 81       	ldd	r25, Y+1	; 0x01
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    21fe:	a1 e3       	ldi	r26, 0x31	; 49
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e1 e3       	ldi	r30, 0x31	; 49
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	80 67       	ori	r24, 0x70	; 112
    220a:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    220c:	e4 e3       	ldi	r30, 0x34	; 52
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	8f ef       	ldi	r24, 0xFF	; 255
    2212:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2214:	88 e3       	ldi	r24, 0x38	; 56
    2216:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    221a:	8c e0       	ldi	r24, 0x0C	; 12
    221c:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_sendCommand>
}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	e9 97       	sbiw	r28, 0x39	; 57
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2242:	a2 e3       	ldi	r26, 0x32	; 50
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e2 e3       	ldi	r30, 0x32	; 50
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8f 7e       	andi	r24, 0xEF	; 239
    224e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2250:	a2 e3       	ldi	r26, 0x32	; 50
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e2 e3       	ldi	r30, 0x32	; 50
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	8f 7d       	andi	r24, 0xDF	; 223
    225c:	8c 93       	st	X, r24
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e8       	ldi	r26, 0x80	; 128
    2264:	bf e3       	ldi	r27, 0x3F	; 63
    2266:	8d ab       	std	Y+53, r24	; 0x35
    2268:	9e ab       	std	Y+54, r25	; 0x36
    226a:	af ab       	std	Y+55, r26	; 0x37
    226c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6d a9       	ldd	r22, Y+53	; 0x35
    2270:	7e a9       	ldd	r23, Y+54	; 0x36
    2272:	8f a9       	ldd	r24, Y+55	; 0x37
    2274:	98 ad       	ldd	r25, Y+56	; 0x38
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a e7       	ldi	r20, 0x7A	; 122
    227c:	53 e4       	ldi	r21, 0x43	; 67
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	89 ab       	std	Y+49, r24	; 0x31
    2288:	9a ab       	std	Y+50, r25	; 0x32
    228a:	ab ab       	std	Y+51, r26	; 0x33
    228c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    228e:	69 a9       	ldd	r22, Y+49	; 0x31
    2290:	7a a9       	ldd	r23, Y+50	; 0x32
    2292:	8b a9       	ldd	r24, Y+51	; 0x33
    2294:	9c a9       	ldd	r25, Y+52	; 0x34
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_sendCommand+0x84>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	98 ab       	std	Y+48, r25	; 0x30
    22ac:	8f a7       	std	Y+47, r24	; 0x2f
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    22b0:	69 a9       	ldd	r22, Y+49	; 0x31
    22b2:	7a a9       	ldd	r23, Y+50	; 0x32
    22b4:	8b a9       	ldd	r24, Y+51	; 0x33
    22b6:	9c a9       	ldd	r25, Y+52	; 0x34
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6d a9       	ldd	r22, Y+53	; 0x35
    22ca:	7e a9       	ldd	r23, Y+54	; 0x36
    22cc:	8f a9       	ldd	r24, Y+55	; 0x37
    22ce:	98 ad       	ldd	r25, Y+56	; 0x38
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	98 ab       	std	Y+48, r25	; 0x30
    22ee:	8f a7       	std	Y+47, r24	; 0x2f
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_sendCommand+0xe4>
    22f2:	89 e1       	ldi	r24, 0x19	; 25
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9e a7       	std	Y+46, r25	; 0x2e
    22f8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    22fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_sendCommand+0xd2>
    2302:	9e a7       	std	Y+46, r25	; 0x2e
    2304:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8f a5       	ldd	r24, Y+47	; 0x2f
    2308:	98 a9       	ldd	r25, Y+48	; 0x30
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	98 ab       	std	Y+48, r25	; 0x30
    230e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8f a5       	ldd	r24, Y+47	; 0x2f
    2312:	98 a9       	ldd	r25, Y+48	; 0x30
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_sendCommand+0xc6>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	69 a9       	ldd	r22, Y+49	; 0x31
    231c:	7a a9       	ldd	r23, Y+50	; 0x32
    231e:	8b a9       	ldd	r24, Y+51	; 0x33
    2320:	9c a9       	ldd	r25, Y+52	; 0x34
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	98 ab       	std	Y+48, r25	; 0x30
    232c:	8f a7       	std	Y+47, r24	; 0x2f
    232e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2330:	98 a9       	ldd	r25, Y+48	; 0x30
    2332:	9c a7       	std	Y+44, r25	; 0x2c
    2334:	8b a7       	std	Y+43, r24	; 0x2b
    2336:	8b a5       	ldd	r24, Y+43	; 0x2b
    2338:	9c a5       	ldd	r25, Y+44	; 0x2c
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_sendCommand+0x10e>
    233e:	9c a7       	std	Y+44, r25	; 0x2c
    2340:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2342:	a2 e3       	ldi	r26, 0x32	; 50
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e2 e3       	ldi	r30, 0x32	; 50
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	80 64       	ori	r24, 0x40	; 64
    234e:	8c 93       	st	X, r24
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e8       	ldi	r26, 0x80	; 128
    2356:	bf e3       	ldi	r27, 0x3F	; 63
    2358:	8f a3       	std	Y+39, r24	; 0x27
    235a:	98 a7       	std	Y+40, r25	; 0x28
    235c:	a9 a7       	std	Y+41, r26	; 0x29
    235e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	6f a1       	ldd	r22, Y+39	; 0x27
    2362:	78 a5       	ldd	r23, Y+40	; 0x28
    2364:	89 a5       	ldd	r24, Y+41	; 0x29
    2366:	9a a5       	ldd	r25, Y+42	; 0x2a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a e7       	ldi	r20, 0x7A	; 122
    236e:	53 e4       	ldi	r21, 0x43	; 67
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8b a3       	std	Y+35, r24	; 0x23
    237a:	9c a3       	std	Y+36, r25	; 0x24
    237c:	ad a3       	std	Y+37, r26	; 0x25
    237e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2380:	6b a1       	ldd	r22, Y+35	; 0x23
    2382:	7c a1       	ldd	r23, Y+36	; 0x24
    2384:	8d a1       	ldd	r24, Y+37	; 0x25
    2386:	9e a1       	ldd	r25, Y+38	; 0x26
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	2c f4       	brge	.+10     	; 0x23a2 <LCD_sendCommand+0x176>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9a a3       	std	Y+34, r25	; 0x22
    239e:	89 a3       	std	Y+33, r24	; 0x21
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    23a2:	6b a1       	ldd	r22, Y+35	; 0x23
    23a4:	7c a1       	ldd	r23, Y+36	; 0x24
    23a6:	8d a1       	ldd	r24, Y+37	; 0x25
    23a8:	9e a1       	ldd	r25, Y+38	; 0x26
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b6:	18 16       	cp	r1, r24
    23b8:	4c f5       	brge	.+82     	; 0x240c <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ba:	6f a1       	ldd	r22, Y+39	; 0x27
    23bc:	78 a5       	ldd	r23, Y+40	; 0x28
    23be:	89 a5       	ldd	r24, Y+41	; 0x29
    23c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9a a3       	std	Y+34, r25	; 0x22
    23e0:	89 a3       	std	Y+33, r24	; 0x21
    23e2:	0f c0       	rjmp	.+30     	; 0x2402 <LCD_sendCommand+0x1d6>
    23e4:	89 e1       	ldi	r24, 0x19	; 25
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	98 a3       	std	Y+32, r25	; 0x20
    23ea:	8f 8f       	std	Y+31, r24	; 0x1f
    23ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ee:	98 a1       	ldd	r25, Y+32	; 0x20
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <LCD_sendCommand+0x1c4>
    23f4:	98 a3       	std	Y+32, r25	; 0x20
    23f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	89 a1       	ldd	r24, Y+33	; 0x21
    23fa:	9a a1       	ldd	r25, Y+34	; 0x22
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	9a a3       	std	Y+34, r25	; 0x22
    2400:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2402:	89 a1       	ldd	r24, Y+33	; 0x21
    2404:	9a a1       	ldd	r25, Y+34	; 0x22
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	69 f7       	brne	.-38     	; 0x23e4 <LCD_sendCommand+0x1b8>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240c:	6b a1       	ldd	r22, Y+35	; 0x23
    240e:	7c a1       	ldd	r23, Y+36	; 0x24
    2410:	8d a1       	ldd	r24, Y+37	; 0x25
    2412:	9e a1       	ldd	r25, Y+38	; 0x26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9a a3       	std	Y+34, r25	; 0x22
    241e:	89 a3       	std	Y+33, r24	; 0x21
    2420:	89 a1       	ldd	r24, Y+33	; 0x21
    2422:	9a a1       	ldd	r25, Y+34	; 0x22
    2424:	9e 8f       	std	Y+30, r25	; 0x1e
    2426:	8d 8f       	std	Y+29, r24	; 0x1d
    2428:	8d 8d       	ldd	r24, Y+29	; 0x1d
    242a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_sendCommand+0x200>
    2430:	9e 8f       	std	Y+30, r25	; 0x1e
    2432:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    2434:	e5 e3       	ldi	r30, 0x35	; 53
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	89 ad       	ldd	r24, Y+57	; 0x39
    243a:	80 83       	st	Z, r24
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 e8       	ldi	r26, 0x80	; 128
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	89 8f       	std	Y+25, r24	; 0x19
    2446:	9a 8f       	std	Y+26, r25	; 0x1a
    2448:	ab 8f       	std	Y+27, r26	; 0x1b
    244a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244c:	69 8d       	ldd	r22, Y+25	; 0x19
    244e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4a e7       	ldi	r20, 0x7A	; 122
    245a:	53 e4       	ldi	r21, 0x43	; 67
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8d 8b       	std	Y+21, r24	; 0x15
    2466:	9e 8b       	std	Y+22, r25	; 0x16
    2468:	af 8b       	std	Y+23, r26	; 0x17
    246a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	2c f4       	brge	.+10     	; 0x248e <LCD_sendCommand+0x262>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
    248c:	3f c0       	rjmp	.+126    	; 0x250c <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    248e:	6d 89       	ldd	r22, Y+21	; 0x15
    2490:	7e 89       	ldd	r23, Y+22	; 0x16
    2492:	8f 89       	ldd	r24, Y+23	; 0x17
    2494:	98 8d       	ldd	r25, Y+24	; 0x18
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	4c f5       	brge	.+82     	; 0x24f8 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	69 8d       	ldd	r22, Y+25	; 0x19
    24a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e2       	ldi	r20, 0x20	; 32
    24b4:	51 e4       	ldi	r21, 0x41	; 65
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9c 8b       	std	Y+20, r25	; 0x14
    24cc:	8b 8b       	std	Y+19, r24	; 0x13
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <LCD_sendCommand+0x2c2>
    24d0:	89 e1       	ldi	r24, 0x19	; 25
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9a 8b       	std	Y+18, r25	; 0x12
    24d6:	89 8b       	std	Y+17, r24	; 0x11
    24d8:	89 89       	ldd	r24, Y+17	; 0x11
    24da:	9a 89       	ldd	r25, Y+18	; 0x12
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_sendCommand+0x2b0>
    24e0:	9a 8b       	std	Y+18, r25	; 0x12
    24e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e4:	8b 89       	ldd	r24, Y+19	; 0x13
    24e6:	9c 89       	ldd	r25, Y+20	; 0x14
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	9c 8b       	std	Y+20, r25	; 0x14
    24ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ee:	8b 89       	ldd	r24, Y+19	; 0x13
    24f0:	9c 89       	ldd	r25, Y+20	; 0x14
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	69 f7       	brne	.-38     	; 0x24d0 <LCD_sendCommand+0x2a4>
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f8:	6d 89       	ldd	r22, Y+21	; 0x15
    24fa:	7e 89       	ldd	r23, Y+22	; 0x16
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9c 8b       	std	Y+20, r25	; 0x14
    250a:	8b 8b       	std	Y+19, r24	; 0x13
    250c:	8b 89       	ldd	r24, Y+19	; 0x13
    250e:	9c 89       	ldd	r25, Y+20	; 0x14
    2510:	98 8b       	std	Y+16, r25	; 0x10
    2512:	8f 87       	std	Y+15, r24	; 0x0f
    2514:	8f 85       	ldd	r24, Y+15	; 0x0f
    2516:	98 89       	ldd	r25, Y+16	; 0x10
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_sendCommand+0x2ec>
    251c:	98 8b       	std	Y+16, r25	; 0x10
    251e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2520:	a2 e3       	ldi	r26, 0x32	; 50
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e2 e3       	ldi	r30, 0x32	; 50
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	8f 7b       	andi	r24, 0xBF	; 191
    252c:	8c 93       	st	X, r24
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e8       	ldi	r26, 0x80	; 128
    2534:	bf e3       	ldi	r27, 0x3F	; 63
    2536:	8b 87       	std	Y+11, r24	; 0x0b
    2538:	9c 87       	std	Y+12, r25	; 0x0c
    253a:	ad 87       	std	Y+13, r26	; 0x0d
    253c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	53 e4       	ldi	r21, 0x43	; 67
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8f 83       	std	Y+7, r24	; 0x07
    2558:	98 87       	std	Y+8, r25	; 0x08
    255a:	a9 87       	std	Y+9, r26	; 0x09
    255c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <LCD_sendCommand+0x354>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <LCD_sendCommand+0x3b4>
    25c2:	89 e1       	ldi	r24, 0x19	; 25
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	8b 83       	std	Y+3, r24	; 0x03
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_sendCommand+0x3a2>
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <LCD_sendCommand+0x396>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_sendCommand+0x3de>
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2612:	e9 96       	adiw	r28, 0x39	; 57
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	e9 97       	sbiw	r28, 0x39	; 57
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    263a:	a2 e3       	ldi	r26, 0x32	; 50
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e2 e3       	ldi	r30, 0x32	; 50
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	80 61       	ori	r24, 0x10	; 16
    2646:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2648:	a2 e3       	ldi	r26, 0x32	; 50
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e2 e3       	ldi	r30, 0x32	; 50
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	8f 7d       	andi	r24, 0xDF	; 223
    2654:	8c 93       	st	X, r24
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a0 e8       	ldi	r26, 0x80	; 128
    265c:	bf e3       	ldi	r27, 0x3F	; 63
    265e:	8d ab       	std	Y+53, r24	; 0x35
    2660:	9e ab       	std	Y+54, r25	; 0x36
    2662:	af ab       	std	Y+55, r26	; 0x37
    2664:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	6d a9       	ldd	r22, Y+53	; 0x35
    2668:	7e a9       	ldd	r23, Y+54	; 0x36
    266a:	8f a9       	ldd	r24, Y+55	; 0x37
    266c:	98 ad       	ldd	r25, Y+56	; 0x38
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4a e7       	ldi	r20, 0x7A	; 122
    2674:	53 e4       	ldi	r21, 0x43	; 67
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	89 ab       	std	Y+49, r24	; 0x31
    2680:	9a ab       	std	Y+50, r25	; 0x32
    2682:	ab ab       	std	Y+51, r26	; 0x33
    2684:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2686:	69 a9       	ldd	r22, Y+49	; 0x31
    2688:	7a a9       	ldd	r23, Y+50	; 0x32
    268a:	8b a9       	ldd	r24, Y+51	; 0x33
    268c:	9c a9       	ldd	r25, Y+52	; 0x34
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	2c f4       	brge	.+10     	; 0x26a8 <LCD_displayCharacter+0x84>
		__ticks = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
    26a6:	3f c0       	rjmp	.+126    	; 0x2726 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    26a8:	69 a9       	ldd	r22, Y+49	; 0x31
    26aa:	7a a9       	ldd	r23, Y+50	; 0x32
    26ac:	8b a9       	ldd	r24, Y+51	; 0x33
    26ae:	9c a9       	ldd	r25, Y+52	; 0x34
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	4c f5       	brge	.+82     	; 0x2712 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	6d a9       	ldd	r22, Y+53	; 0x35
    26c2:	7e a9       	ldd	r23, Y+54	; 0x36
    26c4:	8f a9       	ldd	r24, Y+55	; 0x37
    26c6:	98 ad       	ldd	r25, Y+56	; 0x38
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	98 ab       	std	Y+48, r25	; 0x30
    26e6:	8f a7       	std	Y+47, r24	; 0x2f
    26e8:	0f c0       	rjmp	.+30     	; 0x2708 <LCD_displayCharacter+0xe4>
    26ea:	89 e1       	ldi	r24, 0x19	; 25
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9e a7       	std	Y+46, r25	; 0x2e
    26f0:	8d a7       	std	Y+45, r24	; 0x2d
    26f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_displayCharacter+0xd2>
    26fa:	9e a7       	std	Y+46, r25	; 0x2e
    26fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2700:	98 a9       	ldd	r25, Y+48	; 0x30
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	98 ab       	std	Y+48, r25	; 0x30
    2706:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2708:	8f a5       	ldd	r24, Y+47	; 0x2f
    270a:	98 a9       	ldd	r25, Y+48	; 0x30
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	69 f7       	brne	.-38     	; 0x26ea <LCD_displayCharacter+0xc6>
    2710:	14 c0       	rjmp	.+40     	; 0x273a <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	69 a9       	ldd	r22, Y+49	; 0x31
    2714:	7a a9       	ldd	r23, Y+50	; 0x32
    2716:	8b a9       	ldd	r24, Y+51	; 0x33
    2718:	9c a9       	ldd	r25, Y+52	; 0x34
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	98 ab       	std	Y+48, r25	; 0x30
    2724:	8f a7       	std	Y+47, r24	; 0x2f
    2726:	8f a5       	ldd	r24, Y+47	; 0x2f
    2728:	98 a9       	ldd	r25, Y+48	; 0x30
    272a:	9c a7       	std	Y+44, r25	; 0x2c
    272c:	8b a7       	std	Y+43, r24	; 0x2b
    272e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2730:	9c a5       	ldd	r25, Y+44	; 0x2c
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_displayCharacter+0x10e>
    2736:	9c a7       	std	Y+44, r25	; 0x2c
    2738:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    273a:	a2 e3       	ldi	r26, 0x32	; 50
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e2 e3       	ldi	r30, 0x32	; 50
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	80 64       	ori	r24, 0x40	; 64
    2746:	8c 93       	st	X, r24
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	bf e3       	ldi	r27, 0x3F	; 63
    2750:	8f a3       	std	Y+39, r24	; 0x27
    2752:	98 a7       	std	Y+40, r25	; 0x28
    2754:	a9 a7       	std	Y+41, r26	; 0x29
    2756:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6f a1       	ldd	r22, Y+39	; 0x27
    275a:	78 a5       	ldd	r23, Y+40	; 0x28
    275c:	89 a5       	ldd	r24, Y+41	; 0x29
    275e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a e7       	ldi	r20, 0x7A	; 122
    2766:	53 e4       	ldi	r21, 0x43	; 67
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8b a3       	std	Y+35, r24	; 0x23
    2772:	9c a3       	std	Y+36, r25	; 0x24
    2774:	ad a3       	std	Y+37, r26	; 0x25
    2776:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2778:	6b a1       	ldd	r22, Y+35	; 0x23
    277a:	7c a1       	ldd	r23, Y+36	; 0x24
    277c:	8d a1       	ldd	r24, Y+37	; 0x25
    277e:	9e a1       	ldd	r25, Y+38	; 0x26
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <LCD_displayCharacter+0x176>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9a a3       	std	Y+34, r25	; 0x22
    2796:	89 a3       	std	Y+33, r24	; 0x21
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    279a:	6b a1       	ldd	r22, Y+35	; 0x23
    279c:	7c a1       	ldd	r23, Y+36	; 0x24
    279e:	8d a1       	ldd	r24, Y+37	; 0x25
    27a0:	9e a1       	ldd	r25, Y+38	; 0x26
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6f a1       	ldd	r22, Y+39	; 0x27
    27b4:	78 a5       	ldd	r23, Y+40	; 0x28
    27b6:	89 a5       	ldd	r24, Y+41	; 0x29
    27b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9a a3       	std	Y+34, r25	; 0x22
    27d8:	89 a3       	std	Y+33, r24	; 0x21
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <LCD_displayCharacter+0x1d6>
    27dc:	89 e1       	ldi	r24, 0x19	; 25
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	98 a3       	std	Y+32, r25	; 0x20
    27e2:	8f 8f       	std	Y+31, r24	; 0x1f
    27e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e6:	98 a1       	ldd	r25, Y+32	; 0x20
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_displayCharacter+0x1c4>
    27ec:	98 a3       	std	Y+32, r25	; 0x20
    27ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	89 a1       	ldd	r24, Y+33	; 0x21
    27f2:	9a a1       	ldd	r25, Y+34	; 0x22
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9a a3       	std	Y+34, r25	; 0x22
    27f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	89 a1       	ldd	r24, Y+33	; 0x21
    27fc:	9a a1       	ldd	r25, Y+34	; 0x22
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <LCD_displayCharacter+0x1b8>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6b a1       	ldd	r22, Y+35	; 0x23
    2806:	7c a1       	ldd	r23, Y+36	; 0x24
    2808:	8d a1       	ldd	r24, Y+37	; 0x25
    280a:	9e a1       	ldd	r25, Y+38	; 0x26
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9a a3       	std	Y+34, r25	; 0x22
    2816:	89 a3       	std	Y+33, r24	; 0x21
    2818:	89 a1       	ldd	r24, Y+33	; 0x21
    281a:	9a a1       	ldd	r25, Y+34	; 0x22
    281c:	9e 8f       	std	Y+30, r25	; 0x1e
    281e:	8d 8f       	std	Y+29, r24	; 0x1d
    2820:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2822:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_displayCharacter+0x200>
    2828:	9e 8f       	std	Y+30, r25	; 0x1e
    282a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    282c:	e5 e3       	ldi	r30, 0x35	; 53
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	89 ad       	ldd	r24, Y+57	; 0x39
    2832:	80 83       	st	Z, r24
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e8       	ldi	r26, 0x80	; 128
    283a:	bf e3       	ldi	r27, 0x3F	; 63
    283c:	89 8f       	std	Y+25, r24	; 0x19
    283e:	9a 8f       	std	Y+26, r25	; 0x1a
    2840:	ab 8f       	std	Y+27, r26	; 0x1b
    2842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	69 8d       	ldd	r22, Y+25	; 0x19
    2846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a e7       	ldi	r20, 0x7A	; 122
    2852:	53 e4       	ldi	r21, 0x43	; 67
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8d 8b       	std	Y+21, r24	; 0x15
    285e:	9e 8b       	std	Y+22, r25	; 0x16
    2860:	af 8b       	std	Y+23, r26	; 0x17
    2862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <LCD_displayCharacter+0x262>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9c 8b       	std	Y+20, r25	; 0x14
    2882:	8b 8b       	std	Y+19, r24	; 0x13
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2886:	6d 89       	ldd	r22, Y+21	; 0x15
    2888:	7e 89       	ldd	r23, Y+22	; 0x16
    288a:	8f 89       	ldd	r24, Y+23	; 0x17
    288c:	98 8d       	ldd	r25, Y+24	; 0x18
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	69 8d       	ldd	r22, Y+25	; 0x19
    28a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <LCD_displayCharacter+0x2c2>
    28c8:	89 e1       	ldi	r24, 0x19	; 25
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9a 8b       	std	Y+18, r25	; 0x12
    28ce:	89 8b       	std	Y+17, r24	; 0x11
    28d0:	89 89       	ldd	r24, Y+17	; 0x11
    28d2:	9a 89       	ldd	r25, Y+18	; 0x12
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_displayCharacter+0x2b0>
    28d8:	9a 8b       	std	Y+18, r25	; 0x12
    28da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8b 89       	ldd	r24, Y+19	; 0x13
    28de:	9c 89       	ldd	r25, Y+20	; 0x14
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8b 89       	ldd	r24, Y+19	; 0x13
    28e8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <LCD_displayCharacter+0x2a4>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6d 89       	ldd	r22, Y+21	; 0x15
    28f2:	7e 89       	ldd	r23, Y+22	; 0x16
    28f4:	8f 89       	ldd	r24, Y+23	; 0x17
    28f6:	98 8d       	ldd	r25, Y+24	; 0x18
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	98 8b       	std	Y+16, r25	; 0x10
    290a:	8f 87       	std	Y+15, r24	; 0x0f
    290c:	8f 85       	ldd	r24, Y+15	; 0x0f
    290e:	98 89       	ldd	r25, Y+16	; 0x10
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_displayCharacter+0x2ec>
    2914:	98 8b       	std	Y+16, r25	; 0x10
    2916:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2918:	a2 e3       	ldi	r26, 0x32	; 50
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e2 e3       	ldi	r30, 0x32	; 50
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	8f 7b       	andi	r24, 0xBF	; 191
    2924:	8c 93       	st	X, r24
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e8       	ldi	r26, 0x80	; 128
    292c:	bf e3       	ldi	r27, 0x3F	; 63
    292e:	8b 87       	std	Y+11, r24	; 0x0b
    2930:	9c 87       	std	Y+12, r25	; 0x0c
    2932:	ad 87       	std	Y+13, r26	; 0x0d
    2934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2936:	6b 85       	ldd	r22, Y+11	; 0x0b
    2938:	7c 85       	ldd	r23, Y+12	; 0x0c
    293a:	8d 85       	ldd	r24, Y+13	; 0x0d
    293c:	9e 85       	ldd	r25, Y+14	; 0x0e
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	4a e7       	ldi	r20, 0x7A	; 122
    2944:	53 e4       	ldi	r21, 0x43	; 67
    2946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	8f 83       	std	Y+7, r24	; 0x07
    2950:	98 87       	std	Y+8, r25	; 0x08
    2952:	a9 87       	std	Y+9, r26	; 0x09
    2954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e8       	ldi	r20, 0x80	; 128
    2964:	5f e3       	ldi	r21, 0x3F	; 63
    2966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296a:	88 23       	and	r24, r24
    296c:	2c f4       	brge	.+10     	; 0x2978 <LCD_displayCharacter+0x354>
		__ticks = 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9e 83       	std	Y+6, r25	; 0x06
    2974:	8d 83       	std	Y+5, r24	; 0x05
    2976:	3f c0       	rjmp	.+126    	; 0x29f6 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	3f ef       	ldi	r19, 0xFF	; 255
    2984:	4f e7       	ldi	r20, 0x7F	; 127
    2986:	57 e4       	ldi	r21, 0x47	; 71
    2988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298c:	18 16       	cp	r1, r24
    298e:	4c f5       	brge	.+82     	; 0x29e2 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2990:	6b 85       	ldd	r22, Y+11	; 0x0b
    2992:	7c 85       	ldd	r23, Y+12	; 0x0c
    2994:	8d 85       	ldd	r24, Y+13	; 0x0d
    2996:	9e 85       	ldd	r25, Y+14	; 0x0e
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e2       	ldi	r20, 0x20	; 32
    299e:	51 e4       	ldi	r21, 0x41	; 65
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	0f c0       	rjmp	.+30     	; 0x29d8 <LCD_displayCharacter+0x3b4>
    29ba:	89 e1       	ldi	r24, 0x19	; 25
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	9c 81       	ldd	r25, Y+4	; 0x04
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <LCD_displayCharacter+0x3a2>
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	69 f7       	brne	.-38     	; 0x29ba <LCD_displayCharacter+0x396>
    29e0:	14 c0       	rjmp	.+40     	; 0x2a0a <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <LCD_displayCharacter+0x3de>
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a0a:	e9 96       	adiw	r28, 0x39	; 57
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <LCD_displayString+0x6>
    2a22:	0f 92       	push	r0
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	9b 83       	std	Y+3, r25	; 0x03
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a2c:	19 82       	std	Y+1, r1	; 0x01
    2a2e:	0e c0       	rjmp	.+28     	; 0x2a4c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	e2 0f       	add	r30, r18
    2a3e:	f3 1f       	adc	r31, r19
    2a40:	80 81       	ld	r24, Z
    2a42:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_displayCharacter>
		i++;
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	9b 81       	ldd	r25, Y+3	; 0x03
    2a56:	fc 01       	movw	r30, r24
    2a58:	e2 0f       	add	r30, r18
    2a5a:	f3 1f       	adc	r31, r19
    2a5c:	80 81       	ld	r24, Z
    2a5e:	88 23       	and	r24, r24
    2a60:	39 f7       	brne	.-50     	; 0x2a30 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <LCD_goToRowColumn+0x6>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <LCD_goToRowColumn+0x8>
    2a76:	0f 92       	push	r0
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
    2a7e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	3d 83       	std	Y+5, r19	; 0x05
    2a88:	2c 83       	std	Y+4, r18	; 0x04
    2a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	91 05       	cpc	r25, r1
    2a92:	c1 f0       	breq	.+48     	; 0x2ac4 <LCD_goToRowColumn+0x56>
    2a94:	2c 81       	ldd	r18, Y+4	; 0x04
    2a96:	3d 81       	ldd	r19, Y+5	; 0x05
    2a98:	22 30       	cpi	r18, 0x02	; 2
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <LCD_goToRowColumn+0x3a>
    2a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	61 f0       	breq	.+24     	; 0x2abe <LCD_goToRowColumn+0x50>
    2aa6:	19 c0       	rjmp	.+50     	; 0x2ada <LCD_goToRowColumn+0x6c>
    2aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    2aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    2aac:	22 30       	cpi	r18, 0x02	; 2
    2aae:	31 05       	cpc	r19, r1
    2ab0:	69 f0       	breq	.+26     	; 0x2acc <LCD_goToRowColumn+0x5e>
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab6:	83 30       	cpi	r24, 0x03	; 3
    2ab8:	91 05       	cpc	r25, r1
    2aba:	61 f0       	breq	.+24     	; 0x2ad4 <LCD_goToRowColumn+0x66>
    2abc:	0e c0       	rjmp	.+28     	; 0x2ada <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	0b c0       	rjmp	.+22     	; 0x2ada <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	80 5c       	subi	r24, 0xC0	; 192
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	07 c0       	rjmp	.+14     	; 0x2ada <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	80 5f       	subi	r24, 0xF0	; 240
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	03 c0       	rjmp	.+6      	; 0x2ada <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	80 5b       	subi	r24, 0xB0	; 176
    2ad8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	80 68       	ori	r24, 0x80	; 128
    2ade:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_sendCommand>
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <LCD_displayStringRowColumn+0x6>
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <LCD_displayStringRowColumn+0x8>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	6a 83       	std	Y+2, r22	; 0x02
    2b02:	5c 83       	std	Y+4, r21	; 0x04
    2b04:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	6a 81       	ldd	r22, Y+2	; 0x02
    2b0a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_displayString>
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	62 97       	sbiw	r28, 0x12	; 18
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	9a 8b       	std	Y+18, r25	; 0x12
    2b3a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2b3c:	89 89       	ldd	r24, Y+17	; 0x11
    2b3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b40:	9e 01       	movw	r18, r28
    2b42:	2f 5f       	subi	r18, 0xFF	; 255
    2b44:	3f 4f       	sbci	r19, 0xFF	; 255
    2b46:	b9 01       	movw	r22, r18
    2b48:	4a e0       	ldi	r20, 0x0A	; 10
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	0e 94 67 19 	call	0x32ce	; 0x32ce <itoa>
   LCD_displayString(buff);
    2b50:	ce 01       	movw	r24, r28
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_displayString>
}
    2b58:	62 96       	adiw	r28, 0x12	; 18
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_sendCommand>
}
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <main>:

void add_count(void);
void get_new_password(void);
void repeat_password(void);
/*------------------------------------------Main Function--------------------------------------*/
int main(void){
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	2e 97       	sbiw	r28, 0x0e	; 14
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
	struct UART_init UART1;
	struct TIMER_init Timer1;
	UART1.parity_mode=1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	89 83       	std	Y+1, r24	; 0x01
	UART1.char_size=8;
    2b96:	88 e0       	ldi	r24, 0x08	; 8
    2b98:	8a 83       	std	Y+2, r24	; 0x02
	UART1.baud_rate=9600;
    2b9a:	80 e8       	ldi	r24, 0x80	; 128
    2b9c:	95 e2       	ldi	r25, 0x25	; 37
    2b9e:	9d 83       	std	Y+5, r25	; 0x05
    2ba0:	8c 83       	std	Y+4, r24	; 0x04
	UART1.stop_bit=1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	8b 83       	std	Y+3, r24	; 0x03
	Timer1.comp_match_mode=0;
    2ba6:	1c 86       	std	Y+12, r1	; 0x0c
	Timer1.timer=1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	8e 83       	std	Y+6, r24	; 0x06
	Timer1.comp_value=39062;
    2bac:	86 e9       	ldi	r24, 0x96	; 150
    2bae:	98 e9       	ldi	r25, 0x98	; 152
    2bb0:	9b 87       	std	Y+11, r25	; 0x0b
    2bb2:	8a 87       	std	Y+10, r24	; 0x0a
	Timer1.mode=1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	8f 83       	std	Y+7, r24	; 0x07
	Timer1.prescaler=1024;
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	94 e0       	ldi	r25, 0x04	; 4
    2bbc:	99 87       	std	Y+9, r25	; 0x09
    2bbe:	88 87       	std	Y+8, r24	; 0x08
	UART_Init(&UART1);
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <UART_Init>
	TIMER_Init(&Timer1);
    2bc8:	ce 01       	movw	r24, r28
    2bca:	06 96       	adiw	r24, 0x06	; 6
    2bcc:	0e 94 ed 06 	call	0xdda	; 0xdda <TIMER_Init>
	SREG|=(1<<7);
    2bd0:	af e5       	ldi	r26, 0x5F	; 95
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ef e5       	ldi	r30, 0x5F	; 95
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 68       	ori	r24, 0x80	; 128
    2bdc:	8c 93       	st	X, r24
	TIMER_Stop(1);
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	0e 94 3e 0c 	call	0x187c	; 0x187c <TIMER_Stop>
	TIMER_Timer1SetCallBack(&add_count);
    2be4:	85 e3       	ldi	r24, 0x35	; 53
    2be6:	96 e1       	ldi	r25, 0x16	; 22
    2be8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <TIMER_Timer1SetCallBack>
	LCD_init();
    2bec:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_init>


	while(1){
		status=UART_RecieveByte();
    2bf0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <UART_RecieveByte>
    2bf4:	80 93 9c 00 	sts	0x009C, r24
		switch(status){
    2bf8:	80 91 9c 00 	lds	r24, 0x009C
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3e 87       	std	Y+14, r19	; 0x0e
    2c02:	2d 87       	std	Y+13, r18	; 0x0d
    2c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c08:	81 33       	cpi	r24, 0x31	; 49
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	c1 f0       	breq	.+48     	; 0x2c3e <main+0xc0>
    2c0e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c10:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c12:	22 33       	cpi	r18, 0x32	; 50
    2c14:	31 05       	cpc	r19, r1
    2c16:	09 f1       	breq	.+66     	; 0x2c5a <main+0xdc>
    2c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1c:	80 33       	cpi	r24, 0x30	; 48
    2c1e:	91 05       	cpc	r25, r1
    2c20:	39 f7       	brne	.-50     	; 0x2bf0 <main+0x72>

		case '0':
			LCD_displayStringRowColumn(0,0,"ENTER NEW PASS");
    2c22:	20 e6       	ldi	r18, 0x60	; 96
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	60 e0       	ldi	r22, 0x00	; 0
    2c2a:	a9 01       	movw	r20, r18
    2c2c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,0);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	60 e0       	ldi	r22, 0x00	; 0
    2c34:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_goToRowColumn>
			get_new_password();
    2c38:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <get_new_password>
    2c3c:	d9 cf       	rjmp	.-78     	; 0x2bf0 <main+0x72>
			break;
		case '1':
			LCD_displayStringRowColumn(0,0,"reenter pass");
    2c3e:	2f e6       	ldi	r18, 0x6F	; 111
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	a9 01       	movw	r20, r18
    2c48:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,0);
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_goToRowColumn>
			repeat_password();
    2c54:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <repeat_password>
    2c58:	cb cf       	rjmp	.-106    	; 0x2bf0 <main+0x72>
			break;
		case '2' :
			LCD_displayStringRowColumn(0,0,"Password saved");
    2c5a:	2c e7       	ldi	r18, 0x7C	; 124
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	a9 01       	movw	r20, r18
    2c64:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayStringRowColumn>
    2c68:	c3 cf       	rjmp	.-122    	; 0x2bf0 <main+0x72>

00002c6a <add_count>:

/*--------------------------------------------Functions----------------------------------------*/



void add_count(void){
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
	count++;
    2c72:	80 91 9a 00 	lds	r24, 0x009A
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	80 93 9a 00 	sts	0x009A, r24
	if (count==2){
    2c7c:	80 91 9a 00 	lds	r24, 0x009A
    2c80:	82 30       	cpi	r24, 0x02	; 2
    2c82:	29 f4       	brne	.+10     	; 0x2c8e <add_count+0x24>
		count=0;
    2c84:	10 92 9a 00 	sts	0x009A, r1
		Timer_finish=1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	80 93 9b 00 	sts	0x009B, r24
	}
}
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <get_new_password>:

void get_new_password(void){
    2c94:	0f 93       	push	r16
    2c96:	1f 93       	push	r17
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	a2 97       	sbiw	r28, 0x22	; 34
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
	uint8 str[5];
	uint8 i=0;
    2cac:	1d 8e       	std	Y+29, r1	; 0x1d
	for(i=0;i<5;i++){
    2cae:	1d 8e       	std	Y+29, r1	; 0x1d
    2cb0:	84 c0       	rjmp	.+264    	; 0x2dba <get_new_password+0x126>

		str[i]=KeyPad_getPressedKey();
    2cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb4:	08 2f       	mov	r16, r24
    2cb6:	10 e0       	ldi	r17, 0x00	; 0
    2cb8:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <KeyPad_getPressedKey>
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	4e 96       	adiw	r24, 0x1e	; 30
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e0 0f       	add	r30, r16
    2cc6:	f1 1f       	adc	r31, r17
    2cc8:	20 83       	st	Z, r18
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a8 e4       	ldi	r26, 0x48	; 72
    2cd0:	b3 e4       	ldi	r27, 0x43	; 67
    2cd2:	89 8f       	std	Y+25, r24	; 0x19
    2cd4:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd6:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cda:	69 8d       	ldd	r22, Y+25	; 0x19
    2cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a ef       	ldi	r20, 0xFA	; 250
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	8d 8b       	std	Y+21, r24	; 0x15
    2cf4:	9e 8b       	std	Y+22, r25	; 0x16
    2cf6:	af 8b       	std	Y+23, r26	; 0x17
    2cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2d00:	98 8d       	ldd	r25, Y+24	; 0x18
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	5f e3       	ldi	r21, 0x3F	; 63
    2d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	2c f4       	brge	.+10     	; 0x2d1c <get_new_password+0x88>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9c 8b       	std	Y+20, r25	; 0x14
    2d18:	8b 8b       	std	Y+19, r24	; 0x13
    2d1a:	3f c0       	rjmp	.+126    	; 0x2d9a <get_new_password+0x106>
	else if (__tmp > 65535)
    2d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d20:	8f 89       	ldd	r24, Y+23	; 0x17
    2d22:	98 8d       	ldd	r25, Y+24	; 0x18
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	3f ef       	ldi	r19, 0xFF	; 255
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	57 e4       	ldi	r21, 0x47	; 71
    2d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	4c f5       	brge	.+82     	; 0x2d86 <get_new_password+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d34:	69 8d       	ldd	r22, Y+25	; 0x19
    2d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	51 e4       	ldi	r21, 0x41	; 65
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9c 8b       	std	Y+20, r25	; 0x14
    2d5a:	8b 8b       	std	Y+19, r24	; 0x13
    2d5c:	0f c0       	rjmp	.+30     	; 0x2d7c <get_new_password+0xe8>
    2d5e:	88 ec       	ldi	r24, 0xC8	; 200
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	9a 8b       	std	Y+18, r25	; 0x12
    2d64:	89 8b       	std	Y+17, r24	; 0x11
    2d66:	89 89       	ldd	r24, Y+17	; 0x11
    2d68:	9a 89       	ldd	r25, Y+18	; 0x12
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <get_new_password+0xd6>
    2d6e:	9a 8b       	std	Y+18, r25	; 0x12
    2d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	8b 89       	ldd	r24, Y+19	; 0x13
    2d74:	9c 89       	ldd	r25, Y+20	; 0x14
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	69 f7       	brne	.-38     	; 0x2d5e <get_new_password+0xca>
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <get_new_password+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	6d 89       	ldd	r22, Y+21	; 0x15
    2d88:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9c 8b       	std	Y+20, r25	; 0x14
    2d98:	8b 8b       	std	Y+19, r24	; 0x13
    2d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9e:	98 8b       	std	Y+16, r25	; 0x10
    2da0:	8f 87       	std	Y+15, r24	; 0x0f
    2da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da4:	98 89       	ldd	r25, Y+16	; 0x10
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <get_new_password+0x112>
    2daa:	98 8b       	std	Y+16, r25	; 0x10
    2dac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LCD_displayCharacter('*');
    2dae:	8a e2       	ldi	r24, 0x2A	; 42
    2db0:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_displayCharacter>
}

void get_new_password(void){
	uint8 str[5];
	uint8 i=0;
	for(i=0;i<5;i++){
    2db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db6:	8f 5f       	subi	r24, 0xFF	; 255
    2db8:	8d 8f       	std	Y+29, r24	; 0x1d
    2dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dbc:	85 30       	cpi	r24, 0x05	; 5
    2dbe:	08 f4       	brcc	.+2      	; 0x2dc2 <get_new_password+0x12e>
    2dc0:	78 cf       	rjmp	.-272    	; 0x2cb2 <get_new_password+0x1e>
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a8 e4       	ldi	r26, 0x48	; 72
    2dc8:	b2 e4       	ldi	r27, 0x42	; 66
    2dca:	8b 87       	std	Y+11, r24	; 0x0b
    2dcc:	9c 87       	std	Y+12, r25	; 0x0c
    2dce:	ad 87       	std	Y+13, r26	; 0x0d
    2dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4a ef       	ldi	r20, 0xFA	; 250
    2de0:	54 e4       	ldi	r21, 0x44	; 68
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	8f 83       	std	Y+7, r24	; 0x07
    2dec:	98 87       	std	Y+8, r25	; 0x08
    2dee:	a9 87       	std	Y+9, r26	; 0x09
    2df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df2:	6f 81       	ldd	r22, Y+7	; 0x07
    2df4:	78 85       	ldd	r23, Y+8	; 0x08
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	2c f4       	brge	.+10     	; 0x2e14 <get_new_password+0x180>
		__ticks = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
    2e10:	8d 83       	std	Y+5, r24	; 0x05
    2e12:	3f c0       	rjmp	.+126    	; 0x2e92 <get_new_password+0x1fe>
	else if (__tmp > 65535)
    2e14:	6f 81       	ldd	r22, Y+7	; 0x07
    2e16:	78 85       	ldd	r23, Y+8	; 0x08
    2e18:	89 85       	ldd	r24, Y+9	; 0x09
    2e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	57 e4       	ldi	r21, 0x47	; 71
    2e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	4c f5       	brge	.+82     	; 0x2e7e <get_new_password+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e2       	ldi	r20, 0x20	; 32
    2e3a:	51 e4       	ldi	r21, 0x41	; 65
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <get_new_password+0x1e0>
    2e56:	88 ec       	ldi	r24, 0xC8	; 200
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	9c 83       	std	Y+4, r25	; 0x04
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <get_new_password+0x1ce>
    2e66:	9c 83       	std	Y+4, r25	; 0x04
    2e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
    2e76:	9e 81       	ldd	r25, Y+6	; 0x06
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	69 f7       	brne	.-38     	; 0x2e56 <get_new_password+0x1c2>
    2e7c:	14 c0       	rjmp	.+40     	; 0x2ea6 <get_new_password+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e80:	78 85       	ldd	r23, Y+8	; 0x08
    2e82:	89 85       	ldd	r24, Y+9	; 0x09
    2e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	9a 83       	std	Y+2, r25	; 0x02
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <get_new_password+0x20a>
    2ea2:	9a 83       	std	Y+2, r25	; 0x02
    2ea4:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter('*');

	}

	_delay_ms(50);
	for(i=0;i<5;i++){
    2ea6:	1d 8e       	std	Y+29, r1	; 0x1d
    2ea8:	0e c0       	rjmp	.+28     	; 0x2ec6 <get_new_password+0x232>
		//while((UART_RecieveByte()!='0')){}
		UART_SendByte(str[i]);
    2eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	4e 96       	adiw	r24, 0x1e	; 30
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	e2 0f       	add	r30, r18
    2eb8:	f3 1f       	adc	r31, r19
    2eba:	80 81       	ld	r24, Z
    2ebc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <UART_SendByte>
		LCD_displayCharacter('*');

	}

	_delay_ms(50);
	for(i=0;i<5;i++){
    2ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec8:	85 30       	cpi	r24, 0x05	; 5
    2eca:	78 f3       	brcs	.-34     	; 0x2eaa <get_new_password+0x216>
		//while((UART_RecieveByte()!='0')){}
		UART_SendByte(str[i]);

	}

}
    2ecc:	a2 96       	adiw	r28, 0x22	; 34
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	08 95       	ret

00002ee2 <repeat_password>:
void repeat_password(void){
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	a2 97       	sbiw	r28, 0x22	; 34
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
	uint8 str[5];
	uint8 i=0;
    2efa:	1d 8e       	std	Y+29, r1	; 0x1d
	for(i=0;i<5;i++){
    2efc:	1d 8e       	std	Y+29, r1	; 0x1d
    2efe:	84 c0       	rjmp	.+264    	; 0x3008 <repeat_password+0x126>

		str[i]=KeyPad_getPressedKey();
    2f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f02:	08 2f       	mov	r16, r24
    2f04:	10 e0       	ldi	r17, 0x00	; 0
    2f06:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <KeyPad_getPressedKey>
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	4e 96       	adiw	r24, 0x1e	; 30
    2f10:	fc 01       	movw	r30, r24
    2f12:	e0 0f       	add	r30, r16
    2f14:	f1 1f       	adc	r31, r17
    2f16:	20 83       	st	Z, r18
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	a8 e4       	ldi	r26, 0x48	; 72
    2f1e:	b3 e4       	ldi	r27, 0x43	; 67
    2f20:	89 8f       	std	Y+25, r24	; 0x19
    2f22:	9a 8f       	std	Y+26, r25	; 0x1a
    2f24:	ab 8f       	std	Y+27, r26	; 0x1b
    2f26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f28:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	4a ef       	ldi	r20, 0xFA	; 250
    2f36:	54 e4       	ldi	r21, 0x44	; 68
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	8d 8b       	std	Y+21, r24	; 0x15
    2f42:	9e 8b       	std	Y+22, r25	; 0x16
    2f44:	af 8b       	std	Y+23, r26	; 0x17
    2f46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f48:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5f e3       	ldi	r21, 0x3F	; 63
    2f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <repeat_password+0x88>
		__ticks = 1;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9c 8b       	std	Y+20, r25	; 0x14
    2f66:	8b 8b       	std	Y+19, r24	; 0x13
    2f68:	3f c0       	rjmp	.+126    	; 0x2fe8 <repeat_password+0x106>
	else if (__tmp > 65535)
    2f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f70:	98 8d       	ldd	r25, Y+24	; 0x18
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	57 e4       	ldi	r21, 0x47	; 71
    2f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	4c f5       	brge	.+82     	; 0x2fd4 <repeat_password+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f82:	69 8d       	ldd	r22, Y+25	; 0x19
    2f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e2       	ldi	r20, 0x20	; 32
    2f90:	51 e4       	ldi	r21, 0x41	; 65
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9c 8b       	std	Y+20, r25	; 0x14
    2fa8:	8b 8b       	std	Y+19, r24	; 0x13
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <repeat_password+0xe8>
    2fac:	88 ec       	ldi	r24, 0xC8	; 200
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9a 8b       	std	Y+18, r25	; 0x12
    2fb2:	89 8b       	std	Y+17, r24	; 0x11
    2fb4:	89 89       	ldd	r24, Y+17	; 0x11
    2fb6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <repeat_password+0xd6>
    2fbc:	9a 8b       	std	Y+18, r25	; 0x12
    2fbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	9c 8b       	std	Y+20, r25	; 0x14
    2fc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	69 f7       	brne	.-38     	; 0x2fac <repeat_password+0xca>
    2fd2:	14 c0       	rjmp	.+40     	; 0x2ffc <repeat_password+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fda:	98 8d       	ldd	r25, Y+24	; 0x18
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9c 8b       	std	Y+20, r25	; 0x14
    2fe6:	8b 8b       	std	Y+19, r24	; 0x13
    2fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fea:	9c 89       	ldd	r25, Y+20	; 0x14
    2fec:	98 8b       	std	Y+16, r25	; 0x10
    2fee:	8f 87       	std	Y+15, r24	; 0x0f
    2ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff2:	98 89       	ldd	r25, Y+16	; 0x10
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <repeat_password+0x112>
    2ff8:	98 8b       	std	Y+16, r25	; 0x10
    2ffa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LCD_displayCharacter('*');
    2ffc:	8a e2       	ldi	r24, 0x2A	; 42
    2ffe:	0e 94 12 13 	call	0x2624	; 0x2624 <LCD_displayCharacter>

}
void repeat_password(void){
	uint8 str[5];
	uint8 i=0;
	for(i=0;i<5;i++){
    3002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	8d 8f       	std	Y+29, r24	; 0x1d
    3008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    300a:	85 30       	cpi	r24, 0x05	; 5
    300c:	08 f4       	brcc	.+2      	; 0x3010 <repeat_password+0x12e>
    300e:	78 cf       	rjmp	.-272    	; 0x2f00 <repeat_password+0x1e>
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	a8 e4       	ldi	r26, 0x48	; 72
    3016:	b2 e4       	ldi	r27, 0x42	; 66
    3018:	8b 87       	std	Y+11, r24	; 0x0b
    301a:	9c 87       	std	Y+12, r25	; 0x0c
    301c:	ad 87       	std	Y+13, r26	; 0x0d
    301e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3020:	6b 85       	ldd	r22, Y+11	; 0x0b
    3022:	7c 85       	ldd	r23, Y+12	; 0x0c
    3024:	8d 85       	ldd	r24, Y+13	; 0x0d
    3026:	9e 85       	ldd	r25, Y+14	; 0x0e
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	4a ef       	ldi	r20, 0xFA	; 250
    302e:	54 e4       	ldi	r21, 0x44	; 68
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	8f 83       	std	Y+7, r24	; 0x07
    303a:	98 87       	std	Y+8, r25	; 0x08
    303c:	a9 87       	std	Y+9, r26	; 0x09
    303e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3040:	6f 81       	ldd	r22, Y+7	; 0x07
    3042:	78 85       	ldd	r23, Y+8	; 0x08
    3044:	89 85       	ldd	r24, Y+9	; 0x09
    3046:	9a 85       	ldd	r25, Y+10	; 0x0a
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e8       	ldi	r20, 0x80	; 128
    304e:	5f e3       	ldi	r21, 0x3F	; 63
    3050:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3054:	88 23       	and	r24, r24
    3056:	2c f4       	brge	.+10     	; 0x3062 <repeat_password+0x180>
		__ticks = 1;
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	8d 83       	std	Y+5, r24	; 0x05
    3060:	3f c0       	rjmp	.+126    	; 0x30e0 <repeat_password+0x1fe>
	else if (__tmp > 65535)
    3062:	6f 81       	ldd	r22, Y+7	; 0x07
    3064:	78 85       	ldd	r23, Y+8	; 0x08
    3066:	89 85       	ldd	r24, Y+9	; 0x09
    3068:	9a 85       	ldd	r25, Y+10	; 0x0a
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	3f ef       	ldi	r19, 0xFF	; 255
    306e:	4f e7       	ldi	r20, 0x7F	; 127
    3070:	57 e4       	ldi	r21, 0x47	; 71
    3072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3076:	18 16       	cp	r1, r24
    3078:	4c f5       	brge	.+82     	; 0x30cc <repeat_password+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307a:	6b 85       	ldd	r22, Y+11	; 0x0b
    307c:	7c 85       	ldd	r23, Y+12	; 0x0c
    307e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3080:	9e 85       	ldd	r25, Y+14	; 0x0e
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e2       	ldi	r20, 0x20	; 32
    3088:	51 e4       	ldi	r21, 0x41	; 65
    308a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	9e 83       	std	Y+6, r25	; 0x06
    30a0:	8d 83       	std	Y+5, r24	; 0x05
    30a2:	0f c0       	rjmp	.+30     	; 0x30c2 <repeat_password+0x1e0>
    30a4:	88 ec       	ldi	r24, 0xC8	; 200
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	9c 83       	std	Y+4, r25	; 0x04
    30aa:	8b 83       	std	Y+3, r24	; 0x03
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <repeat_password+0x1ce>
    30b4:	9c 83       	std	Y+4, r25	; 0x04
    30b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	9e 83       	std	Y+6, r25	; 0x06
    30c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c2:	8d 81       	ldd	r24, Y+5	; 0x05
    30c4:	9e 81       	ldd	r25, Y+6	; 0x06
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	69 f7       	brne	.-38     	; 0x30a4 <repeat_password+0x1c2>
    30ca:	14 c0       	rjmp	.+40     	; 0x30f4 <repeat_password+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30cc:	6f 81       	ldd	r22, Y+7	; 0x07
    30ce:	78 85       	ldd	r23, Y+8	; 0x08
    30d0:	89 85       	ldd	r24, Y+9	; 0x09
    30d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	9a 83       	std	Y+2, r25	; 0x02
    30e6:	89 83       	std	Y+1, r24	; 0x01
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	9a 81       	ldd	r25, Y+2	; 0x02
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <repeat_password+0x20a>
    30f0:	9a 83       	std	Y+2, r25	; 0x02
    30f2:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter('*');

	}

	_delay_ms(50);
	for(i=0;i<5;i++){
    30f4:	1d 8e       	std	Y+29, r1	; 0x1d
    30f6:	0e c0       	rjmp	.+28     	; 0x3114 <repeat_password+0x232>
		UART_SendByte(str[i]);
    30f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	ce 01       	movw	r24, r28
    3100:	4e 96       	adiw	r24, 0x1e	; 30
    3102:	fc 01       	movw	r30, r24
    3104:	e2 0f       	add	r30, r18
    3106:	f3 1f       	adc	r31, r19
    3108:	80 81       	ld	r24, Z
    310a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <UART_SendByte>
		LCD_displayCharacter('*');

	}

	_delay_ms(50);
	for(i=0;i<5;i++){
    310e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3110:	8f 5f       	subi	r24, 0xFF	; 255
    3112:	8d 8f       	std	Y+29, r24	; 0x1d
    3114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3116:	85 30       	cpi	r24, 0x05	; 5
    3118:	78 f3       	brcs	.-34     	; 0x30f8 <repeat_password+0x216>
		UART_SendByte(str[i]);
		//while((UART_RecieveByte()!='1')){}
	}


}
    311a:	a2 96       	adiw	r28, 0x22	; 34
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <MOTOR_init>:



#include "motor.h"

void MOTOR_init(){
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ctl |=(1<<DIR1)|(1<<DIR2);
    3138:	a7 e3       	ldi	r26, 0x37	; 55
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e7 e3       	ldi	r30, 0x37	; 55
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	83 60       	ori	r24, 0x03	; 3
    3144:	8c 93       	st	X, r24

}
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

0000314c <MOTOR_stop>:

void MOTOR_stop(){
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_R,DIR1);
    3154:	a8 e3       	ldi	r26, 0x38	; 56
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e8 e3       	ldi	r30, 0x38	; 56
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	8e 7f       	andi	r24, 0xFE	; 254
    3160:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_R,DIR2);
    3162:	a8 e3       	ldi	r26, 0x38	; 56
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e8 e3       	ldi	r30, 0x38	; 56
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	8d 7f       	andi	r24, 0xFD	; 253
    316e:	8c 93       	st	X, r24
}
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <MOTOR_clockwise>:

void MOTOR_clockwise(){
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_R,DIR1);
    317e:	a8 e3       	ldi	r26, 0x38	; 56
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e8 e3       	ldi	r30, 0x38	; 56
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	8e 7f       	andi	r24, 0xFE	; 254
    318a:	8c 93       	st	X, r24
	SET_BIT(MOTOR_R,DIR2);
    318c:	a8 e3       	ldi	r26, 0x38	; 56
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	e8 e3       	ldi	r30, 0x38	; 56
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	82 60       	ori	r24, 0x02	; 2
    3198:	8c 93       	st	X, r24
}
    319a:	cf 91       	pop	r28
    319c:	df 91       	pop	r29
    319e:	08 95       	ret

000031a0 <MOTOR_anticlockwise>:
void MOTOR_anticlockwise(){
    31a0:	df 93       	push	r29
    31a2:	cf 93       	push	r28
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_R,DIR2);
    31a8:	a8 e3       	ldi	r26, 0x38	; 56
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e8 e3       	ldi	r30, 0x38	; 56
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	8d 7f       	andi	r24, 0xFD	; 253
    31b4:	8c 93       	st	X, r24
	SET_BIT(MOTOR_R,DIR1);
    31b6:	a8 e3       	ldi	r26, 0x38	; 56
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e8 e3       	ldi	r30, 0x38	; 56
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	81 60       	ori	r24, 0x01	; 1
    31c2:	8c 93       	st	X, r24
}
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <MOTOR_toggle>:
void MOTOR_toggle(){
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
	if(!((BIT_IS_CLEAR(MOTOR_R,DIR1)) && (BIT_IS_CLEAR(MOTOR_R,DIR2)))){
    31d2:	e8 e3       	ldi	r30, 0x38	; 56
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	88 2f       	mov	r24, r24
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	81 70       	andi	r24, 0x01	; 1
    31de:	90 70       	andi	r25, 0x00	; 0
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	49 f4       	brne	.+18     	; 0x31f6 <MOTOR_toggle+0x2c>
    31e4:	e8 e3       	ldi	r30, 0x38	; 56
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	82 70       	andi	r24, 0x02	; 2
    31f0:	90 70       	andi	r25, 0x00	; 0
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	81 f0       	breq	.+32     	; 0x3216 <MOTOR_toggle+0x4c>
		TOGGLE_BIT(MOTOR_R,DIR1);
    31f6:	a8 e3       	ldi	r26, 0x38	; 56
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	e8 e3       	ldi	r30, 0x38	; 56
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	90 81       	ld	r25, Z
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	89 27       	eor	r24, r25
    3204:	8c 93       	st	X, r24
		TOGGLE_BIT(MOTOR_R,DIR2);
    3206:	a8 e3       	ldi	r26, 0x38	; 56
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e8 e3       	ldi	r30, 0x38	; 56
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	90 81       	ld	r25, Z
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	89 27       	eor	r24, r25
    3214:	8c 93       	st	X, r24
	}
}
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <__udivmodsi4>:
    321c:	a1 e2       	ldi	r26, 0x21	; 33
    321e:	1a 2e       	mov	r1, r26
    3220:	aa 1b       	sub	r26, r26
    3222:	bb 1b       	sub	r27, r27
    3224:	fd 01       	movw	r30, r26
    3226:	0d c0       	rjmp	.+26     	; 0x3242 <__udivmodsi4_ep>

00003228 <__udivmodsi4_loop>:
    3228:	aa 1f       	adc	r26, r26
    322a:	bb 1f       	adc	r27, r27
    322c:	ee 1f       	adc	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	a2 17       	cp	r26, r18
    3232:	b3 07       	cpc	r27, r19
    3234:	e4 07       	cpc	r30, r20
    3236:	f5 07       	cpc	r31, r21
    3238:	20 f0       	brcs	.+8      	; 0x3242 <__udivmodsi4_ep>
    323a:	a2 1b       	sub	r26, r18
    323c:	b3 0b       	sbc	r27, r19
    323e:	e4 0b       	sbc	r30, r20
    3240:	f5 0b       	sbc	r31, r21

00003242 <__udivmodsi4_ep>:
    3242:	66 1f       	adc	r22, r22
    3244:	77 1f       	adc	r23, r23
    3246:	88 1f       	adc	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	1a 94       	dec	r1
    324c:	69 f7       	brne	.-38     	; 0x3228 <__udivmodsi4_loop>
    324e:	60 95       	com	r22
    3250:	70 95       	com	r23
    3252:	80 95       	com	r24
    3254:	90 95       	com	r25
    3256:	9b 01       	movw	r18, r22
    3258:	ac 01       	movw	r20, r24
    325a:	bd 01       	movw	r22, r26
    325c:	cf 01       	movw	r24, r30
    325e:	08 95       	ret

00003260 <__prologue_saves__>:
    3260:	2f 92       	push	r2
    3262:	3f 92       	push	r3
    3264:	4f 92       	push	r4
    3266:	5f 92       	push	r5
    3268:	6f 92       	push	r6
    326a:	7f 92       	push	r7
    326c:	8f 92       	push	r8
    326e:	9f 92       	push	r9
    3270:	af 92       	push	r10
    3272:	bf 92       	push	r11
    3274:	cf 92       	push	r12
    3276:	df 92       	push	r13
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	ca 1b       	sub	r28, r26
    328a:	db 0b       	sbc	r29, r27
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	09 94       	ijmp

00003298 <__epilogue_restores__>:
    3298:	2a 88       	ldd	r2, Y+18	; 0x12
    329a:	39 88       	ldd	r3, Y+17	; 0x11
    329c:	48 88       	ldd	r4, Y+16	; 0x10
    329e:	5f 84       	ldd	r5, Y+15	; 0x0f
    32a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    32a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    32a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    32a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    32a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    32aa:	b9 84       	ldd	r11, Y+9	; 0x09
    32ac:	c8 84       	ldd	r12, Y+8	; 0x08
    32ae:	df 80       	ldd	r13, Y+7	; 0x07
    32b0:	ee 80       	ldd	r14, Y+6	; 0x06
    32b2:	fd 80       	ldd	r15, Y+5	; 0x05
    32b4:	0c 81       	ldd	r16, Y+4	; 0x04
    32b6:	1b 81       	ldd	r17, Y+3	; 0x03
    32b8:	aa 81       	ldd	r26, Y+2	; 0x02
    32ba:	b9 81       	ldd	r27, Y+1	; 0x01
    32bc:	ce 0f       	add	r28, r30
    32be:	d1 1d       	adc	r29, r1
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	ed 01       	movw	r28, r26
    32cc:	08 95       	ret

000032ce <itoa>:
    32ce:	fb 01       	movw	r30, r22
    32d0:	9f 01       	movw	r18, r30
    32d2:	e8 94       	clt
    32d4:	42 30       	cpi	r20, 0x02	; 2
    32d6:	c4 f0       	brlt	.+48     	; 0x3308 <itoa+0x3a>
    32d8:	45 32       	cpi	r20, 0x25	; 37
    32da:	b4 f4       	brge	.+44     	; 0x3308 <itoa+0x3a>
    32dc:	4a 30       	cpi	r20, 0x0A	; 10
    32de:	29 f4       	brne	.+10     	; 0x32ea <itoa+0x1c>
    32e0:	97 fb       	bst	r25, 7
    32e2:	1e f4       	brtc	.+6      	; 0x32ea <itoa+0x1c>
    32e4:	90 95       	com	r25
    32e6:	81 95       	neg	r24
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	64 2f       	mov	r22, r20
    32ec:	77 27       	eor	r23, r23
    32ee:	0e 94 98 19 	call	0x3330	; 0x3330 <__udivmodhi4>
    32f2:	80 5d       	subi	r24, 0xD0	; 208
    32f4:	8a 33       	cpi	r24, 0x3A	; 58
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <itoa+0x2c>
    32f8:	89 5d       	subi	r24, 0xD9	; 217
    32fa:	81 93       	st	Z+, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	a1 f7       	brne	.-24     	; 0x32ea <itoa+0x1c>
    3302:	16 f4       	brtc	.+4      	; 0x3308 <itoa+0x3a>
    3304:	5d e2       	ldi	r21, 0x2D	; 45
    3306:	51 93       	st	Z+, r21
    3308:	10 82       	st	Z, r1
    330a:	c9 01       	movw	r24, r18
    330c:	0c 94 88 19 	jmp	0x3310	; 0x3310 <strrev>

00003310 <strrev>:
    3310:	dc 01       	movw	r26, r24
    3312:	fc 01       	movw	r30, r24
    3314:	67 2f       	mov	r22, r23
    3316:	71 91       	ld	r23, Z+
    3318:	77 23       	and	r23, r23
    331a:	e1 f7       	brne	.-8      	; 0x3314 <strrev+0x4>
    331c:	32 97       	sbiw	r30, 0x02	; 2
    331e:	04 c0       	rjmp	.+8      	; 0x3328 <strrev+0x18>
    3320:	7c 91       	ld	r23, X
    3322:	6d 93       	st	X+, r22
    3324:	70 83       	st	Z, r23
    3326:	62 91       	ld	r22, -Z
    3328:	ae 17       	cp	r26, r30
    332a:	bf 07       	cpc	r27, r31
    332c:	c8 f3       	brcs	.-14     	; 0x3320 <strrev+0x10>
    332e:	08 95       	ret

00003330 <__udivmodhi4>:
    3330:	aa 1b       	sub	r26, r26
    3332:	bb 1b       	sub	r27, r27
    3334:	51 e1       	ldi	r21, 0x11	; 17
    3336:	07 c0       	rjmp	.+14     	; 0x3346 <__udivmodhi4_ep>

00003338 <__udivmodhi4_loop>:
    3338:	aa 1f       	adc	r26, r26
    333a:	bb 1f       	adc	r27, r27
    333c:	a6 17       	cp	r26, r22
    333e:	b7 07       	cpc	r27, r23
    3340:	10 f0       	brcs	.+4      	; 0x3346 <__udivmodhi4_ep>
    3342:	a6 1b       	sub	r26, r22
    3344:	b7 0b       	sbc	r27, r23

00003346 <__udivmodhi4_ep>:
    3346:	88 1f       	adc	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	5a 95       	dec	r21
    334c:	a9 f7       	brne	.-22     	; 0x3338 <__udivmodhi4_loop>
    334e:	80 95       	com	r24
    3350:	90 95       	com	r25
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	08 95       	ret

00003358 <_exit>:
    3358:	f8 94       	cli

0000335a <__stop_program>:
    335a:	ff cf       	rjmp	.-2      	; 0x335a <__stop_program>
