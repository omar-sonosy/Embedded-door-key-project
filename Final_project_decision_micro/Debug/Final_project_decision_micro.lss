
Final_project_decision_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000027b8  0000284c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800072  00800072  0000285e  2**0
                  ALLOC
  3 .stab         00002ac0  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001037  00000000  00000000  00005320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006357  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006497  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000913b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aaa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_3>
      10:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_8>
      24:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <main>
      8a:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER_Init>:

static volatile void(*timer0)(void)= NULL;
static volatile void(*timer1)(void)= NULL;
static volatile void(*timer2)(void)= NULL;

void TIMER_Init(struct TIMER_init *i){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER_Init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	if(i->timer==0){
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	80 81       	ld	r24, Z
     b5a:	88 23       	and	r24, r24
     b5c:	09 f0       	breq	.+2      	; 0xb60 <TIMER_Init+0x1a>
     b5e:	3b c1       	rjmp	.+630    	; 0xdd6 <TIMER_Init+0x290>
		SET_BIT(TCCR0,FOC0);
     b60:	a3 e5       	ldi	r26, 0x53	; 83
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e3 e5       	ldi	r30, 0x53	; 83
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24
		OCR0 = i->comp_value;
     b6e:	ac e5       	ldi	r26, 0x5C	; 92
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e9 81       	ldd	r30, Y+1	; 0x01
     b74:	fa 81       	ldd	r31, Y+2	; 0x02
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	95 81       	ldd	r25, Z+5	; 0x05
     b7a:	8c 93       	st	X, r24
		//timer mode
		if(i->mode==0){
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	81 81       	ldd	r24, Z+1	; 0x01
     b82:	88 23       	and	r24, r24
     b84:	b1 f4       	brne	.+44     	; 0xbb2 <TIMER_Init+0x6c>
			CLEAR_BIT(TCCR0,WGM01);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0);
     ba2:	a9 e5       	ldi	r26, 0x59	; 89
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e9 e5       	ldi	r30, 0x59	; 89
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	8c 93       	st	X, r24
     bb0:	1a c0       	rjmp	.+52     	; 0xbe6 <TIMER_Init+0xa0>

		}
		else if(i->mode==1){
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	fa 81       	ldd	r31, Y+2	; 0x02
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	a9 f4       	brne	.+42     	; 0xbe6 <TIMER_Init+0xa0>
			SET_BIT(TCCR0,WGM01);
     bbc:	a3 e5       	ldi	r26, 0x53	; 83
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	88 60       	ori	r24, 0x08	; 8
     bc8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
     bca:	a3 e5       	ldi	r26, 0x53	; 83
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e3 e5       	ldi	r30, 0x53	; 83
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 7b       	andi	r24, 0xBF	; 191
     bd6:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
     bd8:	a9 e5       	ldi	r26, 0x59	; 89
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e9 e5       	ldi	r30, 0x59	; 89
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
     be6:	e9 81       	ldd	r30, Y+1	; 0x01
     be8:	fa 81       	ldd	r31, Y+2	; 0x02
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	91 05       	cpc	r25, r1
     bf2:	b1 f4       	brne	.+44     	; 0xc20 <TIMER_Init+0xda>
			CLEAR_BIT(TCCR0,CS02);
     bf4:	a3 e5       	ldi	r26, 0x53	; 83
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e3 e5       	ldi	r30, 0x53	; 83
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8b 7f       	andi	r24, 0xFB	; 251
     c00:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     c02:	a3 e5       	ldi	r26, 0x53	; 83
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e3 e5       	ldi	r30, 0x53	; 83
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8d 7f       	andi	r24, 0xFD	; 253
     c0e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     c10:	a3 e5       	ldi	r26, 0x53	; 83
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e3 e5       	ldi	r30, 0x53	; 83
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	81 60       	ori	r24, 0x01	; 1
     c1c:	8c 93       	st	X, r24
     c1e:	75 c0       	rjmp	.+234    	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==8){
     c20:	e9 81       	ldd	r30, Y+1	; 0x01
     c22:	fa 81       	ldd	r31, Y+2	; 0x02
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	88 30       	cpi	r24, 0x08	; 8
     c2a:	91 05       	cpc	r25, r1
     c2c:	b1 f4       	brne	.+44     	; 0xc5a <TIMER_Init+0x114>
			CLEAR_BIT(TCCR0,CS02);
     c2e:	a3 e5       	ldi	r26, 0x53	; 83
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e3 e5       	ldi	r30, 0x53	; 83
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8b 7f       	andi	r24, 0xFB	; 251
     c3a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
     c3c:	a3 e5       	ldi	r26, 0x53	; 83
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e3 e5       	ldi	r30, 0x53	; 83
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS00);
     c4a:	a3 e5       	ldi	r26, 0x53	; 83
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e3 e5       	ldi	r30, 0x53	; 83
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8e 7f       	andi	r24, 0xFE	; 254
     c56:	8c 93       	st	X, r24
     c58:	58 c0       	rjmp	.+176    	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==64){
     c5a:	e9 81       	ldd	r30, Y+1	; 0x01
     c5c:	fa 81       	ldd	r31, Y+2	; 0x02
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	91 05       	cpc	r25, r1
     c66:	b1 f4       	brne	.+44     	; 0xc94 <TIMER_Init+0x14e>
			CLEAR_BIT(TCCR0,CS02);
     c68:	a3 e5       	ldi	r26, 0x53	; 83
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e3 e5       	ldi	r30, 0x53	; 83
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8b 7f       	andi	r24, 0xFB	; 251
     c74:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
     c76:	a3 e5       	ldi	r26, 0x53	; 83
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e3 e5       	ldi	r30, 0x53	; 83
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     c84:	a3 e5       	ldi	r26, 0x53	; 83
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e3 e5       	ldi	r30, 0x53	; 83
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	8c 93       	st	X, r24
     c92:	3b c0       	rjmp	.+118    	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==256){
     c94:	e9 81       	ldd	r30, Y+1	; 0x01
     c96:	fa 81       	ldd	r31, Y+2	; 0x02
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	80 30       	cpi	r24, 0x00	; 0
     ca0:	92 07       	cpc	r25, r18
     ca2:	b1 f4       	brne	.+44     	; 0xcd0 <TIMER_Init+0x18a>
			SET_BIT(TCCR0,CS02);
     ca4:	a3 e5       	ldi	r26, 0x53	; 83
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e3 e5       	ldi	r30, 0x53	; 83
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	84 60       	ori	r24, 0x04	; 4
     cb0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     cb2:	a3 e5       	ldi	r26, 0x53	; 83
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e3 e5       	ldi	r30, 0x53	; 83
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS00);
     cc0:	a3 e5       	ldi	r26, 0x53	; 83
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e3 e5       	ldi	r30, 0x53	; 83
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8e 7f       	andi	r24, 0xFE	; 254
     ccc:	8c 93       	st	X, r24
     cce:	1d c0       	rjmp	.+58     	; 0xd0a <TIMER_Init+0x1c4>
		}
		else if(i->prescaler==1024){
     cd0:	e9 81       	ldd	r30, Y+1	; 0x01
     cd2:	fa 81       	ldd	r31, Y+2	; 0x02
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	24 e0       	ldi	r18, 0x04	; 4
     cda:	80 30       	cpi	r24, 0x00	; 0
     cdc:	92 07       	cpc	r25, r18
     cde:	a9 f4       	brne	.+42     	; 0xd0a <TIMER_Init+0x1c4>
			SET_BIT(TCCR0,CS02);
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	84 60       	ori	r24, 0x04	; 4
     cec:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     cee:	a3 e5       	ldi	r26, 0x53	; 83
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e3 e5       	ldi	r30, 0x53	; 83
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8d 7f       	andi	r24, 0xFD	; 253
     cfa:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS00);
     cfc:	a3 e5       	ldi	r26, 0x53	; 83
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e3 e5       	ldi	r30, 0x53	; 83
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	86 81       	ldd	r24, Z+6	; 0x06
     d10:	88 23       	and	r24, r24
     d12:	79 f4       	brne	.+30     	; 0xd32 <TIMER_Init+0x1ec>
			CLEAR_BIT(TCCR0,COM01);
     d14:	a3 e5       	ldi	r26, 0x53	; 83
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e3 e5       	ldi	r30, 0x53	; 83
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 7d       	andi	r24, 0xDF	; 223
     d20:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
     d22:	a3 e5       	ldi	r26, 0x53	; 83
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e3 e5       	ldi	r30, 0x53	; 83
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 7e       	andi	r24, 0xEF	; 239
     d2e:	8c 93       	st	X, r24
     d30:	2a c3       	rjmp	.+1620   	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
     d32:	e9 81       	ldd	r30, Y+1	; 0x01
     d34:	fa 81       	ldd	r31, Y+2	; 0x02
     d36:	86 81       	ldd	r24, Z+6	; 0x06
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	b1 f4       	brne	.+44     	; 0xd68 <TIMER_Init+0x222>
			SET_BIT(DDRB,PB3);
     d3c:	a7 e3       	ldi	r26, 0x37	; 55
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 60       	ori	r24, 0x08	; 8
     d48:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
     d4a:	a3 e5       	ldi	r26, 0x53	; 83
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e3 e5       	ldi	r30, 0x53	; 83
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7d       	andi	r24, 0xDF	; 223
     d56:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
     d58:	a3 e5       	ldi	r26, 0x53	; 83
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e3 e5       	ldi	r30, 0x53	; 83
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 61       	ori	r24, 0x10	; 16
     d64:	8c 93       	st	X, r24
     d66:	0f c3       	rjmp	.+1566   	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
     d68:	e9 81       	ldd	r30, Y+1	; 0x01
     d6a:	fa 81       	ldd	r31, Y+2	; 0x02
     d6c:	86 81       	ldd	r24, Z+6	; 0x06
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	b1 f4       	brne	.+44     	; 0xd9e <TIMER_Init+0x258>
			SET_BIT(DDRB,PB3);
     d72:	a7 e3       	ldi	r26, 0x37	; 55
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e3       	ldi	r30, 0x37	; 55
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 60       	ori	r24, 0x08	; 8
     d7e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
     d80:	a3 e5       	ldi	r26, 0x53	; 83
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e3 e5       	ldi	r30, 0x53	; 83
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 62       	ori	r24, 0x20	; 32
     d8c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
     d8e:	a3 e5       	ldi	r26, 0x53	; 83
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e3 e5       	ldi	r30, 0x53	; 83
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7e       	andi	r24, 0xEF	; 239
     d9a:	8c 93       	st	X, r24
     d9c:	f4 c2       	rjmp	.+1512   	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	86 81       	ldd	r24, Z+6	; 0x06
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	09 f0       	breq	.+2      	; 0xdaa <TIMER_Init+0x264>
     da8:	ee c2       	rjmp	.+1500   	; 0x1386 <TIMER_Init+0x840>
			SET_BIT(DDRB,PB3);
     daa:	a7 e3       	ldi	r26, 0x37	; 55
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e3       	ldi	r30, 0x37	; 55
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	88 60       	ori	r24, 0x08	; 8
     db6:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
     db8:	a3 e5       	ldi	r26, 0x53	; 83
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e3 e5       	ldi	r30, 0x53	; 83
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 62       	ori	r24, 0x20	; 32
     dc4:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
     dc6:	a3 e5       	ldi	r26, 0x53	; 83
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e3 e5       	ldi	r30, 0x53	; 83
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 61       	ori	r24, 0x10	; 16
     dd2:	8c 93       	st	X, r24
     dd4:	d8 c2       	rjmp	.+1456   	; 0x1386 <TIMER_Init+0x840>
		}


	}
	else if(i->timer==1){
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	80 81       	ld	r24, Z
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	09 f0       	breq	.+2      	; 0xde2 <TIMER_Init+0x29c>
     de0:	59 c1       	rjmp	.+690    	; 0x1094 <TIMER_Init+0x54e>
		SET_BIT(TCCR1A,FOC1A);
     de2:	af e4       	ldi	r26, 0x4F	; 79
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ef e4       	ldi	r30, 0x4F	; 79
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	8c 93       	st	X, r24
		OCR1A= i->comp_value;
     df0:	aa e4       	ldi	r26, 0x4A	; 74
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e9 81       	ldd	r30, Y+1	; 0x01
     df6:	fa 81       	ldd	r31, Y+2	; 0x02
     df8:	84 81       	ldd	r24, Z+4	; 0x04
     dfa:	95 81       	ldd	r25, Z+5	; 0x05
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	9c 93       	st	X, r25
     e00:	8e 93       	st	-X, r24
		//timer mode
		if(i->mode==0){
     e02:	e9 81       	ldd	r30, Y+1	; 0x01
     e04:	fa 81       	ldd	r31, Y+2	; 0x02
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	88 23       	and	r24, r24
     e0a:	21 f5       	brne	.+72     	; 0xe54 <TIMER_Init+0x30e>
			CLEAR_BIT(TCCR1A,WGM11);
     e0c:	af e4       	ldi	r26, 0x4F	; 79
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ef e4       	ldi	r30, 0x4F	; 79
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8d 7f       	andi	r24, 0xFD	; 253
     e18:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
     e1a:	af e4       	ldi	r26, 0x4F	; 79
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ef e4       	ldi	r30, 0x4F	; 79
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM12);
     e28:	ae e4       	ldi	r26, 0x4E	; 78
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ee e4       	ldi	r30, 0x4E	; 78
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7e       	andi	r24, 0xEF	; 239
     e42:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE1);
     e44:	a9 e5       	ldi	r26, 0x59	; 89
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e9 e5       	ldi	r30, 0x59	; 89
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	84 60       	ori	r24, 0x04	; 4
     e50:	8c 93       	st	X, r24
     e52:	28 c0       	rjmp	.+80     	; 0xea4 <TIMER_Init+0x35e>

		}
		else if(i->mode==1){
     e54:	e9 81       	ldd	r30, Y+1	; 0x01
     e56:	fa 81       	ldd	r31, Y+2	; 0x02
     e58:	81 81       	ldd	r24, Z+1	; 0x01
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	19 f5       	brne	.+70     	; 0xea4 <TIMER_Init+0x35e>
			CLEAR_BIT(TCCR1A,WGM11);
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,WGM10);
     e6c:	af e4       	ldi	r26, 0x4F	; 79
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e4       	ldi	r30, 0x4F	; 79
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
     e7a:	ae e4       	ldi	r26, 0x4E	; 78
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ee e4       	ldi	r30, 0x4E	; 78
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,WGM13);
     e88:	ae e4       	ldi	r26, 0x4E	; 78
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ee e4       	ldi	r30, 0x4E	; 78
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7e       	andi	r24, 0xEF	; 239
     e94:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE1A);
     e96:	a9 e5       	ldi	r26, 0x59	; 89
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e9 e5       	ldi	r30, 0x59	; 89
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
     ea4:	e9 81       	ldd	r30, Y+1	; 0x01
     ea6:	fa 81       	ldd	r31, Y+2	; 0x02
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	b1 f4       	brne	.+44     	; 0xede <TIMER_Init+0x398>
			CLEAR_BIT(TCCR1B,CS12);
     eb2:	ae e4       	ldi	r26, 0x4E	; 78
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e4       	ldi	r30, 0x4E	; 78
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8b 7f       	andi	r24, 0xFB	; 251
     ebe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
     ec0:	ae e4       	ldi	r26, 0x4E	; 78
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ee e4       	ldi	r30, 0x4E	; 78
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
     ece:	ae e4       	ldi	r26, 0x4E	; 78
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ee e4       	ldi	r30, 0x4E	; 78
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	8c 93       	st	X, r24
     edc:	75 c0       	rjmp	.+234    	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==8){
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	88 30       	cpi	r24, 0x08	; 8
     ee8:	91 05       	cpc	r25, r1
     eea:	b1 f4       	brne	.+44     	; 0xf18 <TIMER_Init+0x3d2>
			CLEAR_BIT(TCCR1B,CS12);
     eec:	ae e4       	ldi	r26, 0x4E	; 78
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ee e4       	ldi	r30, 0x4E	; 78
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8b 7f       	andi	r24, 0xFB	; 251
     ef8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
     efa:	ae e4       	ldi	r26, 0x4E	; 78
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ee e4       	ldi	r30, 0x4E	; 78
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS10);
     f08:	ae e4       	ldi	r26, 0x4E	; 78
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ee e4       	ldi	r30, 0x4E	; 78
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8c 93       	st	X, r24
     f16:	58 c0       	rjmp	.+176    	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==64){
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	80 34       	cpi	r24, 0x40	; 64
     f22:	91 05       	cpc	r25, r1
     f24:	b1 f4       	brne	.+44     	; 0xf52 <TIMER_Init+0x40c>
			CLEAR_BIT(TCCR1B,CS12);
     f26:	ae e4       	ldi	r26, 0x4E	; 78
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ee e4       	ldi	r30, 0x4E	; 78
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
     f34:	ae e4       	ldi	r26, 0x4E	; 78
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ee e4       	ldi	r30, 0x4E	; 78
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
     f42:	ae e4       	ldi	r26, 0x4E	; 78
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
     f50:	3b c0       	rjmp	.+118    	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==256){
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	80 30       	cpi	r24, 0x00	; 0
     f5e:	92 07       	cpc	r25, r18
     f60:	b1 f4       	brne	.+44     	; 0xf8e <TIMER_Init+0x448>
			SET_BIT(TCCR1B,CS12);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	84 60       	ori	r24, 0x04	; 4
     f6e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
     f70:	ae e4       	ldi	r26, 0x4E	; 78
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee e4       	ldi	r30, 0x4E	; 78
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS10);
     f7e:	ae e4       	ldi	r26, 0x4E	; 78
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ee e4       	ldi	r30, 0x4E	; 78
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8e 7f       	andi	r24, 0xFE	; 254
     f8a:	8c 93       	st	X, r24
     f8c:	1d c0       	rjmp	.+58     	; 0xfc8 <TIMER_Init+0x482>
		}
		else if(i->prescaler==1024){
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	24 e0       	ldi	r18, 0x04	; 4
     f98:	80 30       	cpi	r24, 0x00	; 0
     f9a:	92 07       	cpc	r25, r18
     f9c:	a9 f4       	brne	.+42     	; 0xfc8 <TIMER_Init+0x482>
			SET_BIT(TCCR1B,CS12);
     f9e:	ae e4       	ldi	r26, 0x4E	; 78
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ee e4       	ldi	r30, 0x4E	; 78
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	84 60       	ori	r24, 0x04	; 4
     faa:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B,CS11);
     fac:	ae e4       	ldi	r26, 0x4E	; 78
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ee e4       	ldi	r30, 0x4E	; 78
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8d 7f       	andi	r24, 0xFD	; 253
     fb8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS10);
     fba:	ae e4       	ldi	r26, 0x4E	; 78
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	86 81       	ldd	r24, Z+6	; 0x06
     fce:	88 23       	and	r24, r24
     fd0:	79 f4       	brne	.+30     	; 0xff0 <TIMER_Init+0x4aa>
			CLEAR_BIT(TCCR1A,COM1A1);
     fd2:	af e4       	ldi	r26, 0x4F	; 79
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 77       	andi	r24, 0x7F	; 127
     fde:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
     fe0:	af e4       	ldi	r26, 0x4F	; 79
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ef e4       	ldi	r30, 0x4F	; 79
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7b       	andi	r24, 0xBF	; 191
     fec:	8c 93       	st	X, r24
     fee:	cb c1       	rjmp	.+918    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	b1 f4       	brne	.+44     	; 0x1026 <TIMER_Init+0x4e0>
			SET_BIT(DDRD,PD5);
     ffa:	a1 e3       	ldi	r26, 0x31	; 49
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e1 e3       	ldi	r30, 0x31	; 49
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 62       	ori	r24, 0x20	; 32
    1006:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A1);
    1008:	af e4       	ldi	r26, 0x4F	; 79
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ef e4       	ldi	r30, 0x4F	; 79
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 77       	andi	r24, 0x7F	; 127
    1014:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    1016:	af e4       	ldi	r26, 0x4F	; 79
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ef e4       	ldi	r30, 0x4F	; 79
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	8c 93       	st	X, r24
    1024:	b0 c1       	rjmp	.+864    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
    1026:	e9 81       	ldd	r30, Y+1	; 0x01
    1028:	fa 81       	ldd	r31, Y+2	; 0x02
    102a:	86 81       	ldd	r24, Z+6	; 0x06
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	b1 f4       	brne	.+44     	; 0x105c <TIMER_Init+0x516>
			SET_BIT(DDRD,PD5);
    1030:	a1 e3       	ldi	r26, 0x31	; 49
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e1 e3       	ldi	r30, 0x31	; 49
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 62       	ori	r24, 0x20	; 32
    103c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    103e:	af e4       	ldi	r26, 0x4F	; 79
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ef e4       	ldi	r30, 0x4F	; 79
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 68       	ori	r24, 0x80	; 128
    104a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,COM1A0);
    104c:	af e4       	ldi	r26, 0x4F	; 79
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ef e4       	ldi	r30, 0x4F	; 79
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8f 7b       	andi	r24, 0xBF	; 191
    1058:	8c 93       	st	X, r24
    105a:	95 c1       	rjmp	.+810    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	86 81       	ldd	r24, Z+6	; 0x06
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	09 f0       	breq	.+2      	; 0x1068 <TIMER_Init+0x522>
    1066:	8f c1       	rjmp	.+798    	; 0x1386 <TIMER_Init+0x840>
			SET_BIT(DDRD,PD5);
    1068:	a1 e3       	ldi	r26, 0x31	; 49
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e1 e3       	ldi	r30, 0x31	; 49
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 62       	ori	r24, 0x20	; 32
    1074:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    1076:	af e4       	ldi	r26, 0x4F	; 79
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ef e4       	ldi	r30, 0x4F	; 79
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 68       	ori	r24, 0x80	; 128
    1082:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A0);
    1084:	af e4       	ldi	r26, 0x4F	; 79
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ef e4       	ldi	r30, 0x4F	; 79
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
    1092:	79 c1       	rjmp	.+754    	; 0x1386 <TIMER_Init+0x840>
		}


	}
	else if(i->timer==2){
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	80 81       	ld	r24, Z
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	09 f0       	breq	.+2      	; 0x10a0 <TIMER_Init+0x55a>
    109e:	73 c1       	rjmp	.+742    	; 0x1386 <TIMER_Init+0x840>
		SET_BIT(TCCR2,FOC2);
    10a0:	a5 e4       	ldi	r26, 0x45	; 69
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e4       	ldi	r30, 0x45	; 69
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24
		OCR2 = i->comp_value;
    10ae:	a3 e4       	ldi	r26, 0x43	; 67
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	84 81       	ldd	r24, Z+4	; 0x04
    10b8:	95 81       	ldd	r25, Z+5	; 0x05
    10ba:	8c 93       	st	X, r24
		//timer mode
		if(i->mode==0){
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	88 23       	and	r24, r24
    10c4:	b1 f4       	brne	.+44     	; 0x10f2 <TIMER_Init+0x5ac>
			CLEAR_BIT(TCCR2,WGM21);
    10c6:	a5 e4       	ldi	r26, 0x45	; 69
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e4       	ldi	r30, 0x45	; 69
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	87 7f       	andi	r24, 0xF7	; 247
    10d2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    10d4:	a5 e4       	ldi	r26, 0x45	; 69
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e4       	ldi	r30, 0x45	; 69
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8f 7b       	andi	r24, 0xBF	; 191
    10e0:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE2);
    10e2:	a9 e5       	ldi	r26, 0x59	; 89
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e9 e5       	ldi	r30, 0x59	; 89
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 64       	ori	r24, 0x40	; 64
    10ee:	8c 93       	st	X, r24
    10f0:	1a c0       	rjmp	.+52     	; 0x1126 <TIMER_Init+0x5e0>

		}
		else if(i->mode==1){
    10f2:	e9 81       	ldd	r30, Y+1	; 0x01
    10f4:	fa 81       	ldd	r31, Y+2	; 0x02
    10f6:	81 81       	ldd	r24, Z+1	; 0x01
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	a9 f4       	brne	.+42     	; 0x1126 <TIMER_Init+0x5e0>
			SET_BIT(TCCR2,WGM21);
    10fc:	a5 e4       	ldi	r26, 0x45	; 69
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e4       	ldi	r30, 0x45	; 69
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,WGM20);
    110a:	a5 e4       	ldi	r26, 0x45	; 69
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e4       	ldi	r30, 0x45	; 69
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8f 7b       	andi	r24, 0xBF	; 191
    1116:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE2);
    1118:	a9 e5       	ldi	r26, 0x59	; 89
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e9 e5       	ldi	r30, 0x59	; 89
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 68       	ori	r24, 0x80	; 128
    1124:	8c 93       	st	X, r24
		}

		// clock select
		if(i->prescaler==1){
    1126:	e9 81       	ldd	r30, Y+1	; 0x01
    1128:	fa 81       	ldd	r31, Y+2	; 0x02
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	b1 f4       	brne	.+44     	; 0x1160 <TIMER_Init+0x61a>
			CLEAR_BIT(TCCR2,CS22);
    1134:	a5 e4       	ldi	r26, 0x45	; 69
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e4       	ldi	r30, 0x45	; 69
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8b 7f       	andi	r24, 0xFB	; 251
    1140:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    1142:	a5 e4       	ldi	r26, 0x45	; 69
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e4       	ldi	r30, 0x45	; 69
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    1150:	a5 e4       	ldi	r26, 0x45	; 69
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e4       	ldi	r30, 0x45	; 69
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	81 60       	ori	r24, 0x01	; 1
    115c:	8c 93       	st	X, r24
    115e:	af c0       	rjmp	.+350    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==8){
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	93 81       	ldd	r25, Z+3	; 0x03
    1168:	88 30       	cpi	r24, 0x08	; 8
    116a:	91 05       	cpc	r25, r1
    116c:	b1 f4       	brne	.+44     	; 0x119a <TIMER_Init+0x654>
			CLEAR_BIT(TCCR2,CS22);
    116e:	a5 e4       	ldi	r26, 0x45	; 69
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e4       	ldi	r30, 0x45	; 69
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8b 7f       	andi	r24, 0xFB	; 251
    117a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS21);
    117c:	a3 e5       	ldi	r26, 0x53	; 83
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e3 e5       	ldi	r30, 0x53	; 83
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	82 60       	ori	r24, 0x02	; 2
    1188:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    118a:	a5 e4       	ldi	r26, 0x45	; 69
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e5 e4       	ldi	r30, 0x45	; 69
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8e 7f       	andi	r24, 0xFE	; 254
    1196:	8c 93       	st	X, r24
    1198:	92 c0       	rjmp	.+292    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler == 32){
    119a:	e9 81       	ldd	r30, Y+1	; 0x01
    119c:	fa 81       	ldd	r31, Y+2	; 0x02
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	80 32       	cpi	r24, 0x20	; 32
    11a4:	91 05       	cpc	r25, r1
    11a6:	b1 f4       	brne	.+44     	; 0x11d4 <TIMER_Init+0x68e>
			CLEAR_BIT(TCCR2,CS22);
    11a8:	a5 e4       	ldi	r26, 0x45	; 69
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e4       	ldi	r30, 0x45	; 69
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8b 7f       	andi	r24, 0xFB	; 251
    11b4:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    11b6:	a5 e4       	ldi	r26, 0x45	; 69
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e4       	ldi	r30, 0x45	; 69
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	82 60       	ori	r24, 0x02	; 2
    11c2:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    11c4:	a5 e4       	ldi	r26, 0x45	; 69
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e4       	ldi	r30, 0x45	; 69
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	8c 93       	st	X, r24
    11d2:	75 c0       	rjmp	.+234    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==64){
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	80 34       	cpi	r24, 0x40	; 64
    11de:	91 05       	cpc	r25, r1
    11e0:	b1 f4       	brne	.+44     	; 0x120e <TIMER_Init+0x6c8>
			SET_BIT(TCCR2,CS22);
    11e2:	a5 e4       	ldi	r26, 0x45	; 69
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e4       	ldi	r30, 0x45	; 69
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	84 60       	ori	r24, 0x04	; 4
    11ee:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    11f0:	a5 e4       	ldi	r26, 0x45	; 69
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e4       	ldi	r30, 0x45	; 69
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8d 7f       	andi	r24, 0xFD	; 253
    11fc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    11fe:	a5 e4       	ldi	r26, 0x45	; 69
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e4       	ldi	r30, 0x45	; 69
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8e 7f       	andi	r24, 0xFE	; 254
    120a:	8c 93       	st	X, r24
    120c:	58 c0       	rjmp	.+176    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==128){
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	80 38       	cpi	r24, 0x80	; 128
    1218:	91 05       	cpc	r25, r1
    121a:	b1 f4       	brne	.+44     	; 0x1248 <TIMER_Init+0x702>
			SET_BIT(TCCR2,CS22);
    121c:	a5 e4       	ldi	r26, 0x45	; 69
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e4       	ldi	r30, 0x45	; 69
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	84 60       	ori	r24, 0x04	; 4
    1228:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS21);
    122a:	a5 e4       	ldi	r26, 0x45	; 69
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e4       	ldi	r30, 0x45	; 69
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8d 7f       	andi	r24, 0xFD	; 253
    1236:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    1238:	a5 e4       	ldi	r26, 0x45	; 69
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e4       	ldi	r30, 0x45	; 69
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	8c 93       	st	X, r24
    1246:	3b c0       	rjmp	.+118    	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==256){
    1248:	e9 81       	ldd	r30, Y+1	; 0x01
    124a:	fa 81       	ldd	r31, Y+2	; 0x02
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	21 e0       	ldi	r18, 0x01	; 1
    1252:	80 30       	cpi	r24, 0x00	; 0
    1254:	92 07       	cpc	r25, r18
    1256:	b1 f4       	brne	.+44     	; 0x1284 <TIMER_Init+0x73e>
			SET_BIT(TCCR2,CS22);
    1258:	a5 e4       	ldi	r26, 0x45	; 69
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e4       	ldi	r30, 0x45	; 69
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	84 60       	ori	r24, 0x04	; 4
    1264:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    1266:	a5 e4       	ldi	r26, 0x45	; 69
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e4       	ldi	r30, 0x45	; 69
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,CS20);
    1274:	a5 e4       	ldi	r26, 0x45	; 69
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e4       	ldi	r30, 0x45	; 69
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8e 7f       	andi	r24, 0xFE	; 254
    1280:	8c 93       	st	X, r24
    1282:	1d c0       	rjmp	.+58     	; 0x12be <TIMER_Init+0x778>
		}
		else if(i->prescaler==1024){
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	24 e0       	ldi	r18, 0x04	; 4
    128e:	80 30       	cpi	r24, 0x00	; 0
    1290:	92 07       	cpc	r25, r18
    1292:	a9 f4       	brne	.+42     	; 0x12be <TIMER_Init+0x778>
			SET_BIT(TCCR2,CS22);
    1294:	a5 e4       	ldi	r26, 0x45	; 69
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e4       	ldi	r30, 0x45	; 69
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	84 60       	ori	r24, 0x04	; 4
    12a0:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    12a2:	a5 e4       	ldi	r26, 0x45	; 69
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e4       	ldi	r30, 0x45	; 69
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	82 60       	ori	r24, 0x02	; 2
    12ae:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS20);
    12b0:	a5 e4       	ldi	r26, 0x45	; 69
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e5 e4       	ldi	r30, 0x45	; 69
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	81 60       	ori	r24, 0x01	; 1
    12bc:	8c 93       	st	X, r24
		}

		// compare match output mode
		if(i->comp_match_mode==0){
    12be:	e9 81       	ldd	r30, Y+1	; 0x01
    12c0:	fa 81       	ldd	r31, Y+2	; 0x02
    12c2:	86 81       	ldd	r24, Z+6	; 0x06
    12c4:	88 23       	and	r24, r24
    12c6:	79 f4       	brne	.+30     	; 0x12e6 <TIMER_Init+0x7a0>
			CLEAR_BIT(TCCR2,COM21);
    12c8:	a5 e4       	ldi	r26, 0x45	; 69
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e5 e4       	ldi	r30, 0x45	; 69
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7d       	andi	r24, 0xDF	; 223
    12d4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM20);
    12d6:	a5 e4       	ldi	r26, 0x45	; 69
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e4       	ldi	r30, 0x45	; 69
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 7e       	andi	r24, 0xEF	; 239
    12e2:	8c 93       	st	X, r24
    12e4:	50 c0       	rjmp	.+160    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==1){
    12e6:	e9 81       	ldd	r30, Y+1	; 0x01
    12e8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ea:	86 81       	ldd	r24, Z+6	; 0x06
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	b1 f4       	brne	.+44     	; 0x131c <TIMER_Init+0x7d6>
			SET_BIT(DDRD,PD7);
    12f0:	a1 e3       	ldi	r26, 0x31	; 49
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e1 e3       	ldi	r30, 0x31	; 49
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM21);
    12fe:	a5 e4       	ldi	r26, 0x45	; 69
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e4       	ldi	r30, 0x45	; 69
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8f 7d       	andi	r24, 0xDF	; 223
    130a:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM20);
    130c:	a5 e4       	ldi	r26, 0x45	; 69
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e4       	ldi	r30, 0x45	; 69
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 61       	ori	r24, 0x10	; 16
    1318:	8c 93       	st	X, r24
    131a:	35 c0       	rjmp	.+106    	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==2){
    131c:	e9 81       	ldd	r30, Y+1	; 0x01
    131e:	fa 81       	ldd	r31, Y+2	; 0x02
    1320:	86 81       	ldd	r24, Z+6	; 0x06
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	b1 f4       	brne	.+44     	; 0x1352 <TIMER_Init+0x80c>
			SET_BIT(DDRD,PD7);
    1326:	a1 e3       	ldi	r26, 0x31	; 49
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e1 e3       	ldi	r30, 0x31	; 49
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 68       	ori	r24, 0x80	; 128
    1332:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    1334:	a5 e4       	ldi	r26, 0x45	; 69
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e4       	ldi	r30, 0x45	; 69
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	80 62       	ori	r24, 0x20	; 32
    1340:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,COM20);
    1342:	a5 e4       	ldi	r26, 0x45	; 69
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e4       	ldi	r30, 0x45	; 69
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7e       	andi	r24, 0xEF	; 239
    134e:	8c 93       	st	X, r24
    1350:	1a c0       	rjmp	.+52     	; 0x1386 <TIMER_Init+0x840>
		}
		else if(i->comp_match_mode==3){
    1352:	e9 81       	ldd	r30, Y+1	; 0x01
    1354:	fa 81       	ldd	r31, Y+2	; 0x02
    1356:	86 81       	ldd	r24, Z+6	; 0x06
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	a9 f4       	brne	.+42     	; 0x1386 <TIMER_Init+0x840>
			SET_BIT(DDRD,PD7);
    135c:	a1 e3       	ldi	r26, 0x31	; 49
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e1 e3       	ldi	r30, 0x31	; 49
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 68       	ori	r24, 0x80	; 128
    1368:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    136a:	a5 e4       	ldi	r26, 0x45	; 69
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e4       	ldi	r30, 0x45	; 69
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 62       	ori	r24, 0x20	; 32
    1376:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM20);
    1378:	a5 e4       	ldi	r26, 0x45	; 69
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e4       	ldi	r30, 0x45	; 69
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 61       	ori	r24, 0x10	; 16
    1384:	8c 93       	st	X, r24
	}




}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <TIMER_Start>:
void TIMER_Start(uint8 t , uint16 clk){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <TIMER_Start+0x6>
    1396:	0f 92       	push	r0
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	7b 83       	std	Y+3, r23	; 0x03
    13a0:	6a 83       	std	Y+2, r22	; 0x02




		if(t==0){
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	88 23       	and	r24, r24
    13a6:	09 f0       	breq	.+2      	; 0x13aa <TIMER_Start+0x1a>
    13a8:	8a c0       	rjmp	.+276    	; 0x14be <TIMER_Start+0x12e>

			// clock select
			if(clk==1){
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	b1 f4       	brne	.+44     	; 0x13e0 <TIMER_Start+0x50>
				CLEAR_BIT(TCCR0,CS02);
    13b4:	a3 e5       	ldi	r26, 0x53	; 83
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e3 e5       	ldi	r30, 0x53	; 83
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8b 7f       	andi	r24, 0xFB	; 251
    13c0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
    13c2:	a3 e5       	ldi	r26, 0x53	; 83
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e3 e5       	ldi	r30, 0x53	; 83
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    13d0:	a3 e5       	ldi	r26, 0x53	; 83
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e3 e5       	ldi	r30, 0x53	; 83
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	8c 93       	st	X, r24
    13de:	bf c1       	rjmp	.+894    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==8){
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	88 30       	cpi	r24, 0x08	; 8
    13e6:	91 05       	cpc	r25, r1
    13e8:	b1 f4       	brne	.+44     	; 0x1416 <TIMER_Start+0x86>
				CLEAR_BIT(TCCR0,CS02);
    13ea:	a3 e5       	ldi	r26, 0x53	; 83
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e3 e5       	ldi	r30, 0x53	; 83
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8b 7f       	andi	r24, 0xFB	; 251
    13f6:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    13f8:	a3 e5       	ldi	r26, 0x53	; 83
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e3 e5       	ldi	r30, 0x53	; 83
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	82 60       	ori	r24, 0x02	; 2
    1404:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS00);
    1406:	a3 e5       	ldi	r26, 0x53	; 83
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e3 e5       	ldi	r30, 0x53	; 83
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8e 7f       	andi	r24, 0xFE	; 254
    1412:	8c 93       	st	X, r24
    1414:	a4 c1       	rjmp	.+840    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==64){
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	80 34       	cpi	r24, 0x40	; 64
    141c:	91 05       	cpc	r25, r1
    141e:	b1 f4       	brne	.+44     	; 0x144c <TIMER_Start+0xbc>
				CLEAR_BIT(TCCR0,CS02);
    1420:	a3 e5       	ldi	r26, 0x53	; 83
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e3 e5       	ldi	r30, 0x53	; 83
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8b 7f       	andi	r24, 0xFB	; 251
    142c:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
    142e:	a3 e5       	ldi	r26, 0x53	; 83
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e3 e5       	ldi	r30, 0x53	; 83
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	82 60       	ori	r24, 0x02	; 2
    143a:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    143c:	a3 e5       	ldi	r26, 0x53	; 83
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e3 e5       	ldi	r30, 0x53	; 83
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	8c 93       	st	X, r24
    144a:	89 c1       	rjmp	.+786    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==256){
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	21 e0       	ldi	r18, 0x01	; 1
    1452:	80 30       	cpi	r24, 0x00	; 0
    1454:	92 07       	cpc	r25, r18
    1456:	b1 f4       	brne	.+44     	; 0x1484 <TIMER_Start+0xf4>
				SET_BIT(TCCR0,CS02);
    1458:	a3 e5       	ldi	r26, 0x53	; 83
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e3 e5       	ldi	r30, 0x53	; 83
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	84 60       	ori	r24, 0x04	; 4
    1464:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
    1466:	a3 e5       	ldi	r26, 0x53	; 83
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e3 e5       	ldi	r30, 0x53	; 83
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8d 7f       	andi	r24, 0xFD	; 253
    1472:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS00);
    1474:	a3 e5       	ldi	r26, 0x53	; 83
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e3 e5       	ldi	r30, 0x53	; 83
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8e 7f       	andi	r24, 0xFE	; 254
    1480:	8c 93       	st	X, r24
    1482:	6d c1       	rjmp	.+730    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==1024){
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	24 e0       	ldi	r18, 0x04	; 4
    148a:	80 30       	cpi	r24, 0x00	; 0
    148c:	92 07       	cpc	r25, r18
    148e:	09 f0       	breq	.+2      	; 0x1492 <TIMER_Start+0x102>
    1490:	66 c1       	rjmp	.+716    	; 0x175e <TIMER_Start+0x3ce>
				SET_BIT(TCCR0,CS02);
    1492:	a3 e5       	ldi	r26, 0x53	; 83
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e3 e5       	ldi	r30, 0x53	; 83
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	84 60       	ori	r24, 0x04	; 4
    149e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
    14a0:	a3 e5       	ldi	r26, 0x53	; 83
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e3 e5       	ldi	r30, 0x53	; 83
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS00);
    14ae:	a3 e5       	ldi	r26, 0x53	; 83
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e3 e5       	ldi	r30, 0x53	; 83
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	8c 93       	st	X, r24
    14bc:	50 c1       	rjmp	.+672    	; 0x175e <TIMER_Start+0x3ce>
			}

		}
		else if(t==1){
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <TIMER_Start+0x136>
    14c4:	8a c0       	rjmp	.+276    	; 0x15da <TIMER_Start+0x24a>

			// clock select
			if(clk==1){
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	91 05       	cpc	r25, r1
    14ce:	b1 f4       	brne	.+44     	; 0x14fc <TIMER_Start+0x16c>
				CLEAR_BIT(TCCR1B,CS12);
    14d0:	ae e4       	ldi	r26, 0x4E	; 78
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8b 7f       	andi	r24, 0xFB	; 251
    14dc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS11);
    14de:	ae e4       	ldi	r26, 0x4E	; 78
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ee e4       	ldi	r30, 0x4E	; 78
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8d 7f       	andi	r24, 0xFD	; 253
    14ea:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	81 60       	ori	r24, 0x01	; 1
    14f8:	8c 93       	st	X, r24
    14fa:	31 c1       	rjmp	.+610    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==8){
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	91 05       	cpc	r25, r1
    1504:	b1 f4       	brne	.+44     	; 0x1532 <TIMER_Start+0x1a2>
				CLEAR_BIT(TCCR1B,CS12);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8b 7f       	andi	r24, 0xFB	; 251
    1512:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS11);
    1514:	ae e4       	ldi	r26, 0x4E	; 78
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ee e4       	ldi	r30, 0x4E	; 78
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS10);
    1522:	ae e4       	ldi	r26, 0x4E	; 78
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ee e4       	ldi	r30, 0x4E	; 78
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8e 7f       	andi	r24, 0xFE	; 254
    152e:	8c 93       	st	X, r24
    1530:	16 c1       	rjmp	.+556    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==64){
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	80 34       	cpi	r24, 0x40	; 64
    1538:	91 05       	cpc	r25, r1
    153a:	b1 f4       	brne	.+44     	; 0x1568 <TIMER_Start+0x1d8>
				CLEAR_BIT(TCCR1B,CS12);
    153c:	ae e4       	ldi	r26, 0x4E	; 78
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e4       	ldi	r30, 0x4E	; 78
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8b 7f       	andi	r24, 0xFB	; 251
    1548:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS11);
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	82 60       	ori	r24, 0x02	; 2
    1556:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    1558:	ae e4       	ldi	r26, 0x4E	; 78
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ee e4       	ldi	r30, 0x4E	; 78
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	8c 93       	st	X, r24
    1566:	fb c0       	rjmp	.+502    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==256){
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	80 30       	cpi	r24, 0x00	; 0
    1570:	92 07       	cpc	r25, r18
    1572:	b1 f4       	brne	.+44     	; 0x15a0 <TIMER_Start+0x210>
				SET_BIT(TCCR1B,CS12);
    1574:	ae e4       	ldi	r26, 0x4E	; 78
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ee e4       	ldi	r30, 0x4E	; 78
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS11);
    1582:	ae e4       	ldi	r26, 0x4E	; 78
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ee e4       	ldi	r30, 0x4E	; 78
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8d 7f       	andi	r24, 0xFD	; 253
    158e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS10);
    1590:	ae e4       	ldi	r26, 0x4E	; 78
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ee e4       	ldi	r30, 0x4E	; 78
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8e 7f       	andi	r24, 0xFE	; 254
    159c:	8c 93       	st	X, r24
    159e:	df c0       	rjmp	.+446    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==1024){
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	24 e0       	ldi	r18, 0x04	; 4
    15a6:	80 30       	cpi	r24, 0x00	; 0
    15a8:	92 07       	cpc	r25, r18
    15aa:	09 f0       	breq	.+2      	; 0x15ae <TIMER_Start+0x21e>
    15ac:	d8 c0       	rjmp	.+432    	; 0x175e <TIMER_Start+0x3ce>
				SET_BIT(TCCR1B,CS12);
    15ae:	ae e4       	ldi	r26, 0x4E	; 78
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ee e4       	ldi	r30, 0x4E	; 78
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,CS11);
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
    15c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,CS10);
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	81 60       	ori	r24, 0x01	; 1
    15d6:	8c 93       	st	X, r24
    15d8:	c2 c0       	rjmp	.+388    	; 0x175e <TIMER_Start+0x3ce>




		}
		else if(t==2){
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	09 f0       	breq	.+2      	; 0x15e2 <TIMER_Start+0x252>
    15e0:	be c0       	rjmp	.+380    	; 0x175e <TIMER_Start+0x3ce>


			// clock select
			if(clk==1){
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	9b 81       	ldd	r25, Y+3	; 0x03
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	91 05       	cpc	r25, r1
    15ea:	b1 f4       	brne	.+44     	; 0x1618 <TIMER_Start+0x288>
				CLEAR_BIT(TCCR2,CS22);
    15ec:	a5 e4       	ldi	r26, 0x45	; 69
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e4       	ldi	r30, 0x45	; 69
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    15fa:	a5 e4       	ldi	r26, 0x45	; 69
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e4       	ldi	r30, 0x45	; 69
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8d 7f       	andi	r24, 0xFD	; 253
    1606:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1608:	a5 e4       	ldi	r26, 0x45	; 69
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e5 e4       	ldi	r30, 0x45	; 69
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	81 60       	ori	r24, 0x01	; 1
    1614:	8c 93       	st	X, r24
    1616:	a3 c0       	rjmp	.+326    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==8){
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	88 30       	cpi	r24, 0x08	; 8
    161e:	91 05       	cpc	r25, r1
    1620:	b1 f4       	brne	.+44     	; 0x164e <TIMER_Start+0x2be>
				CLEAR_BIT(TCCR2,CS22);
    1622:	a5 e4       	ldi	r26, 0x45	; 69
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e4       	ldi	r30, 0x45	; 69
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8b 7f       	andi	r24, 0xFB	; 251
    162e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS21);
    1630:	a3 e5       	ldi	r26, 0x53	; 83
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e3 e5       	ldi	r30, 0x53	; 83
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	82 60       	ori	r24, 0x02	; 2
    163c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    163e:	a5 e4       	ldi	r26, 0x45	; 69
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e4       	ldi	r30, 0x45	; 69
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8e 7f       	andi	r24, 0xFE	; 254
    164a:	8c 93       	st	X, r24
    164c:	88 c0       	rjmp	.+272    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk == 32){
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	80 32       	cpi	r24, 0x20	; 32
    1654:	91 05       	cpc	r25, r1
    1656:	b1 f4       	brne	.+44     	; 0x1684 <TIMER_Start+0x2f4>
				CLEAR_BIT(TCCR2,CS22);
    1658:	a5 e4       	ldi	r26, 0x45	; 69
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e4       	ldi	r30, 0x45	; 69
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8b 7f       	andi	r24, 0xFB	; 251
    1664:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS21);
    1666:	a5 e4       	ldi	r26, 0x45	; 69
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e4       	ldi	r30, 0x45	; 69
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	82 60       	ori	r24, 0x02	; 2
    1672:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1674:	a5 e4       	ldi	r26, 0x45	; 69
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e4       	ldi	r30, 0x45	; 69
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	81 60       	ori	r24, 0x01	; 1
    1680:	8c 93       	st	X, r24
    1682:	6d c0       	rjmp	.+218    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==64){
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	80 34       	cpi	r24, 0x40	; 64
    168a:	91 05       	cpc	r25, r1
    168c:	b1 f4       	brne	.+44     	; 0x16ba <TIMER_Start+0x32a>
				SET_BIT(TCCR2,CS22);
    168e:	a5 e4       	ldi	r26, 0x45	; 69
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e4       	ldi	r30, 0x45	; 69
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	84 60       	ori	r24, 0x04	; 4
    169a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    169c:	a5 e4       	ldi	r26, 0x45	; 69
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e4       	ldi	r30, 0x45	; 69
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8d 7f       	andi	r24, 0xFD	; 253
    16a8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    16aa:	a5 e4       	ldi	r26, 0x45	; 69
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e4       	ldi	r30, 0x45	; 69
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8e 7f       	andi	r24, 0xFE	; 254
    16b6:	8c 93       	st	X, r24
    16b8:	52 c0       	rjmp	.+164    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==128){
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	80 38       	cpi	r24, 0x80	; 128
    16c0:	91 05       	cpc	r25, r1
    16c2:	b1 f4       	brne	.+44     	; 0x16f0 <TIMER_Start+0x360>
				SET_BIT(TCCR2,CS22);
    16c4:	a5 e4       	ldi	r26, 0x45	; 69
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e4       	ldi	r30, 0x45	; 69
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	84 60       	ori	r24, 0x04	; 4
    16d0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS21);
    16d2:	a5 e4       	ldi	r26, 0x45	; 69
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e4       	ldi	r30, 0x45	; 69
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8d 7f       	andi	r24, 0xFD	; 253
    16de:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    16e0:	a5 e4       	ldi	r26, 0x45	; 69
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e4       	ldi	r30, 0x45	; 69
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	81 60       	ori	r24, 0x01	; 1
    16ec:	8c 93       	st	X, r24
    16ee:	37 c0       	rjmp	.+110    	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==256){
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	9b 81       	ldd	r25, Y+3	; 0x03
    16f4:	21 e0       	ldi	r18, 0x01	; 1
    16f6:	80 30       	cpi	r24, 0x00	; 0
    16f8:	92 07       	cpc	r25, r18
    16fa:	b1 f4       	brne	.+44     	; 0x1728 <TIMER_Start+0x398>
				SET_BIT(TCCR2,CS22);
    16fc:	a5 e4       	ldi	r26, 0x45	; 69
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e4       	ldi	r30, 0x45	; 69
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	84 60       	ori	r24, 0x04	; 4
    1708:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS21);
    170a:	a5 e4       	ldi	r26, 0x45	; 69
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e4       	ldi	r30, 0x45	; 69
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	82 60       	ori	r24, 0x02	; 2
    1716:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2,CS20);
    1718:	a5 e4       	ldi	r26, 0x45	; 69
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e5 e4       	ldi	r30, 0x45	; 69
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	8c 93       	st	X, r24
    1726:	1b c0       	rjmp	.+54     	; 0x175e <TIMER_Start+0x3ce>
			}
			else if(clk==1024){
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	24 e0       	ldi	r18, 0x04	; 4
    172e:	80 30       	cpi	r24, 0x00	; 0
    1730:	92 07       	cpc	r25, r18
    1732:	a9 f4       	brne	.+42     	; 0x175e <TIMER_Start+0x3ce>
				SET_BIT(TCCR2,CS22);
    1734:	a5 e4       	ldi	r26, 0x45	; 69
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e4       	ldi	r30, 0x45	; 69
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	84 60       	ori	r24, 0x04	; 4
    1740:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS21);
    1742:	a5 e4       	ldi	r26, 0x45	; 69
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e4       	ldi	r30, 0x45	; 69
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	82 60       	ori	r24, 0x02	; 2
    174e:	8c 93       	st	X, r24
				SET_BIT(TCCR2,CS20);
    1750:	a5 e4       	ldi	r26, 0x45	; 69
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e4       	ldi	r30, 0x45	; 69
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	81 60       	ori	r24, 0x01	; 1
    175c:	8c 93       	st	X, r24

		}



}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <TIMER_Stop>:
void TIMER_Stop(uint8 t){
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
	if(t==0){
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	88 23       	and	r24, r24
    177a:	b1 f4       	brne	.+44     	; 0x17a8 <TIMER_Stop+0x3e>
			// clock select
		CLEAR_BIT(TCCR0,CS02);
    177c:	a3 e5       	ldi	r26, 0x53	; 83
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e3 e5       	ldi	r30, 0x53	; 83
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8b 7f       	andi	r24, 0xFB	; 251
    1788:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS01);
    178a:	a3 e5       	ldi	r26, 0x53	; 83
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e3 e5       	ldi	r30, 0x53	; 83
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8d 7f       	andi	r24, 0xFD	; 253
    1796:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS00);
    1798:	a3 e5       	ldi	r26, 0x53	; 83
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e3 e5       	ldi	r30, 0x53	; 83
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8e 7f       	andi	r24, 0xFE	; 254
    17a4:	8c 93       	st	X, r24
    17a6:	31 c0       	rjmp	.+98     	; 0x180a <TIMER_Stop+0xa0>


	}
	else if(t==1){
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	b1 f4       	brne	.+44     	; 0x17da <TIMER_Stop+0x70>
	// clock select
		CLEAR_BIT(TCCR1B,CS12);
    17ae:	ae e4       	ldi	r26, 0x4E	; 78
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ee e4       	ldi	r30, 0x4E	; 78
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8b 7f       	andi	r24, 0xFB	; 251
    17ba:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS11);
    17bc:	ae e4       	ldi	r26, 0x4E	; 78
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ee e4       	ldi	r30, 0x4E	; 78
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8d 7f       	andi	r24, 0xFD	; 253
    17c8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS10);
    17ca:	ae e4       	ldi	r26, 0x4E	; 78
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	ee e4       	ldi	r30, 0x4E	; 78
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	8c 93       	st	X, r24
    17d8:	18 c0       	rjmp	.+48     	; 0x180a <TIMER_Stop+0xa0>
	}
	else if(t==2){
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	a9 f4       	brne	.+42     	; 0x180a <TIMER_Stop+0xa0>
	// clock select
		CLEAR_BIT(TCCR2,CS22);
    17e0:	a5 e4       	ldi	r26, 0x45	; 69
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e4       	ldi	r30, 0x45	; 69
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8b 7f       	andi	r24, 0xFB	; 251
    17ec:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,CS21);
    17ee:	a5 e4       	ldi	r26, 0x45	; 69
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e4       	ldi	r30, 0x45	; 69
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8d 7f       	andi	r24, 0xFD	; 253
    17fa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,CS20);
    17fc:	a5 e4       	ldi	r26, 0x45	; 69
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e4       	ldi	r30, 0x45	; 69
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8e 7f       	andi	r24, 0xFE	; 254
    1808:	8c 93       	st	X, r24
	}

}
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <TIMER_Timer0SetCallBack>:

void TIMER_Timer0SetCallBack(void(*ptr)(void)){
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <TIMER_Timer0SetCallBack+0x6>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
	timer0 = ptr;
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	90 93 73 00 	sts	0x0073, r25
    1828:	80 93 72 00 	sts	0x0072, r24
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <TIMER_Timer1SetCallBack>:
void TIMER_Timer1SetCallBack(void(*ptr)(void)){
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <TIMER_Timer1SetCallBack+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	timer1=ptr;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	90 93 75 00 	sts	0x0075, r25
    184c:	80 93 74 00 	sts	0x0074, r24
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <TIMER_Timer2SetCallBack>:
void TIMER_Timer2SetCallBack(void(*ptr)(void)){
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <TIMER_Timer2SetCallBack+0x6>
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
	timer2=ptr;
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	90 93 77 00 	sts	0x0077, r25
    1870:	80 93 76 00 	sts	0x0076, r24
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <__vector_19>:

ISR(TIMER0_COMP_vect){
    187e:	1f 92       	push	r1
    1880:	0f 92       	push	r0
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	0f 92       	push	r0
    1886:	11 24       	eor	r1, r1
    1888:	2f 93       	push	r18
    188a:	3f 93       	push	r19
    188c:	4f 93       	push	r20
    188e:	5f 93       	push	r21
    1890:	6f 93       	push	r22
    1892:	7f 93       	push	r23
    1894:	8f 93       	push	r24
    1896:	9f 93       	push	r25
    1898:	af 93       	push	r26
    189a:	bf 93       	push	r27
    189c:	ef 93       	push	r30
    189e:	ff 93       	push	r31
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	if(timer0!= NULL){
    18a8:	80 91 72 00 	lds	r24, 0x0072
    18ac:	90 91 73 00 	lds	r25, 0x0073
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	29 f0       	breq	.+10     	; 0x18be <__vector_19+0x40>
		(*timer0)();
    18b4:	e0 91 72 00 	lds	r30, 0x0072
    18b8:	f0 91 73 00 	lds	r31, 0x0073
    18bc:	09 95       	icall
	}
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	bf 91       	pop	r27
    18c8:	af 91       	pop	r26
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	7f 91       	pop	r23
    18d0:	6f 91       	pop	r22
    18d2:	5f 91       	pop	r21
    18d4:	4f 91       	pop	r20
    18d6:	3f 91       	pop	r19
    18d8:	2f 91       	pop	r18
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <__vector_6>:
ISR(TIMER1_COMPA_vect){
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	5f 93       	push	r21
    18f6:	6f 93       	push	r22
    18f8:	7f 93       	push	r23
    18fa:	8f 93       	push	r24
    18fc:	9f 93       	push	r25
    18fe:	af 93       	push	r26
    1900:	bf 93       	push	r27
    1902:	ef 93       	push	r30
    1904:	ff 93       	push	r31
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	if(timer1!= NULL){
    190e:	80 91 74 00 	lds	r24, 0x0074
    1912:	90 91 75 00 	lds	r25, 0x0075
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	29 f0       	breq	.+10     	; 0x1924 <__vector_6+0x40>
		(*timer1)();
    191a:	e0 91 74 00 	lds	r30, 0x0074
    191e:	f0 91 75 00 	lds	r31, 0x0075
    1922:	09 95       	icall
	}
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_3>:
ISR(TIMER2_COMP_vect){
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	if(timer2!= NULL){
    1974:	80 91 76 00 	lds	r24, 0x0076
    1978:	90 91 77 00 	lds	r25, 0x0077
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	29 f0       	breq	.+10     	; 0x198a <__vector_3+0x40>
		(*timer2)();
    1980:	e0 91 76 00 	lds	r30, 0x0076
    1984:	f0 91 77 00 	lds	r31, 0x0077
    1988:	09 95       	icall
	}
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_9>:
ISR(TIMER0_OVF_vect){
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	if(timer0!= NULL){
    19da:	80 91 72 00 	lds	r24, 0x0072
    19de:	90 91 73 00 	lds	r25, 0x0073
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <__vector_9+0x40>
		(*timer0)();
    19e6:	e0 91 72 00 	lds	r30, 0x0072
    19ea:	f0 91 73 00 	lds	r31, 0x0073
    19ee:	09 95       	icall
	}
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <__vector_8>:
ISR(TIMER1_OVF_vect){
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	if(timer1!= NULL){
    1a40:	80 91 74 00 	lds	r24, 0x0074
    1a44:	90 91 75 00 	lds	r25, 0x0075
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	29 f0       	breq	.+10     	; 0x1a56 <__vector_8+0x40>
		(*timer1)();
    1a4c:	e0 91 74 00 	lds	r30, 0x0074
    1a50:	f0 91 75 00 	lds	r31, 0x0075
    1a54:	09 95       	icall
	}
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	bf 91       	pop	r27
    1a60:	af 91       	pop	r26
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	7f 91       	pop	r23
    1a68:	6f 91       	pop	r22
    1a6a:	5f 91       	pop	r21
    1a6c:	4f 91       	pop	r20
    1a6e:	3f 91       	pop	r19
    1a70:	2f 91       	pop	r18
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	0f 90       	pop	r0
    1a78:	1f 90       	pop	r1
    1a7a:	18 95       	reti

00001a7c <__vector_4>:
ISR(TIMER2_OVF_vect){
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	2f 93       	push	r18
    1a88:	3f 93       	push	r19
    1a8a:	4f 93       	push	r20
    1a8c:	5f 93       	push	r21
    1a8e:	6f 93       	push	r22
    1a90:	7f 93       	push	r23
    1a92:	8f 93       	push	r24
    1a94:	9f 93       	push	r25
    1a96:	af 93       	push	r26
    1a98:	bf 93       	push	r27
    1a9a:	ef 93       	push	r30
    1a9c:	ff 93       	push	r31
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	if(timer2!= NULL){
    1aa6:	80 91 76 00 	lds	r24, 0x0076
    1aaa:	90 91 77 00 	lds	r25, 0x0077
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	29 f0       	breq	.+10     	; 0x1abc <__vector_4+0x40>
		(*timer2)();
    1ab2:	e0 91 76 00 	lds	r30, 0x0076
    1ab6:	f0 91 77 00 	lds	r31, 0x0077
    1aba:	09 95       	icall
	}
}
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	ff 91       	pop	r31
    1ac2:	ef 91       	pop	r30
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <EEPROM_init>:

#include "eeprom.h"
#include "i2c.h"

void EEPROM_init(void)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
	TWI_init ();
    1aea:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <TWI_init>

}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <EEPROM_writeByte+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <EEPROM_writeByte+0x8>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    1b06:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <TWI_start>
	if (TWI_getStatus() != TW_START )
    1b0a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1b0e:	88 30       	cpi	r24, 0x08	; 8
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <EEPROM_writeByte+0x22>
		return ERROR;
    1b12:	1c 82       	std	Y+4, r1	; 0x04
    1b14:	28 c0       	rjmp	.+80     	; 0x1b66 <EEPROM_writeByte+0x72>

	TWI_write((uint8)(0xA0 | ((u16addr & 0x700) >> 7))) ;  //device address (salve) EEPROM
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	80 70       	andi	r24, 0x00	; 0
    1b1c:	97 70       	andi	r25, 0x07	; 7
    1b1e:	88 0f       	add	r24, r24
    1b20:	89 2f       	mov	r24, r25
    1b22:	88 1f       	adc	r24, r24
    1b24:	99 0b       	sbc	r25, r25
    1b26:	91 95       	neg	r25
    1b28:	80 6a       	ori	r24, 0xA0	; 160
    1b2a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK )
    1b2e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1b32:	88 31       	cpi	r24, 0x18	; 24
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <EEPROM_writeByte+0x46>
		return ERROR;
    1b36:	1c 82       	std	Y+4, r1	; 0x04
    1b38:	16 c0       	rjmp	.+44     	; 0x1b66 <EEPROM_writeByte+0x72>

	TWI_write((uint8)u16addr); // memory location in EEPROM
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK )
    1b40:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1b44:	88 32       	cpi	r24, 0x28	; 40
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <EEPROM_writeByte+0x58>
		return ERROR;
    1b48:	1c 82       	std	Y+4, r1	; 0x04
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <EEPROM_writeByte+0x72>

	TWI_write(u8data); // data
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK )
    1b52:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1b56:	88 32       	cpi	r24, 0x28	; 40
    1b58:	11 f0       	breq	.+4      	; 0x1b5e <EEPROM_writeByte+0x6a>
		return ERROR;
    1b5a:	1c 82       	std	Y+4, r1	; 0x04
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <EEPROM_writeByte+0x72>

	TWI_stop ();
    1b5e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_stop>

	return SUCCESS;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	8c 83       	std	Y+4, r24	; 0x04
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <EEPROM_readByte+0x6>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <EEPROM_readByte+0x8>
    1b7e:	0f 92       	push	r0
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	7c 83       	std	Y+4, r23	; 0x04
    1b8a:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    1b8c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <TWI_start>
	if (TWI_getStatus() != TW_START )
    1b90:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1b94:	88 30       	cpi	r24, 0x08	; 8
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <EEPROM_readByte+0x26>
		return ERROR;
    1b98:	1d 82       	std	Y+5, r1	; 0x05
    1b9a:	44 c0       	rjmp	.+136    	; 0x1c24 <EEPROM_readByte+0xae>

	TWI_write((uint8)(0xA0 | ((u16addr & 0x700) >> 7))) ;  //device address (salve) EEPROM
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	80 70       	andi	r24, 0x00	; 0
    1ba2:	97 70       	andi	r25, 0x07	; 7
    1ba4:	88 0f       	add	r24, r24
    1ba6:	89 2f       	mov	r24, r25
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 0b       	sbc	r25, r25
    1bac:	91 95       	neg	r25
    1bae:	80 6a       	ori	r24, 0xA0	; 160
    1bb0:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK )
    1bb4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1bb8:	88 31       	cpi	r24, 0x18	; 24
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <EEPROM_readByte+0x4a>
		return ERROR;
    1bbc:	1d 82       	std	Y+5, r1	; 0x05
    1bbe:	32 c0       	rjmp	.+100    	; 0x1c24 <EEPROM_readByte+0xae>

	TWI_write((uint8)u16addr); // memory location in EEPROM
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK )
    1bc6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1bca:	88 32       	cpi	r24, 0x28	; 40
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <EEPROM_readByte+0x5c>
		return ERROR;
    1bce:	1d 82       	std	Y+5, r1	; 0x05
    1bd0:	29 c0       	rjmp	.+82     	; 0x1c24 <EEPROM_readByte+0xae>

	TWI_start();  // repeat start bit (because we switch from write to read)
    1bd2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
    1bd6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1bda:	80 31       	cpi	r24, 0x10	; 16
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <EEPROM_readByte+0x6c>
		return ERROR;
    1bde:	1d 82       	std	Y+5, r1	; 0x05
    1be0:	21 c0       	rjmp	.+66     	; 0x1c24 <EEPROM_readByte+0xae>

	TWI_write((uint8)(0xA0 | ((u16addr & 0x700) >> 7)|1)) ;  //device address (salve) EEPROM // read mode
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	80 70       	andi	r24, 0x00	; 0
    1be8:	97 70       	andi	r25, 0x07	; 7
    1bea:	88 0f       	add	r24, r24
    1bec:	89 2f       	mov	r24, r25
    1bee:	88 1f       	adc	r24, r24
    1bf0:	99 0b       	sbc	r25, r25
    1bf2:	91 95       	neg	r25
    1bf4:	81 6a       	ori	r24, 0xA1	; 161
    1bf6:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1bfa:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1bfe:	80 34       	cpi	r24, 0x40	; 64
    1c00:	11 f0       	breq	.+4      	; 0x1c06 <EEPROM_readByte+0x90>
		return ERROR;
    1c02:	1d 82       	std	Y+5, r1	; 0x05
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <EEPROM_readByte+0xae>

	*u8data = TWI_readWithNACK();
    1c06:	0e 94 76 0e 	call	0x1cec	; 0x1cec <TWI_readWithNACK>
    1c0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c0e:	80 83       	st	Z, r24
	if (TWI_getStatus() != TW_MR_DATA_NACK )
    1c10:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <TWI_getStatus>
    1c14:	88 35       	cpi	r24, 0x58	; 88
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <EEPROM_readByte+0xa6>
		return ERROR;
    1c18:	1d 82       	std	Y+5, r1	; 0x05
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <EEPROM_readByte+0xae>

	TWI_stop();
    1c1c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_stop>

	return SUCCESS;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <TWI_init>:
 */

#include "i2c.h"

void TWI_init (void)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62

	/*pre_scalar */
	TWBR = 0x02;
    1c3e:	e0 e2       	ldi	r30, 0x20	; 32
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	80 83       	st	Z, r24
	TWSR = 0x00;
    1c46:	e1 e2       	ldi	r30, 0x21	; 33
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	10 82       	st	Z, r1

	/* address (in case of slave) */
	TWAR = 0b00000010;
    1c4c:	e2 e2       	ldi	r30, 0x22	; 34
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	80 83       	st	Z, r24

	TWCR = (1 << TWEN); //enable TWI
    1c54:	e6 e5       	ldi	r30, 0x56	; 86
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	80 83       	st	Z, r24
}
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <TWI_start>:

void TWI_start (void)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 <<TWSTA);
    1c6a:	e6 e5       	ldi	r30, 0x56	; 86
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	84 ea       	ldi	r24, 0xA4	; 164
    1c70:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1c72:	e6 e5       	ldi	r30, 0x56	; 86
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	88 23       	and	r24, r24
    1c7a:	dc f7       	brge	.-10     	; 0x1c72 <TWI_start+0x10>
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <TWI_stop>:

void TWI_stop (void)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 <<TWSTO);
    1c8a:	e6 e5       	ldi	r30, 0x56	; 86
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	84 e9       	ldi	r24, 0x94	; 148
    1c90:	80 83       	st	Z, r24
	//while (BIT_IS_CLEAR(TWCR, TWINT));
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <TWI_write>:

void TWI_write(uint8 data)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	0f 92       	push	r0
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    1ca4:	e3 e2       	ldi	r30, 0x23	; 35
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    1cac:	e6 e5       	ldi	r30, 0x56	; 86
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	84 e8       	ldi	r24, 0x84	; 132
    1cb2:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1cb4:	e6 e5       	ldi	r30, 0x56	; 86
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	88 23       	and	r24, r24
    1cbc:	dc f7       	brge	.-10     	; 0x1cb4 <TWI_write+0x1c>
}
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1cce:	e6 e5       	ldi	r30, 0x56	; 86
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	84 ec       	ldi	r24, 0xC4	; 196
    1cd4:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1cd6:	e6 e5       	ldi	r30, 0x56	; 86
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	88 23       	and	r24, r24
    1cde:	dc f7       	brge	.-10     	; 0x1cd6 <TWI_readWithACK+0x10>
	return TWDR;
    1ce0:	e3 e2       	ldi	r30, 0x23	; 35
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
}
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    1cf4:	e6 e5       	ldi	r30, 0x56	; 86
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	84 e8       	ldi	r24, 0x84	; 132
    1cfa:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1cfc:	e6 e5       	ldi	r30, 0x56	; 86
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	88 23       	and	r24, r24
    1d04:	dc f7       	brge	.-10     	; 0x1cfc <TWI_readWithNACK+0x10>
	return TWDR;
    1d06:	e3 e2       	ldi	r30, 0x23	; 35
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8);
    1d1a:	e1 e2       	ldi	r30, 0x21	; 33
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	88 7f       	andi	r24, 0xF8	; 248
}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <main>:


/*------------------------------------------Main Function--------------------------------------*/


int main(void){
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	65 97       	sbiw	r28, 0x15	; 21
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
	struct TIMER_init Timer2;
	uint8 failed=0;
    1d3c:	19 82       	std	Y+1, r1	; 0x01
	uint8 pass[5];

	UART_config config = {BIT_8, DISABLE, STOP_BIT_1};   // 8_bit frame, parity disabled, 1 stop bit
    1d3e:	ce 01       	movw	r24, r28
    1d40:	0e 96       	adiw	r24, 0x0e	; 14
    1d42:	9a 8b       	std	Y+18, r25	; 0x12
    1d44:	89 8b       	std	Y+17, r24	; 0x11
    1d46:	ee e6       	ldi	r30, 0x6E	; 110
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	fc 8b       	std	Y+20, r31	; 0x14
    1d4c:	eb 8b       	std	Y+19, r30	; 0x13
    1d4e:	f3 e0       	ldi	r31, 0x03	; 3
    1d50:	fd 8b       	std	Y+21, r31	; 0x15
    1d52:	eb 89       	ldd	r30, Y+19	; 0x13
    1d54:	fc 89       	ldd	r31, Y+20	; 0x14
    1d56:	00 80       	ld	r0, Z
    1d58:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
    1d62:	e9 89       	ldd	r30, Y+17	; 0x11
    1d64:	fa 89       	ldd	r31, Y+18	; 0x12
    1d66:	00 82       	st	Z, r0
    1d68:	89 89       	ldd	r24, Y+17	; 0x11
    1d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
    1d72:	9d 89       	ldd	r25, Y+21	; 0x15
    1d74:	91 50       	subi	r25, 0x01	; 1
    1d76:	9d 8b       	std	Y+21, r25	; 0x15
    1d78:	ed 89       	ldd	r30, Y+21	; 0x15
    1d7a:	ee 23       	and	r30, r30
    1d7c:	51 f7       	brne	.-44     	; 0x1d52 <main+0x2a>
	uart_init(&config);
    1d7e:	ce 01       	movw	r24, r28
    1d80:	0e 96       	adiw	r24, 0x0e	; 14
    1d82:	0e 94 9b 12 	call	0x2536	; 0x2536 <uart_init>

	Timer2.timer=1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	8a 83       	std	Y+2, r24	; 0x02
	Timer2.mode=1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
	Timer2.comp_value=39062;
    1d8e:	86 e9       	ldi	r24, 0x96	; 150
    1d90:	98 e9       	ldi	r25, 0x98	; 152
    1d92:	9f 83       	std	Y+7, r25	; 0x07
    1d94:	8e 83       	std	Y+6, r24	; 0x06
	Timer2.prescaler=1024;
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	94 e0       	ldi	r25, 0x04	; 4
    1d9a:	9d 83       	std	Y+5, r25	; 0x05
    1d9c:	8c 83       	std	Y+4, r24	; 0x04
	Timer2.comp_match_mode=0;
    1d9e:	18 86       	std	Y+8, r1	; 0x08
	SREG|=(1<<7);
    1da0:	af e5       	ldi	r26, 0x5F	; 95
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	ef e5       	ldi	r30, 0x5F	; 95
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	8c 93       	st	X, r24
	TIMER_Init(&Timer2);
    1dae:	ce 01       	movw	r24, r28
    1db0:	02 96       	adiw	r24, 0x02	; 2
    1db2:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER_Init>
	TIMER_Stop(1);
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	0e 94 b5 0b 	call	0x176a	; 0x176a <TIMER_Stop>
	TIMER_Timer1SetCallBack(&Timer_add_count);
    1dbc:	84 e3       	ldi	r24, 0x34	; 52
    1dbe:	90 e1       	ldi	r25, 0x10	; 16
    1dc0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <TIMER_Timer1SetCallBack>
	EEPROM_init();
    1dc4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <EEPROM_init>
	DDRD|=(1<<7);
    1dc8:	a1 e3       	ldi	r26, 0x31	; 49
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e1 e3       	ldi	r30, 0x31	; 49
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 68       	ori	r24, 0x80	; 128
    1dd4:	8c 93       	st	X, r24
	MOTOR_init();
    1dd6:	0e 94 06 12 	call	0x240c	; 0x240c <MOTOR_init>


	get_password(pass);
    1dda:	ce 01       	movw	r24, r28
    1ddc:	09 96       	adiw	r24, 0x09	; 9
    1dde:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
	Save_Password(pass);
    1de2:	ce 01       	movw	r24, r28
    1de4:	09 96       	adiw	r24, 0x09	; 9
    1de6:	0e 94 8d 10 	call	0x211a	; 0x211a <Save_Password>


	while(1){
		while(UART_RecieveByte()!=status_READY){};
    1dea:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1dee:	98 2f       	mov	r25, r24
    1df0:	80 91 69 00 	lds	r24, 0x0069
    1df4:	98 17       	cp	r25, r24
    1df6:	c9 f7       	brne	.-14     	; 0x1dea <main+0xc2>
		UART_SendByte(status_READY);
    1df8:	80 91 69 00 	lds	r24, 0x0069
    1dfc:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
		status=UART_RecieveByte();
    1e00:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1e04:	80 93 7a 00 	sts	0x007A, r24
		if(status=='+')
    1e08:	80 91 7a 00 	lds	r24, 0x007A
    1e0c:	8b 32       	cpi	r24, 0x2B	; 43
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <main+0xea>
    1e10:	9c c0       	rjmp	.+312    	; 0x1f4a <main+0x222>
		{
			get_password(pass);
    1e12:	ce 01       	movw	r24, r28
    1e14:	09 96       	adiw	r24, 0x09	; 9
    1e16:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
			failed=Compare_Password(pass);
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	09 96       	adiw	r24, 0x09	; 9
    1e1e:	0e 94 2d 11 	call	0x225a	; 0x225a <Compare_Password>
    1e22:	89 83       	std	Y+1, r24	; 0x01
			if(failed==0)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	88 23       	and	r24, r24
    1e28:	c1 f4       	brne	.+48     	; 0x1e5a <main+0x132>
			{
				UART_SendByte(result_READY);
    1e2a:	80 91 6d 00 	lds	r24, 0x006D
    1e2e:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				while(UART_RecieveByte()!=result_READY){};
    1e32:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1e36:	98 2f       	mov	r25, r24
    1e38:	80 91 6d 00 	lds	r24, 0x006D
    1e3c:	98 17       	cp	r25, r24
    1e3e:	c9 f7       	brne	.-14     	; 0x1e32 <main+0x10a>
				UART_SendByte(matched);
    1e40:	80 91 6a 00 	lds	r24, 0x006A
    1e44:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				get_password(pass);
    1e48:	ce 01       	movw	r24, r28
    1e4a:	09 96       	adiw	r24, 0x09	; 9
    1e4c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
				Save_Password(pass);
    1e50:	ce 01       	movw	r24, r28
    1e52:	09 96       	adiw	r24, 0x09	; 9
    1e54:	0e 94 8d 10 	call	0x211a	; 0x211a <Save_Password>
    1e58:	c8 cf       	rjmp	.-112    	; 0x1dea <main+0xc2>
			}
			else{
				UART_SendByte(result_READY);
    1e5a:	80 91 6d 00 	lds	r24, 0x006D
    1e5e:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				while(UART_RecieveByte()!=result_READY){};
    1e62:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1e66:	98 2f       	mov	r25, r24
    1e68:	80 91 6d 00 	lds	r24, 0x006D
    1e6c:	98 17       	cp	r25, r24
    1e6e:	c9 f7       	brne	.-14     	; 0x1e62 <main+0x13a>
				UART_SendByte(unmatched);
    1e70:	80 91 6b 00 	lds	r24, 0x006B
    1e74:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				get_password(pass);
    1e78:	ce 01       	movw	r24, r28
    1e7a:	09 96       	adiw	r24, 0x09	; 9
    1e7c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
				failed=Compare_Password(pass);
    1e80:	ce 01       	movw	r24, r28
    1e82:	09 96       	adiw	r24, 0x09	; 9
    1e84:	0e 94 2d 11 	call	0x225a	; 0x225a <Compare_Password>
    1e88:	89 83       	std	Y+1, r24	; 0x01
				if(failed==0)
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	88 23       	and	r24, r24
    1e8e:	c1 f4       	brne	.+48     	; 0x1ec0 <main+0x198>
				{
					UART_SendByte(result_READY);
    1e90:	80 91 6d 00 	lds	r24, 0x006D
    1e94:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					while(UART_RecieveByte()!=result_READY){};
    1e98:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	80 91 6d 00 	lds	r24, 0x006D
    1ea2:	98 17       	cp	r25, r24
    1ea4:	c9 f7       	brne	.-14     	; 0x1e98 <main+0x170>
					UART_SendByte(matched);
    1ea6:	80 91 6a 00 	lds	r24, 0x006A
    1eaa:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					get_password(pass);
    1eae:	ce 01       	movw	r24, r28
    1eb0:	09 96       	adiw	r24, 0x09	; 9
    1eb2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
					Save_Password(pass);
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	09 96       	adiw	r24, 0x09	; 9
    1eba:	0e 94 8d 10 	call	0x211a	; 0x211a <Save_Password>
    1ebe:	95 cf       	rjmp	.-214    	; 0x1dea <main+0xc2>
				}
				else{
					UART_SendByte(result_READY);
    1ec0:	80 91 6d 00 	lds	r24, 0x006D
    1ec4:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					while(UART_RecieveByte()!=result_READY){};
    1ec8:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1ecc:	98 2f       	mov	r25, r24
    1ece:	80 91 6d 00 	lds	r24, 0x006D
    1ed2:	98 17       	cp	r25, r24
    1ed4:	c9 f7       	brne	.-14     	; 0x1ec8 <main+0x1a0>
					UART_SendByte(unmatched);
    1ed6:	80 91 6b 00 	lds	r24, 0x006B
    1eda:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					get_password(pass);
    1ede:	ce 01       	movw	r24, r28
    1ee0:	09 96       	adiw	r24, 0x09	; 9
    1ee2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
					failed=Compare_Password(pass);
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	09 96       	adiw	r24, 0x09	; 9
    1eea:	0e 94 2d 11 	call	0x225a	; 0x225a <Compare_Password>
    1eee:	89 83       	std	Y+1, r24	; 0x01
					if(failed==0)
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	88 23       	and	r24, r24
    1ef4:	c1 f4       	brne	.+48     	; 0x1f26 <main+0x1fe>
					{
						UART_SendByte(result_READY);
    1ef6:	80 91 6d 00 	lds	r24, 0x006D
    1efa:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						while(UART_RecieveByte()!=result_READY){};
    1efe:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1f02:	98 2f       	mov	r25, r24
    1f04:	80 91 6d 00 	lds	r24, 0x006D
    1f08:	98 17       	cp	r25, r24
    1f0a:	c9 f7       	brne	.-14     	; 0x1efe <main+0x1d6>
						UART_SendByte(matched);
    1f0c:	80 91 6a 00 	lds	r24, 0x006A
    1f10:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						get_password(pass);
    1f14:	ce 01       	movw	r24, r28
    1f16:	09 96       	adiw	r24, 0x09	; 9
    1f18:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
						Save_Password(pass);
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	09 96       	adiw	r24, 0x09	; 9
    1f20:	0e 94 8d 10 	call	0x211a	; 0x211a <Save_Password>
    1f24:	62 cf       	rjmp	.-316    	; 0x1dea <main+0xc2>
					}
					else{
						UART_SendByte(result_READY);
    1f26:	80 91 6d 00 	lds	r24, 0x006D
    1f2a:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						while(UART_RecieveByte()!=result_READY){};
    1f2e:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1f32:	98 2f       	mov	r25, r24
    1f34:	80 91 6d 00 	lds	r24, 0x006D
    1f38:	98 17       	cp	r25, r24
    1f3a:	c9 f7       	brne	.-14     	; 0x1f2e <main+0x206>
						UART_SendByte(thief);
    1f3c:	80 91 6c 00 	lds	r24, 0x006C
    1f40:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						Theif();
    1f44:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Theif>
    1f48:	50 cf       	rjmp	.-352    	; 0x1dea <main+0xc2>
						}
					}
				}
		}else if(status=='-')
    1f4a:	80 91 7a 00 	lds	r24, 0x007A
    1f4e:	8d 32       	cpi	r24, 0x2D	; 45
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <main+0x22c>
    1f52:	4b cf       	rjmp	.-362    	; 0x1dea <main+0xc2>
		{
			get_password(pass);
    1f54:	ce 01       	movw	r24, r28
    1f56:	09 96       	adiw	r24, 0x09	; 9
    1f58:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
			failed=Compare_Password(pass);
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	09 96       	adiw	r24, 0x09	; 9
    1f60:	0e 94 2d 11 	call	0x225a	; 0x225a <Compare_Password>
    1f64:	89 83       	std	Y+1, r24	; 0x01
			if(failed==0)
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	88 23       	and	r24, r24
    1f6a:	91 f4       	brne	.+36     	; 0x1f90 <main+0x268>
			{
				UART_SendByte(result_READY);
    1f6c:	80 91 6d 00 	lds	r24, 0x006D
    1f70:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				while(UART_RecieveByte()!=result_READY){};
    1f74:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1f78:	98 2f       	mov	r25, r24
    1f7a:	80 91 6d 00 	lds	r24, 0x006D
    1f7e:	98 17       	cp	r25, r24
    1f80:	c9 f7       	brne	.-14     	; 0x1f74 <main+0x24c>
				UART_SendByte(matched);
    1f82:	80 91 6a 00 	lds	r24, 0x006A
    1f86:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				open_door();
    1f8a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <open_door>
    1f8e:	2d cf       	rjmp	.-422    	; 0x1dea <main+0xc2>

			}
			else{
				UART_SendByte(result_READY);
    1f90:	80 91 6d 00 	lds	r24, 0x006D
    1f94:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				while(UART_RecieveByte()!=result_READY){};
    1f98:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	80 91 6d 00 	lds	r24, 0x006D
    1fa2:	98 17       	cp	r25, r24
    1fa4:	c9 f7       	brne	.-14     	; 0x1f98 <main+0x270>
				UART_SendByte(unmatched);
    1fa6:	80 91 6b 00 	lds	r24, 0x006B
    1faa:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
				get_password(pass);
    1fae:	ce 01       	movw	r24, r28
    1fb0:	09 96       	adiw	r24, 0x09	; 9
    1fb2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
				failed=Compare_Password(pass);
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	09 96       	adiw	r24, 0x09	; 9
    1fba:	0e 94 2d 11 	call	0x225a	; 0x225a <Compare_Password>
    1fbe:	89 83       	std	Y+1, r24	; 0x01
				if(failed==0)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	88 23       	and	r24, r24
    1fc4:	91 f4       	brne	.+36     	; 0x1fea <main+0x2c2>
				{
					UART_SendByte(result_READY);
    1fc6:	80 91 6d 00 	lds	r24, 0x006D
    1fca:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					while(UART_RecieveByte()!=result_READY){};
    1fce:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	80 91 6d 00 	lds	r24, 0x006D
    1fd8:	98 17       	cp	r25, r24
    1fda:	c9 f7       	brne	.-14     	; 0x1fce <main+0x2a6>
					UART_SendByte(matched);
    1fdc:	80 91 6a 00 	lds	r24, 0x006A
    1fe0:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					open_door();
    1fe4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <open_door>
    1fe8:	00 cf       	rjmp	.-512    	; 0x1dea <main+0xc2>
				}
				else{
					UART_SendByte(result_READY);
    1fea:	80 91 6d 00 	lds	r24, 0x006D
    1fee:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					while(UART_RecieveByte()!=result_READY){};
    1ff2:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	80 91 6d 00 	lds	r24, 0x006D
    1ffc:	98 17       	cp	r25, r24
    1ffe:	c9 f7       	brne	.-14     	; 0x1ff2 <main+0x2ca>
					UART_SendByte(unmatched);
    2000:	80 91 6b 00 	lds	r24, 0x006B
    2004:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
					get_password(pass);
    2008:	ce 01       	movw	r24, r28
    200a:	09 96       	adiw	r24, 0x09	; 9
    200c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_password>
					failed=Compare_Password(pass);
    2010:	ce 01       	movw	r24, r28
    2012:	09 96       	adiw	r24, 0x09	; 9
    2014:	0e 94 2d 11 	call	0x225a	; 0x225a <Compare_Password>
    2018:	89 83       	std	Y+1, r24	; 0x01
					if(failed==0)
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	88 23       	and	r24, r24
    201e:	91 f4       	brne	.+36     	; 0x2044 <main+0x31c>
					{
						UART_SendByte(result_READY);
    2020:	80 91 6d 00 	lds	r24, 0x006D
    2024:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						while(UART_RecieveByte()!=result_READY){};
    2028:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    202c:	98 2f       	mov	r25, r24
    202e:	80 91 6d 00 	lds	r24, 0x006D
    2032:	98 17       	cp	r25, r24
    2034:	c9 f7       	brne	.-14     	; 0x2028 <main+0x300>
						UART_SendByte(matched);
    2036:	80 91 6a 00 	lds	r24, 0x006A
    203a:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						open_door();
    203e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <open_door>
    2042:	d3 ce       	rjmp	.-602    	; 0x1dea <main+0xc2>
					}
					else{
						UART_SendByte(result_READY);
    2044:	80 91 6d 00 	lds	r24, 0x006D
    2048:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						while(UART_RecieveByte()!=result_READY){};
    204c:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    2050:	98 2f       	mov	r25, r24
    2052:	80 91 6d 00 	lds	r24, 0x006D
    2056:	98 17       	cp	r25, r24
    2058:	c9 f7       	brne	.-14     	; 0x204c <main+0x324>
						UART_SendByte(thief);
    205a:	80 91 6c 00 	lds	r24, 0x006C
    205e:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
						Theif();
    2062:	0e 94 ee 11 	call	0x23dc	; 0x23dc <Theif>
    2066:	c1 ce       	rjmp	.-638    	; 0x1dea <main+0xc2>

00002068 <Timer_add_count>:





 void Timer_add_count(void){
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	count++;
    2070:	80 91 78 00 	lds	r24, 0x0078
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	80 93 78 00 	sts	0x0078, r24
}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <Timer_count>:


void Timer_count(uint8 time_5seconds){
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	0f 92       	push	r0
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	89 83       	std	Y+1, r24	; 0x01
	count=0;
    208c:	10 92 78 00 	sts	0x0078, r1
	TIMER_Start(1,1024);
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	74 e0       	ldi	r23, 0x04	; 4
    2096:	0e 94 c8 09 	call	0x1390	; 0x1390 <TIMER_Start>
	while(count!= time_5seconds){};
    209a:	90 91 78 00 	lds	r25, 0x0078
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	98 17       	cp	r25, r24
    20a2:	d9 f7       	brne	.-10     	; 0x209a <Timer_count+0x1a>
	Timer_finish=1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 93 79 00 	sts	0x0079, r24
	TIMER_Stop(1);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	0e 94 b5 0b 	call	0x176a	; 0x176a <TIMER_Stop>
}
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <get_password>:

void get_password(uint8 *pass){
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <get_password+0xa>
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	9b 83       	std	Y+3, r25	; 0x03
    20ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	while(UART_RecieveByte()!=READY){};
    20cc:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    20d0:	98 2f       	mov	r25, r24
    20d2:	80 91 68 00 	lds	r24, 0x0068
    20d6:	98 17       	cp	r25, r24
    20d8:	c9 f7       	brne	.-14     	; 0x20cc <get_password+0x14>
	for(i=0;i<5;i++){
    20da:	19 82       	std	Y+1, r1	; 0x01
    20dc:	13 c0       	rjmp	.+38     	; 0x2104 <get_password+0x4c>
		UART_SendByte(READY);
    20de:	80 91 68 00 	lds	r24, 0x0068
    20e2:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
		pass[i]=UART_RecieveByte();
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	8c 01       	movw	r16, r24
    20f2:	02 0f       	add	r16, r18
    20f4:	13 1f       	adc	r17, r19
    20f6:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    20fa:	f8 01       	movw	r30, r16
    20fc:	80 83       	st	Z, r24
}

void get_password(uint8 *pass){
	uint8 i;
	while(UART_RecieveByte()!=READY){};
	for(i=0;i<5;i++){
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	8f 5f       	subi	r24, 0xFF	; 255
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	85 30       	cpi	r24, 0x05	; 5
    2108:	50 f3       	brcs	.-44     	; 0x20de <get_password+0x26>
		UART_SendByte(READY);
		pass[i]=UART_RecieveByte();
	}
}
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <Save_Password>:

void Save_Password(const uint8 * pass){
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	61 97       	sbiw	r28, 0x11	; 17
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	99 8b       	std	Y+17, r25	; 0x11
    2130:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0;i<5;i++){
    2132:	1f 86       	std	Y+15, r1	; 0x0f
    2134:	85 c0       	rjmp	.+266    	; 0x2240 <Save_Password+0x126>
		EEPROM_writeByte((0x000 | i),pass[i]);
    2136:	8f 85       	ldd	r24, Y+15	; 0x0f
    2138:	48 2f       	mov	r20, r24
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	8f 85       	ldd	r24, Y+15	; 0x0f
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	88 89       	ldd	r24, Y+16	; 0x10
    2144:	99 89       	ldd	r25, Y+17	; 0x11
    2146:	fc 01       	movw	r30, r24
    2148:	e2 0f       	add	r30, r18
    214a:	f3 1f       	adc	r31, r19
    214c:	20 81       	ld	r18, Z
    214e:	ca 01       	movw	r24, r20
    2150:	62 2f       	mov	r22, r18
    2152:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <EEPROM_writeByte>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 ea       	ldi	r26, 0xA0	; 160
    215c:	b1 e4       	ldi	r27, 0x41	; 65
    215e:	8b 87       	std	Y+11, r24	; 0x0b
    2160:	9c 87       	std	Y+12, r25	; 0x0c
    2162:	ad 87       	std	Y+13, r26	; 0x0d
    2164:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	6b 85       	ldd	r22, Y+11	; 0x0b
    2168:	7c 85       	ldd	r23, Y+12	; 0x0c
    216a:	8d 85       	ldd	r24, Y+13	; 0x0d
    216c:	9e 85       	ldd	r25, Y+14	; 0x0e
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a ef       	ldi	r20, 0xFA	; 250
    2174:	54 e4       	ldi	r21, 0x44	; 68
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	8f 83       	std	Y+7, r24	; 0x07
    2180:	98 87       	std	Y+8, r25	; 0x08
    2182:	a9 87       	std	Y+9, r26	; 0x09
    2184:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <Save_Password+0x8e>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	3f c0       	rjmp	.+126    	; 0x2226 <Save_Password+0x10c>
	else if (__tmp > 65535)
    21a8:	6f 81       	ldd	r22, Y+7	; 0x07
    21aa:	78 85       	ldd	r23, Y+8	; 0x08
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21bc:	18 16       	cp	r1, r24
    21be:	4c f5       	brge	.+82     	; 0x2212 <Save_Password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <Save_Password+0xee>
    21ea:	88 ec       	ldi	r24, 0xC8	; 200
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9c 83       	std	Y+4, r25	; 0x04
    21f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <Save_Password+0xdc>
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	69 f7       	brne	.-38     	; 0x21ea <Save_Password+0xd0>
    2210:	14 c0       	rjmp	.+40     	; 0x223a <Save_Password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <Save_Password+0x118>
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Save_Password(const uint8 * pass){
	uint8 i;
	for(i=0;i<5;i++){
    223a:	8f 85       	ldd	r24, Y+15	; 0x0f
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	8f 87       	std	Y+15, r24	; 0x0f
    2240:	8f 85       	ldd	r24, Y+15	; 0x0f
    2242:	85 30       	cpi	r24, 0x05	; 5
    2244:	08 f4       	brcc	.+2      	; 0x2248 <Save_Password+0x12e>
    2246:	77 cf       	rjmp	.-274    	; 0x2136 <Save_Password+0x1c>
		EEPROM_writeByte((0x000 | i),pass[i]);
		_delay_ms(20);
	}
}
    2248:	61 96       	adiw	r28, 0x11	; 17
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <Compare_Password>:

uint8 Compare_Password(const uint8 * pass){
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	63 97       	sbiw	r28, 0x13	; 19
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	9a 8b       	std	Y+18, r25	; 0x12
    2270:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i,EEPROM_read;
	for(i=0;i<5;i++){
    2272:	1f 86       	std	Y+15, r1	; 0x0f
    2274:	8d c0       	rjmp	.+282    	; 0x2390 <Compare_Password+0x136>
		EEPROM_readByte((0x000 | i),&EEPROM_read);
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9e 01       	movw	r18, r28
    227e:	20 5f       	subi	r18, 0xF0	; 240
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	b9 01       	movw	r22, r18
    2284:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <EEPROM_readByte>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 ea       	ldi	r26, 0xA0	; 160
    228e:	b1 e4       	ldi	r27, 0x41	; 65
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    2292:	9c 87       	std	Y+12, r25	; 0x0c
    2294:	ad 87       	std	Y+13, r26	; 0x0d
    2296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
    22b4:	a9 87       	std	Y+9, r26	; 0x09
    22b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <Compare_Password+0x80>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <Compare_Password+0xfe>
	else if (__tmp > 65535)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <Compare_Password+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	0f c0       	rjmp	.+30     	; 0x233a <Compare_Password+0xe0>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <Compare_Password+0xce>
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <Compare_Password+0xc2>
    2342:	14 c0       	rjmp	.+40     	; 0x236c <Compare_Password+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <Compare_Password+0x10a>
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		if(pass[i]!=EEPROM_read)
    236c:	8f 85       	ldd	r24, Y+15	; 0x0f
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	89 89       	ldd	r24, Y+17	; 0x11
    2374:	9a 89       	ldd	r25, Y+18	; 0x12
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	90 81       	ld	r25, Z
    237e:	88 89       	ldd	r24, Y+16	; 0x10
    2380:	98 17       	cp	r25, r24
    2382:	19 f0       	breq	.+6      	; 0x238a <Compare_Password+0x130>
			return 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	08 c0       	rjmp	.+16     	; 0x239a <Compare_Password+0x140>
	}
}

uint8 Compare_Password(const uint8 * pass){
	uint8 i,EEPROM_read;
	for(i=0;i<5;i++){
    238a:	8f 85       	ldd	r24, Y+15	; 0x0f
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	8f 87       	std	Y+15, r24	; 0x0f
    2390:	8f 85       	ldd	r24, Y+15	; 0x0f
    2392:	85 30       	cpi	r24, 0x05	; 5
    2394:	08 f4       	brcc	.+2      	; 0x2398 <Compare_Password+0x13e>
    2396:	6f cf       	rjmp	.-290    	; 0x2276 <Compare_Password+0x1c>
		EEPROM_readByte((0x000 | i),&EEPROM_read);
		_delay_ms(20);
		if(pass[i]!=EEPROM_read)
			return 1;
	}
	return 0;
    2398:	1b 8a       	std	Y+19, r1	; 0x13
    239a:	8b 89       	ldd	r24, Y+19	; 0x13
}
    239c:	63 96       	adiw	r28, 0x13	; 19
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <open_door>:

void open_door(void){
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	MOTOR_clockwise();
    23b6:	0e 94 2c 12 	call	0x2458	; 0x2458 <MOTOR_clockwise>
	Timer_count(2);
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	0e 94 40 10 	call	0x2080	; 0x2080 <Timer_count>
	Timer_finish=0;
    23c0:	10 92 79 00 	sts	0x0079, r1
	MOTOR_anticlockwise();
    23c4:	0e 94 41 12 	call	0x2482	; 0x2482 <MOTOR_anticlockwise>
	Timer_count(2);
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	0e 94 40 10 	call	0x2080	; 0x2080 <Timer_count>
	Timer_finish=0;
    23ce:	10 92 79 00 	sts	0x0079, r1
	MOTOR_stop();
    23d2:	0e 94 17 12 	call	0x242e	; 0x242e <MOTOR_stop>
}
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <Theif>:

void Theif(void){
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	PORTD|=(1<<7);
    23e4:	a2 e3       	ldi	r26, 0x32	; 50
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e2 e3       	ldi	r30, 0x32	; 50
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 68       	ori	r24, 0x80	; 128
    23f0:	8c 93       	st	X, r24
	Timer_count(12);
    23f2:	8c e0       	ldi	r24, 0x0C	; 12
    23f4:	0e 94 40 10 	call	0x2080	; 0x2080 <Timer_count>
	PORTD&=(~(1<<7));
    23f8:	a2 e3       	ldi	r26, 0x32	; 50
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e2 e3       	ldi	r30, 0x32	; 50
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 77       	andi	r24, 0x7F	; 127
    2404:	8c 93       	st	X, r24
}
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <MOTOR_init>:



#include "motor.h"

void MOTOR_init(){
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ctl |=(1<<DIR1)|(1<<DIR2);
    2414:	a7 e3       	ldi	r26, 0x37	; 55
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e7 e3       	ldi	r30, 0x37	; 55
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	83 60       	ori	r24, 0x03	; 3
    2420:	8c 93       	st	X, r24
	PWM_Timer0_Init(255);
    2422:	8f ef       	ldi	r24, 0xFF	; 255
    2424:	0e 94 7f 12 	call	0x24fe	; 0x24fe <PWM_Timer0_Init>
}
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <MOTOR_stop>:

void MOTOR_stop(){
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_R,DIR1);
    2436:	a8 e3       	ldi	r26, 0x38	; 56
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e8 e3       	ldi	r30, 0x38	; 56
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	8e 7f       	andi	r24, 0xFE	; 254
    2442:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_R,DIR2);
    2444:	a8 e3       	ldi	r26, 0x38	; 56
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e8 e3       	ldi	r30, 0x38	; 56
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8d 7f       	andi	r24, 0xFD	; 253
    2450:	8c 93       	st	X, r24
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <MOTOR_clockwise>:

void MOTOR_clockwise(){
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_R,DIR1);
    2460:	a8 e3       	ldi	r26, 0x38	; 56
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e8 e3       	ldi	r30, 0x38	; 56
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	8e 7f       	andi	r24, 0xFE	; 254
    246c:	8c 93       	st	X, r24
	SET_BIT(MOTOR_R,DIR2);
    246e:	a8 e3       	ldi	r26, 0x38	; 56
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e8 e3       	ldi	r30, 0x38	; 56
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	82 60       	ori	r24, 0x02	; 2
    247a:	8c 93       	st	X, r24
}
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <MOTOR_anticlockwise>:
void MOTOR_anticlockwise(){
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_R,DIR2);
    248a:	a8 e3       	ldi	r26, 0x38	; 56
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e8 e3       	ldi	r30, 0x38	; 56
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8d 7f       	andi	r24, 0xFD	; 253
    2496:	8c 93       	st	X, r24
	SET_BIT(MOTOR_R,DIR1);
    2498:	a8 e3       	ldi	r26, 0x38	; 56
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e8 e3       	ldi	r30, 0x38	; 56
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	81 60       	ori	r24, 0x01	; 1
    24a4:	8c 93       	st	X, r24
}
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	08 95       	ret

000024ac <MOTOR_toggle>:
void MOTOR_toggle(){
    24ac:	df 93       	push	r29
    24ae:	cf 93       	push	r28
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
	if(!((BIT_IS_CLEAR(MOTOR_R,DIR1)) && (BIT_IS_CLEAR(MOTOR_R,DIR2)))){
    24b4:	e8 e3       	ldi	r30, 0x38	; 56
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	81 70       	andi	r24, 0x01	; 1
    24c0:	90 70       	andi	r25, 0x00	; 0
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	49 f4       	brne	.+18     	; 0x24d8 <MOTOR_toggle+0x2c>
    24c6:	e8 e3       	ldi	r30, 0x38	; 56
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	82 70       	andi	r24, 0x02	; 2
    24d2:	90 70       	andi	r25, 0x00	; 0
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	81 f0       	breq	.+32     	; 0x24f8 <MOTOR_toggle+0x4c>
		TOGGLE_BIT(MOTOR_R,DIR1);
    24d8:	a8 e3       	ldi	r26, 0x38	; 56
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e8 e3       	ldi	r30, 0x38	; 56
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	90 81       	ld	r25, Z
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	89 27       	eor	r24, r25
    24e6:	8c 93       	st	X, r24
		TOGGLE_BIT(MOTOR_R,DIR2);
    24e8:	a8 e3       	ldi	r26, 0x38	; 56
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e8 e3       	ldi	r30, 0x38	; 56
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	90 81       	ld	r25, Z
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	89 27       	eor	r24, r25
    24f6:	8c 93       	st	X, r24
	}
}
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <PWM_Timer0_Init>:
#include "pwm.h"

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    250a:	e2 e5       	ldi	r30, 0x52	; 82
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    2510:	ec e5       	ldi	r30, 0x5C	; 92
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    2518:	a7 e3       	ldi	r26, 0x37	; 55
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e7 e3       	ldi	r30, 0x37	; 55
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	88 60       	ori	r24, 0x08	; 8
    2524:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2526:	e3 e5       	ldi	r30, 0x53	; 83
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	8a e6       	ldi	r24, 0x6A	; 106
    252c:	80 83       	st	Z, r24
}
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <uart_init>:

#include "uart.h"


void uart_init(const UART_config * cofig_Ptr)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <uart_init+0x6>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= (1 << RXEN) | (1 << TXEN); // enable Tx, Rx
    2544:	aa e2       	ldi	r26, 0x2A	; 42
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	ea e2       	ldi	r30, 0x2A	; 42
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	88 61       	ori	r24, 0x18	; 24
    2550:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) ;
    2552:	a0 e4       	ldi	r26, 0x40	; 64
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e0 e4       	ldi	r30, 0x40	; 64
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	80 68       	ori	r24, 0x80	; 128
    255e:	8c 93       	st	X, r24

	/*double speed*/
	UCSRA = (UCSRA & 0xFD) | (double_speed << 1); // double speed
    2560:	ab e2       	ldi	r26, 0x2B	; 43
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	eb e2       	ldi	r30, 0x2B	; 43
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	82 60       	ori	r24, 0x02	; 2
    256c:	8c 93       	st	X, r24

	//UCSRC |=  (1 << UCSZ1) | (1 << UCSZ0); // 8 bit data
	UCSRC = (UCSRC & 0xF9) | ((cofig_Ptr->data_bits & 0x03)<<1);
    256e:	a0 e4       	ldi	r26, 0x40	; 64
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e0 e4       	ldi	r30, 0x40	; 64
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	28 2f       	mov	r18, r24
    257a:	29 7f       	andi	r18, 0xF9	; 249
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	80 81       	ld	r24, Z
    2582:	88 2f       	mov	r24, r24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	83 70       	andi	r24, 0x03	; 3
    2588:	90 70       	andi	r25, 0x00	; 0
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	82 2b       	or	r24, r18
    2590:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (cofig_Ptr->data_bits & 0x04);
    2592:	aa e2       	ldi	r26, 0x2A	; 42
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	ea e2       	ldi	r30, 0x2A	; 42
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	98 2f       	mov	r25, r24
    259e:	9b 7f       	andi	r25, 0xFB	; 251
    25a0:	e9 81       	ldd	r30, Y+1	; 0x01
    25a2:	fa 81       	ldd	r31, Y+2	; 0x02
    25a4:	80 81       	ld	r24, Z
    25a6:	84 70       	andi	r24, 0x04	; 4
    25a8:	89 2b       	or	r24, r25
    25aa:	8c 93       	st	X, r24

	/*parity*/
	UCSRC = (UCSRC & 0xCF) | (cofig_Ptr->parity << 4);
    25ac:	a0 e4       	ldi	r26, 0x40	; 64
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e0 e4       	ldi	r30, 0x40	; 64
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	28 2f       	mov	r18, r24
    25b8:	2f 7c       	andi	r18, 0xCF	; 207
    25ba:	e9 81       	ldd	r30, Y+1	; 0x01
    25bc:	fa 81       	ldd	r31, Y+2	; 0x02
    25be:	81 81       	ldd	r24, Z+1	; 0x01
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	82 95       	swap	r24
    25c6:	92 95       	swap	r25
    25c8:	90 7f       	andi	r25, 0xF0	; 240
    25ca:	98 27       	eor	r25, r24
    25cc:	80 7f       	andi	r24, 0xF0	; 240
    25ce:	98 27       	eor	r25, r24
    25d0:	82 2b       	or	r24, r18
    25d2:	8c 93       	st	X, r24

	/* stop_bit*/
	UCSRC = (UCSRC & 0xF7) | (cofig_Ptr->stop_bit << 3);
    25d4:	a0 e4       	ldi	r26, 0x40	; 64
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e0 e4       	ldi	r30, 0x40	; 64
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	28 2f       	mov	r18, r24
    25e0:	27 7f       	andi	r18, 0xF7	; 247
    25e2:	e9 81       	ldd	r30, Y+1	; 0x01
    25e4:	fa 81       	ldd	r31, Y+2	; 0x02
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	82 2b       	or	r24, r18
    25fa:	8c 93       	st	X, r24

	/*mode*/
	UCSRC = (UCSRC & 0xBF) | (mode_bit << 6);
    25fc:	a0 e4       	ldi	r26, 0x40	; 64
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e0 e4       	ldi	r30, 0x40	; 64
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	8f 7b       	andi	r24, 0xBF	; 191
    2608:	8c 93       	st	X, r24

	UBRRL = BAUD_PRESCALE;
    260a:	e9 e2       	ldi	r30, 0x29	; 41
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	87 e6       	ldi	r24, 0x67	; 103
    2610:	80 83       	st	Z, r24
	UBRRH = BAUD_PRESCALE >> 8;
    2612:	e0 e4       	ldi	r30, 0x40	; 64
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	10 82       	st	Z, r1
}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <UART_SendByte>:


void UART_SendByte(uint8 data)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	0f 92       	push	r0
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA ,UDRE)){};
    262e:	eb e2       	ldi	r30, 0x2B	; 43
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	80 72       	andi	r24, 0x20	; 32
    263a:	90 70       	andi	r25, 0x00	; 0
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	b9 f3       	breq	.-18     	; 0x262e <UART_SendByte+0xc>
	UDR = data;
    2640:	ec e2       	ldi	r30, 0x2C	; 44
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	80 83       	st	Z, r24
}
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <UART_RecieveByte>:

uint8 UART_RecieveByte(void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA ,RXC)){};
    2658:	eb e2       	ldi	r30, 0x2B	; 43
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	88 23       	and	r24, r24
    2660:	dc f7       	brge	.-10     	; 0x2658 <UART_RecieveByte+0x8>
	return UDR;
    2662:	ec e2       	ldi	r30, 0x2C	; 44
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
}
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <uart_sendString>:

void uart_sendString(const uint8 *str)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <uart_sendString+0x6>
    2674:	0f 92       	push	r0
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	9b 83       	std	Y+3, r25	; 0x03
    267c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    267e:	19 82       	std	Y+1, r1	; 0x01
    2680:	0e c0       	rjmp	.+28     	; 0x269e <uart_sendString+0x30>
	while (str[i] != '\0')
	{
		UART_SendByte(str[i]);
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	80 81       	ld	r24, Z
    2694:	0e 94 11 13 	call	0x2622	; 0x2622 <UART_SendByte>
		i++;
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	8f 5f       	subi	r24, 0xFF	; 255
    269c:	89 83       	std	Y+1, r24	; 0x01
}

void uart_sendString(const uint8 *str)
{
	uint8 i = 0;
	while (str[i] != '\0')
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	9b 81       	ldd	r25, Y+3	; 0x03
    26a8:	fc 01       	movw	r30, r24
    26aa:	e2 0f       	add	r30, r18
    26ac:	f3 1f       	adc	r31, r19
    26ae:	80 81       	ld	r24, Z
    26b0:	88 23       	and	r24, r24
    26b2:	39 f7       	brne	.-50     	; 0x2682 <uart_sendString+0x14>
	{
		UART_SendByte(str[i]);
		i++;
	}
}
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <uart_recieveString>:

void uart_recieveString(uint8 *str)
{
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <uart_recieveString+0xa>
    26ca:	0f 92       	push	r0
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	9b 83       	std	Y+3, r25	; 0x03
    26d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26d4:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_RecieveByte();
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	9b 81       	ldd	r25, Y+3	; 0x03
    26e0:	8c 01       	movw	r16, r24
    26e2:	02 0f       	add	r16, r18
    26e4:	13 1f       	adc	r17, r19
    26e6:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    26ea:	f8 01       	movw	r30, r16
    26ec:	80 83       	st	Z, r24
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <uart_recieveString+0x4e>
	while (str[i] != '#')
	{
		i++;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_RecieveByte();
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2700:	8c 01       	movw	r16, r24
    2702:	02 0f       	add	r16, r18
    2704:	13 1f       	adc	r17, r19
    2706:	0e 94 28 13 	call	0x2650	; 0x2650 <UART_RecieveByte>
    270a:	f8 01       	movw	r30, r16
    270c:	80 83       	st	Z, r24

void uart_recieveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_RecieveByte();
	while (str[i] != '#')
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	9b 81       	ldd	r25, Y+3	; 0x03
    2718:	fc 01       	movw	r30, r24
    271a:	e2 0f       	add	r30, r18
    271c:	f3 1f       	adc	r31, r19
    271e:	80 81       	ld	r24, Z
    2720:	83 32       	cpi	r24, 0x23	; 35
    2722:	31 f7       	brne	.-52     	; 0x26f0 <uart_recieveString+0x30>
	{
		i++;
		str[i] = UART_RecieveByte();
	}
	str[i] = '\0';
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	9b 81       	ldd	r25, Y+3	; 0x03
    272e:	fc 01       	movw	r30, r24
    2730:	e2 0f       	add	r30, r18
    2732:	f3 1f       	adc	r31, r19
    2734:	10 82       	st	Z, r1
}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	08 95       	ret

00002746 <__prologue_saves__>:
    2746:	2f 92       	push	r2
    2748:	3f 92       	push	r3
    274a:	4f 92       	push	r4
    274c:	5f 92       	push	r5
    274e:	6f 92       	push	r6
    2750:	7f 92       	push	r7
    2752:	8f 92       	push	r8
    2754:	9f 92       	push	r9
    2756:	af 92       	push	r10
    2758:	bf 92       	push	r11
    275a:	cf 92       	push	r12
    275c:	df 92       	push	r13
    275e:	ef 92       	push	r14
    2760:	ff 92       	push	r15
    2762:	0f 93       	push	r16
    2764:	1f 93       	push	r17
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	ca 1b       	sub	r28, r26
    2770:	db 0b       	sbc	r29, r27
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	09 94       	ijmp

0000277e <__epilogue_restores__>:
    277e:	2a 88       	ldd	r2, Y+18	; 0x12
    2780:	39 88       	ldd	r3, Y+17	; 0x11
    2782:	48 88       	ldd	r4, Y+16	; 0x10
    2784:	5f 84       	ldd	r5, Y+15	; 0x0f
    2786:	6e 84       	ldd	r6, Y+14	; 0x0e
    2788:	7d 84       	ldd	r7, Y+13	; 0x0d
    278a:	8c 84       	ldd	r8, Y+12	; 0x0c
    278c:	9b 84       	ldd	r9, Y+11	; 0x0b
    278e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2790:	b9 84       	ldd	r11, Y+9	; 0x09
    2792:	c8 84       	ldd	r12, Y+8	; 0x08
    2794:	df 80       	ldd	r13, Y+7	; 0x07
    2796:	ee 80       	ldd	r14, Y+6	; 0x06
    2798:	fd 80       	ldd	r15, Y+5	; 0x05
    279a:	0c 81       	ldd	r16, Y+4	; 0x04
    279c:	1b 81       	ldd	r17, Y+3	; 0x03
    279e:	aa 81       	ldd	r26, Y+2	; 0x02
    27a0:	b9 81       	ldd	r27, Y+1	; 0x01
    27a2:	ce 0f       	add	r28, r30
    27a4:	d1 1d       	adc	r29, r1
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	ed 01       	movw	r28, r26
    27b2:	08 95       	ret

000027b4 <_exit>:
    27b4:	f8 94       	cli

000027b6 <__stop_program>:
    27b6:	ff cf       	rjmp	.-2      	; 0x27b6 <__stop_program>
